
rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  080085ec  080085ec  000185ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008910  08008910  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008910  08008910  00018910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008918  08008918  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000d28  20000060  20000060  00020060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000d88  20000d88  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014fbb  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028d2  00000000  00000000  0003508a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f30  00000000  00000000  00037960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000beb  00000000  00000000  00038890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002240a  00000000  00000000  0003947b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011c88  00000000  00000000  0005b885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d196c  00000000  00000000  0006d50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004598  00000000  00000000  0013ee7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00143414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085d4 	.word	0x080085d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	080085d4 	.word	0x080085d4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b970 	b.w	8000d5c <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	460f      	mov	r7, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d14a      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0xe2>
 8000aaa:	fab2 f382 	clz	r3, r2
 8000aae:	b143      	cbz	r3, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab4:	f1c3 0220 	rsb	r2, r3, #32
 8000ab8:	409f      	lsls	r7, r3
 8000aba:	fa20 f202 	lsr.w	r2, r0, r2
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	409c      	lsls	r4, r3
 8000ac2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ac6:	fa1f f58c 	uxth.w	r5, ip
 8000aca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ace:	0c22      	lsrs	r2, r4, #16
 8000ad0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ad4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad8:	fb01 f005 	mul.w	r0, r1, r5
 8000adc:	4290      	cmp	r0, r2
 8000ade:	d90a      	bls.n	8000af6 <__udivmoddi4+0x62>
 8000ae0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae8:	f080 811c 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000aec:	4290      	cmp	r0, r2
 8000aee:	f240 8119 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000af2:	3902      	subs	r1, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a12      	subs	r2, r2, r0
 8000af8:	b2a4      	uxth	r4, r4
 8000afa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000afe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b06:	fb00 f505 	mul.w	r5, r0, r5
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	d90a      	bls.n	8000b24 <__udivmoddi4+0x90>
 8000b0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b16:	f080 8107 	bcs.w	8000d28 <__udivmoddi4+0x294>
 8000b1a:	42a5      	cmp	r5, r4
 8000b1c:	f240 8104 	bls.w	8000d28 <__udivmoddi4+0x294>
 8000b20:	4464      	add	r4, ip
 8000b22:	3802      	subs	r0, #2
 8000b24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b28:	1b64      	subs	r4, r4, r5
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	b11e      	cbz	r6, 8000b36 <__udivmoddi4+0xa2>
 8000b2e:	40dc      	lsrs	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	e9c6 4300 	strd	r4, r3, [r6]
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0xbc>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80ed 	beq.w	8000d1e <__udivmoddi4+0x28a>
 8000b44:	2100      	movs	r1, #0
 8000b46:	e9c6 0500 	strd	r0, r5, [r6]
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b50:	fab3 f183 	clz	r1, r3
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d149      	bne.n	8000bec <__udivmoddi4+0x158>
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	d302      	bcc.n	8000b62 <__udivmoddi4+0xce>
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	f200 80f8 	bhi.w	8000d52 <__udivmoddi4+0x2be>
 8000b62:	1a84      	subs	r4, r0, r2
 8000b64:	eb65 0203 	sbc.w	r2, r5, r3
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4617      	mov	r7, r2
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d0e2      	beq.n	8000b36 <__udivmoddi4+0xa2>
 8000b70:	e9c6 4700 	strd	r4, r7, [r6]
 8000b74:	e7df      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xe6>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f382 	clz	r3, r2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8090 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b84:	1a8a      	subs	r2, r1, r2
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b94:	fb07 2015 	mls	r0, r7, r5, r2
 8000b98:	0c22      	lsrs	r2, r4, #16
 8000b9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba6:	eb1c 0202 	adds.w	r2, ip, r2
 8000baa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4290      	cmp	r0, r2
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2b8>
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	1a12      	subs	r2, r2, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x14e>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x14c>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2c2>
 8000be0:	4610      	mov	r0, r2
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bea:	e79f      	b.n	8000b2c <__udivmoddi4+0x98>
 8000bec:	f1c1 0720 	rsb	r7, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000c02:	40fd      	lsrs	r5, r7
 8000c04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c08:	4323      	orrs	r3, r4
 8000c0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c0e:	fa1f fe8c 	uxth.w	lr, ip
 8000c12:	fb09 5518 	mls	r5, r9, r8, r5
 8000c16:	0c1c      	lsrs	r4, r3, #16
 8000c18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	fa00 f001 	lsl.w	r0, r0, r1
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2b4>
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2b4>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4464      	add	r4, ip
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	b29d      	uxth	r5, r3
 8000c48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2ac>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2ac>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	4464      	add	r4, ip
 8000c6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c72:	fba3 9502 	umull	r9, r5, r3, r2
 8000c76:	eba4 040e 	sub.w	r4, r4, lr
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46ae      	mov	lr, r5
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x29c>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x298>
 8000c84:	b156      	cbz	r6, 8000c9c <__udivmoddi4+0x208>
 8000c86:	ebb0 0208 	subs.w	r2, r0, r8
 8000c8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c92:	40ca      	lsrs	r2, r1
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	4317      	orrs	r7, r2
 8000c98:	e9c6 7400 	strd	r7, r4, [r6]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	f1c3 0120 	rsb	r1, r3, #32
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cb4:	409d      	lsls	r5, r3
 8000cb6:	432a      	orrs	r2, r5
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cce:	fb00 f50e 	mul.w	r5, r0, lr
 8000cd2:	428d      	cmp	r5, r1
 8000cd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x258>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b0>
 8000ce4:	428d      	cmp	r5, r1
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b0>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1b49      	subs	r1, r1, r5
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cf4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000d00:	4291      	cmp	r1, r2
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x282>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2a8>
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2a8>
 8000d12:	3d02      	subs	r5, #2
 8000d14:	4462      	add	r2, ip
 8000d16:	1a52      	subs	r2, r2, r1
 8000d18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0xfc>
 8000d1e:	4631      	mov	r1, r6
 8000d20:	4630      	mov	r0, r6
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000d24:	4639      	mov	r1, r7
 8000d26:	e6e6      	b.n	8000af6 <__udivmoddi4+0x62>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	e6fb      	b.n	8000b24 <__udivmoddi4+0x90>
 8000d2c:	4548      	cmp	r0, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3c:	4645      	mov	r5, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x282>
 8000d40:	462b      	mov	r3, r5
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x258>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4c:	3d02      	subs	r5, #2
 8000d4e:	4462      	add	r2, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d52:	4608      	mov	r0, r1
 8000d54:	e70a      	b.n	8000b6c <__udivmoddi4+0xd8>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x14e>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f003 fbea 	bl	800453c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f82a 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f000 f9c8 	bl	8001100 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d70:	f000 f99e 	bl	80010b0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d74:	f000 f88e 	bl	8000e94 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d78:	f000 f970 	bl	800105c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d7c:	f000 f8d6 	bl	8000f2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <main+0x58>)
 8000d82:	f005 f86d 	bl	8005e60 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d86:	2100      	movs	r1, #0
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <main+0x58>)
 8000d8a:	f005 f99b 	bl	80060c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d8e:	2104      	movs	r1, #4
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <main+0x58>)
 8000d92:	f005 f997 	bl	80060c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000d96:	2108      	movs	r1, #8
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <main+0x58>)
 8000d9a:	f005 f993 	bl	80060c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000d9e:	210c      	movs	r1, #12
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <main+0x58>)
 8000da2:	f005 f98f 	bl	80060c4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <main+0x5c>)
 8000da8:	f005 f8c2 	bl	8005f30 <HAL_TIM_Base_Start_IT>

  //char uart_buf[100];
  //int uart_buf_len;
  setup();
 8000dac:	f002 fac6 	bl	800333c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  loop();
 8000db0:	f002 fae0 	bl	8003374 <loop>
 8000db4:	e7fc      	b.n	8000db0 <main+0x50>
 8000db6:	bf00      	nop
 8000db8:	200000c4 	.word	0x200000c4
 8000dbc:	2000007c 	.word	0x2000007c

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2230      	movs	r2, #48	; 0x30
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f007 faad 	bl	800832e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <SystemClock_Config+0xcc>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <SystemClock_Config+0xcc>)
 8000dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <SystemClock_Config+0xcc>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e30:	2304      	movs	r3, #4
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000e34:	235a      	movs	r3, #90	; 0x5a
 8000e36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 fb23 	bl	8005490 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e50:	f000 fa04 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 fd84 	bl	8005980 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e7e:	f000 f9ed 	bl	800125c <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3750      	adds	r7, #80	; 0x50
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000

08000e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30000;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eba:	f247 5230 	movw	r2, #30000	; 0x7530
 8000ebe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ec8:	2296      	movs	r2, #150	; 0x96
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eda:	f004 ff71 	bl	8005dc0 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee4:	f000 f9ba 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ef6:	f005 fb77 	bl	80065e8 <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f00:	f000 f9ac 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000f12:	f005 ff69 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 f99e 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000007c 	.word	0x2000007c

08000f2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	; 0x38
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]
 8000f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <MX_TIM3_Init+0x128>)
 8000f5e:	4a3e      	ldr	r2, [pc, #248]	; (8001058 <MX_TIM3_Init+0x12c>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 450;
 8000f62:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <MX_TIM3_Init+0x128>)
 8000f64:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000f68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <MX_TIM3_Init+0x128>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <MX_TIM3_Init+0x128>)
 8000f72:	2264      	movs	r2, #100	; 0x64
 8000f74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <MX_TIM3_Init+0x128>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <MX_TIM3_Init+0x128>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f82:	4834      	ldr	r0, [pc, #208]	; (8001054 <MX_TIM3_Init+0x128>)
 8000f84:	f004 ff1c 	bl	8005dc0 <HAL_TIM_Base_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f8e:	f000 f965 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	482d      	ldr	r0, [pc, #180]	; (8001054 <MX_TIM3_Init+0x128>)
 8000fa0:	f005 fb22 	bl	80065e8 <HAL_TIM_ConfigClockSource>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000faa:	f000 f957 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fae:	4829      	ldr	r0, [pc, #164]	; (8001054 <MX_TIM3_Init+0x128>)
 8000fb0:	f005 f82e 	bl	8006010 <HAL_TIM_PWM_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fba:	f000 f94f 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4821      	ldr	r0, [pc, #132]	; (8001054 <MX_TIM3_Init+0x128>)
 8000fce:	f005 ff0b 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fd8:	f000 f940 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fdc:	2360      	movs	r3, #96	; 0x60
 8000fde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4818      	ldr	r0, [pc, #96]	; (8001054 <MX_TIM3_Init+0x128>)
 8000ff4:	f005 fa36 	bl	8006464 <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ffe:	f000 f92d 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2204      	movs	r2, #4
 8001006:	4619      	mov	r1, r3
 8001008:	4812      	ldr	r0, [pc, #72]	; (8001054 <MX_TIM3_Init+0x128>)
 800100a:	f005 fa2b 	bl	8006464 <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001014:	f000 f922 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2208      	movs	r2, #8
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_TIM3_Init+0x128>)
 8001020:	f005 fa20 	bl	8006464 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800102a:	f000 f917 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	220c      	movs	r2, #12
 8001032:	4619      	mov	r1, r3
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <MX_TIM3_Init+0x128>)
 8001036:	f005 fa15 	bl	8006464 <HAL_TIM_PWM_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001040:	f000 f90c 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <MX_TIM3_Init+0x128>)
 8001046:	f003 f86d 	bl	8004124 <HAL_TIM_MspPostInit>

}
 800104a:	bf00      	nop
 800104c:	3738      	adds	r7, #56	; 0x38
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000c4 	.word	0x200000c4
 8001058:	40000400 	.word	0x40000400

0800105c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <MX_USART2_UART_Init+0x50>)
 8001064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001068:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800106c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001094:	f005 ff38 	bl	8006f08 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109e:	f000 f8dd 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000010c 	.word	0x2000010c
 80010ac:	40004400 	.word	0x40004400

080010b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_DMA_Init+0x4c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <MX_DMA_Init+0x4c>)
 80010c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_DMA_Init+0x4c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2010      	movs	r0, #16
 80010d8:	f003 fba1 	bl	800481e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010dc:	2010      	movs	r0, #16
 80010de:	f003 fbba 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2011      	movs	r0, #17
 80010e8:	f003 fb99 	bl	800481e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010ec:	2011      	movs	r0, #17
 80010ee:	f003 fbb2 	bl	8004856 <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <MX_GPIO_Init+0x14c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a4b      	ldr	r2, [pc, #300]	; (800124c <MX_GPIO_Init+0x14c>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <MX_GPIO_Init+0x14c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b45      	ldr	r3, [pc, #276]	; (800124c <MX_GPIO_Init+0x14c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a44      	ldr	r2, [pc, #272]	; (800124c <MX_GPIO_Init+0x14c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b42      	ldr	r3, [pc, #264]	; (800124c <MX_GPIO_Init+0x14c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <MX_GPIO_Init+0x14c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a3d      	ldr	r2, [pc, #244]	; (800124c <MX_GPIO_Init+0x14c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <MX_GPIO_Init+0x14c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <MX_GPIO_Init+0x14c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <MX_GPIO_Init+0x14c>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <MX_GPIO_Init+0x14c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <MX_GPIO_Init+0x14c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <MX_GPIO_Init+0x14c>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_GPIO_Init+0x14c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011a8:	4829      	ldr	r0, [pc, #164]	; (8001250 <MX_GPIO_Init+0x150>)
 80011aa:	f004 f925 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LeftWheelEncoderChannelA_Pin */
  GPIO_InitStruct.Pin = LeftWheelEncoderChannelA_Pin;
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011b2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftWheelEncoderChannelA_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4824      	ldr	r0, [pc, #144]	; (8001254 <MX_GPIO_Init+0x154>)
 80011c4:	f003 ff64 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftWheelEncoderChannelB_Pin */
  GPIO_InitStruct.Pin = LeftWheelEncoderChannelB_Pin;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftWheelEncoderChannelB_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	481d      	ldr	r0, [pc, #116]	; (8001254 <MX_GPIO_Init+0x154>)
 80011de:	f003 ff57 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenLED_Pin OrangeLED_Pin RedLED_Pin BlueLED_Pin */
  GPIO_InitStruct.Pin = GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin;
 80011e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4815      	ldr	r0, [pc, #84]	; (8001250 <MX_GPIO_Init+0x150>)
 80011fc:	f003 ff48 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightWheelEncoderChannelA_Pin */
  GPIO_InitStruct.Pin = RightWheelEncoderChannelA_Pin;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001204:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightWheelEncoderChannelA_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4810      	ldr	r0, [pc, #64]	; (8001258 <MX_GPIO_Init+0x158>)
 8001216:	f003 ff3b 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightWheelEncoderChannelB_Pin */
  GPIO_InitStruct.Pin = RightWheelEncoderChannelB_Pin;
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightWheelEncoderChannelB_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	480a      	ldr	r0, [pc, #40]	; (8001258 <MX_GPIO_Init+0x158>)
 800122e:	f003 ff2f 	bl	8005090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2017      	movs	r0, #23
 8001238:	f003 faf1 	bl	800481e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800123c:	2017      	movs	r0, #23
 800123e:	f003 fb0a 	bl	8004856 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40020400 	.word	0x40020400

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>

08001266 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <_ZN3ros3MsgC1Ev+0x1c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	080088e0 	.word	0x080088e0

080012a8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
      data()
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffe8 	bl	8001288 <_ZN3ros3MsgC1Ev>
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3304      	adds	r3, #4
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ffcf 	bl	8001266 <_ZN3ros4TimeC1Ev>
    {
    }
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	080088c8 	.word	0x080088c8

080012d8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6859      	ldr	r1, [r3, #4]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	b2ca      	uxtb	r2, r1
 80012f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	0a19      	lsrs	r1, r3, #8
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	4413      	add	r3, r2
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	0c19      	lsrs	r1, r3, #16
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3302      	adds	r3, #2
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	4413      	add	r3, r2
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	0e19      	lsrs	r1, r3, #24
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3303      	adds	r3, #3
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	4413      	add	r3, r2
 8001326:	b2ca      	uxtb	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3304      	adds	r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6899      	ldr	r1, [r3, #8]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	b2ca      	uxtb	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	0a19      	lsrs	r1, r3, #8
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	b2ca      	uxtb	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	0c19      	lsrs	r1, r3, #16
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3302      	adds	r3, #2
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	0e19      	lsrs	r1, r3, #24
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3303      	adds	r3, #3
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	b2ca      	uxtb	r2, r1
 8001372:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3304      	adds	r3, #4
 8001378:	60fb      	str	r3, [r7, #12]
      return offset;
 800137a:	68fb      	ldr	r3, [r7, #12]
    }
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	440b      	add	r3, r1
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3302      	adds	r3, #2
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	440b      	add	r3, r1
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3303      	adds	r3, #3
 80013d8:	6839      	ldr	r1, [r7, #0]
 80013da:	440b      	add	r3, r1
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	061b      	lsls	r3, r3, #24
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3304      	adds	r3, #4
 80013ea:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3301      	adds	r3, #1
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	440b      	add	r3, r1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3302      	adds	r3, #2
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	440b      	add	r3, r1
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	041b      	lsls	r3, r3, #16
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3303      	adds	r3, #3
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	440b      	add	r3, r1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	061b      	lsls	r3, r3, #24
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3304      	adds	r3, #4
 8001440:	60fb      	str	r3, [r7, #12]
     return offset;
 8001442:	68fb      	ldr	r3, [r7, #12]
    }
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	080085ec 	.word	0x080085ec

0800146c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	080085fc 	.word	0x080085fc

08001488 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fef8 	bl	8001288 <_ZN3ros3MsgC1Ev>
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014a8:	609a      	str	r2, [r3, #8]
      message_type(""),
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014ae:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014b4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
    {
    }
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	080088b0 	.word	0x080088b0
 80014cc:	08008620 	.word	0x08008620

080014d0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8899      	ldrh	r1, [r3, #4]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	b2ca      	uxtb	r2, r1
 80014ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	889b      	ldrh	r3, [r3, #4]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	b299      	uxth	r1, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	3301      	adds	r3, #1
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	b2ca      	uxtb	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3302      	adds	r3, #2
 8001504:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fe5c 	bl	80001c8 <strlen>
 8001510:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	69b9      	ldr	r1, [r7, #24]
 800151a:	4618      	mov	r0, r3
 800151c:	f001 ffee 	bl	80034fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	3304      	adds	r3, #4
 8001524:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	18d0      	adds	r0, r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4619      	mov	r1, r3
 8001534:	f006 ff30 	bl	8008398 <memcpy>
      offset += length_topic_name;
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4413      	add	r3, r2
 800153e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe3f 	bl	80001c8 <strlen>
 800154a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	4413      	add	r3, r2
 8001552:	6979      	ldr	r1, [r7, #20]
 8001554:	4618      	mov	r0, r3
 8001556:	f001 ffd1 	bl	80034fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	18d0      	adds	r0, r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4619      	mov	r1, r3
 800156e:	f006 ff13 	bl	8008398 <memcpy>
      offset += length_message_type;
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4413      	add	r3, r2
 8001578:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe fe22 	bl	80001c8 <strlen>
 8001584:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	4413      	add	r3, r2
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	4618      	mov	r0, r3
 8001590:	f001 ffb4 	bl	80034fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	3304      	adds	r3, #4
 8001598:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	18d0      	adds	r0, r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4619      	mov	r1, r3
 80015a8:	f006 fef6 	bl	8008398 <memcpy>
      offset += length_md5sum;
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4413      	add	r3, r2
 80015b2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80015ba:	68f9      	ldr	r1, [r7, #12]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	4413      	add	r3, r2
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	0a19      	lsrs	r1, r3, #8
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	b2ca      	uxtb	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	0c19      	lsrs	r1, r3, #16
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3302      	adds	r3, #2
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	b2ca      	uxtb	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	0e19      	lsrs	r1, r3, #24
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3303      	adds	r3, #3
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	61fb      	str	r3, [r7, #28]
      return offset;
 80015fc:	69fb      	ldr	r3, [r7, #28]
    }
 80015fe:	4618      	mov	r0, r3
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001606:	b580      	push	{r7, lr}
 8001608:	b08a      	sub	sp, #40	; 0x28
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	889b      	ldrh	r3, [r3, #4]
 8001626:	b21a      	sxth	r2, r3
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	3301      	adds	r3, #1
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	440b      	add	r3, r1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3302      	adds	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	441a      	add	r2, r3
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f001 ff71 	bl	800353a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	3304      	adds	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
 8001662:	e00b      	b.n	800167c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	441a      	add	r2, r3
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	3b01      	subs	r3, #1
 800166e:	6839      	ldr	r1, [r7, #0]
 8001670:	440b      	add	r3, r1
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4413      	add	r3, r2
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	429a      	cmp	r2, r3
 8001686:	d3ed      	bcc.n	8001664 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	4413      	add	r3, r2
 800168e:	3b01      	subs	r3, #1
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	4413      	add	r3, r2
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	3b01      	subs	r3, #1
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	441a      	add	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4413      	add	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	441a      	add	r2, r3
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 ff3e 	bl	800353a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	3304      	adds	r3, #4
 80016c2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	e00b      	b.n	80016e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	441a      	add	r2, r3
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	440b      	add	r3, r1
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	3301      	adds	r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4413      	add	r3, r2
 80016e8:	6a3a      	ldr	r2, [r7, #32]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d3ed      	bcc.n	80016ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4413      	add	r3, r2
 80016f4:	3b01      	subs	r3, #1
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	3b01      	subs	r3, #1
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4413      	add	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	441a      	add	r2, r3
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f001 ff0b 	bl	800353a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	3304      	adds	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e00b      	b.n	8001748 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	441a      	add	r2, r3
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b01      	subs	r3, #1
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	440b      	add	r3, r1
 800173e:	7812      	ldrb	r2, [r2, #0]
 8001740:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4413      	add	r3, r2
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	429a      	cmp	r2, r3
 8001752:	d3ed      	bcc.n	8001730 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	3b01      	subs	r3, #1
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4413      	add	r3, r2
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	3b01      	subs	r3, #1
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	441a      	add	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	440a      	add	r2, r1
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	4313      	orrs	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3301      	adds	r3, #1
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	440b      	add	r3, r1
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	4313      	orrs	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	3302      	adds	r3, #2
 80017a2:	6839      	ldr	r1, [r7, #0]
 80017a4:	440b      	add	r3, r1
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	3303      	adds	r3, #3
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	440b      	add	r3, r1
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	061b      	lsls	r3, r3, #24
 80017bc:	4313      	orrs	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	3304      	adds	r3, #4
 80017ca:	61bb      	str	r3, [r7, #24]
     return offset;
 80017cc:	69bb      	ldr	r3, [r7, #24]
    }
 80017ce:	4618      	mov	r0, r3
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	08008624 	.word	0x08008624

080017f4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	08008640 	.word	0x08008640

08001810 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fd34 	bl	8001288 <_ZN3ros3MsgC1Ev>
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
      level(0),
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	711a      	strb	r2, [r3, #4]
      msg("")
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001830:	609a      	str	r2, [r3, #8]
    {
    }
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	08008898 	.word	0x08008898
 8001840:	08008620 	.word	0x08008620

08001844 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	4413      	add	r3, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	7912      	ldrb	r2, [r2, #4]
 800185c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3301      	adds	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fcad 	bl	80001c8 <strlen>
 800186e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	4413      	add	r3, r2
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	4618      	mov	r0, r3
 800187a:	f001 fe3f 	bl	80034fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	18d0      	adds	r0, r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	4619      	mov	r1, r3
 8001892:	f006 fd81 	bl	8008398 <memcpy>
      offset += length_msg;
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
      return offset;
 800189e:	68fb      	ldr	r3, [r7, #12]
    }
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	3301      	adds	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	441a      	add	r2, r3
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 fe30 	bl	800353a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	3304      	adds	r3, #4
 80018de:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00b      	b.n	80018fe <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	441a      	add	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6839      	ldr	r1, [r7, #0]
 80018f2:	440b      	add	r3, r1
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	429a      	cmp	r2, r3
 8001908:	d3ed      	bcc.n	80018e6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	3b01      	subs	r3, #1
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	3b01      	subs	r3, #1
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	441a      	add	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
     return offset;
 800192e:	693b      	ldr	r3, [r7, #16]
    }
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	08008664 	.word	0x08008664

08001954 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	08008678 	.word	0x08008678

08001970 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fc84 	bl	8001288 <_ZN3ros3MsgC1Ev>
 8001980:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	08008880 	.word	0x08008880

080019cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	b2ca      	uxtb	r2, r1
 80019e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	0a19      	lsrs	r1, r3, #8
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3301      	adds	r3, #1
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	0c19      	lsrs	r1, r3, #16
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	3302      	adds	r3, #2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0e19      	lsrs	r1, r3, #24
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3303      	adds	r3, #3
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b2ca      	uxtb	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	3304      	adds	r3, #4
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	e02a      	b.n	8001a80 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001a38:	6939      	ldr	r1, [r7, #16]
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	0a19      	lsrs	r1, r3, #8
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	b2ca      	uxtb	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	0c19      	lsrs	r1, r3, #16
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	b2ca      	uxtb	r2, r1
 8001a62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	0e19      	lsrs	r1, r3, #24
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	b2ca      	uxtb	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3304      	adds	r3, #4
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	6a3a      	ldr	r2, [r7, #32]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d3cf      	bcc.n	8001a2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6919      	ldr	r1, [r3, #16]
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	b2ca      	uxtb	r2, r1
 8001a96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	0a19      	lsrs	r1, r3, #8
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b2ca      	uxtb	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	0c19      	lsrs	r1, r3, #16
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2ca      	uxtb	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	0e19      	lsrs	r1, r3, #24
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b2ca      	uxtb	r2, r1
 8001acc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	e02a      	b.n	8001b30 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	0a19      	lsrs	r1, r3, #8
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	b2ca      	uxtb	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	0c19      	lsrs	r1, r3, #16
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	0e19      	lsrs	r1, r3, #24
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2ca      	uxtb	r2, r1
 8001b22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	3304      	adds	r3, #4
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3cf      	bcc.n	8001ada <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69d9      	ldr	r1, [r3, #28]
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	b2ca      	uxtb	r2, r1
 8001b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	0a19      	lsrs	r1, r3, #8
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	3301      	adds	r3, #1
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	b2ca      	uxtb	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	0c19      	lsrs	r1, r3, #16
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	3302      	adds	r3, #2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	b2ca      	uxtb	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	0e19      	lsrs	r1, r3, #24
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3303      	adds	r3, #3
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	3304      	adds	r3, #4
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	e027      	b.n	8001bda <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fb16 	bl	80001c8 <strlen>
 8001b9c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	6979      	ldr	r1, [r7, #20]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f001 fca8 	bl	80034fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	3304      	adds	r3, #4
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	18d0      	adds	r0, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f006 fbe6 	bl	8008398 <memcpy>
      offset += length_stringsi;
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3d2      	bcc.n	8001b8a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001be6:	4618      	mov	r0, r3
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b08e      	sub	sp, #56	; 0x38
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	3301      	adds	r3, #1
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	6a3a      	ldr	r2, [r7, #32]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	6a3a      	ldr	r2, [r7, #32]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	6a3a      	ldr	r2, [r7, #32]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3e:	3304      	adds	r3, #4
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	6a3a      	ldr	r2, [r7, #32]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d90a      	bls.n	8001c62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f006 fb32 	bl	80082c0 <realloc>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a3a      	ldr	r2, [r7, #32]
 8001c66:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c6c:	e035      	b.n	8001cda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	440a      	add	r2, r1
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c84:	3301      	adds	r3, #1
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	440b      	add	r3, r1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c96:	3302      	adds	r3, #2
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	440b      	add	r3, r1
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca8:	3303      	adds	r3, #3
 8001caa:	6839      	ldr	r1, [r7, #0]
 8001cac:	440b      	add	r3, r1
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d3c4      	bcc.n	8001c6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	3302      	adds	r3, #2
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d14:	3303      	adds	r3, #3
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	3304      	adds	r3, #4
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d90a      	bls.n	8001d4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f006 fabe 	bl	80082c0 <realloc>
 8001d44:	4602      	mov	r2, r0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d54:	e035      	b.n	8001dc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	440a      	add	r2, r1
 8001d62:	7812      	ldrb	r2, [r2, #0]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	6839      	ldr	r1, [r7, #0]
 8001d70:	440b      	add	r3, r1
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	3302      	adds	r3, #2
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	440b      	add	r3, r1
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	041b      	lsls	r3, r3, #16
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d90:	3303      	adds	r3, #3
 8001d92:	6839      	ldr	r1, [r7, #0]
 8001d94:	440b      	add	r3, r1
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	3304      	adds	r3, #4
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	3214      	adds	r2, #20
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d3c4      	bcc.n	8001d56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	3301      	adds	r3, #1
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dea:	3302      	adds	r3, #2
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	3303      	adds	r3, #3
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	3304      	adds	r3, #4
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d90a      	bls.n	8001e32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f006 fa4a 	bl	80082c0 <realloc>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3c:	e03e      	b.n	8001ebc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	441a      	add	r2, r3
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 fb75 	bl	800353a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	3304      	adds	r3, #4
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e00b      	b.n	8001e74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	441a      	add	r2, r3
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	3b01      	subs	r3, #1
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	440b      	add	r3, r1
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	3301      	adds	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4413      	add	r3, r2
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3ed      	bcc.n	8001e5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	3b01      	subs	r3, #1
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	3b01      	subs	r3, #1
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	441a      	add	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	3220      	adds	r2, #32
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	3301      	adds	r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3bb      	bcc.n	8001e3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3738      	adds	r7, #56	; 0x38
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	080087bc 	.word	0x080087bc

08001eec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	0800869c 	.word	0x0800869c

08001f08 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	611a      	str	r2, [r3, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68d8      	ldr	r0, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6891      	ldr	r1, [r2, #8]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4798      	blx	r3
 8001f54:	4603      	mov	r3, r0
  };
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
  }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	2000010c 	.word	0x2000010c

08001fd4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f804 	bl	8001fea <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffe:	4619      	mov	r1, r3
 8002000:	f005 f84e 	bl	80070a0 <HAL_UART_Receive_DMA>
    }
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_ZN13STM32Hardware4readEv>:

    int read(){
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
 8002018:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffa8 	bl	8001f76 <_ZN13STM32Hardware10getRdmaIndEv>
 8002026:	4603      	mov	r3, r0
 8002028:	429c      	cmp	r4, r3
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d012      	beq.n	800205c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800203c:	1c59      	adds	r1, r3, #1
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	791b      	ldrb	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800205c:	68fb      	ldr	r3, [r7, #12]
    }
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
	...

08002068 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	d108      	bne.n	8002090 <_ZN13STM32Hardware5flushEv+0x28>
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <_ZN13STM32Hardware5flushEv+0xe4>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f083 0301 	eor.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <_ZN13STM32Hardware5flushEv+0x28>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <_ZN13STM32Hardware5flushEv+0x2a>
 8002090:	2300      	movs	r3, #0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d055      	beq.n	8002142 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <_ZN13STM32Hardware5flushEv+0xe4>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d047      	beq.n	800213c <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020bc:	429a      	cmp	r2, r3
 80020be:	d217      	bcs.n	80020f0 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	89fa      	ldrh	r2, [r7, #14]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f004 ff5b 	bl	8006fa4 <HAL_UART_Transmit_DMA>
 80020ee:	e01f      	b.n	8002130 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80020fc:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002108:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	89fa      	ldrh	r2, [r7, #14]
 8002112:	4619      	mov	r1, r3
 8002114:	f004 ff46 	bl	8006fa4 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002128:	b29b      	uxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	f004 ff3a 	bl	8006fa4 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <_ZN13STM32Hardware5flushEv+0xe4>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
      }
    }
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000210 	.word	0x20000210

08002150 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
      int n = length;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002166:	bfa8      	it	ge
 8002168:	f44f 7300 	movge.w	r3, #512	; 0x200
 800216c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002174:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4293      	cmp	r3, r2
 800217c:	bf28      	it	cs
 800217e:	4613      	movcs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002188:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	4618      	mov	r0, r3
 8002196:	f006 f8ff 	bl	8008398 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4413      	add	r3, r2
 80021a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d00b      	beq.n	80021ce <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	18d1      	adds	r1, r2, r3
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	f006 f8e5 	bl	8008398 <memcpy>
      }

      flush();
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7ff ff4a 	bl	8002068 <_ZN13STM32Hardware5flushEv>
    }
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	f002 fa10 	bl	8004608 <HAL_GetTick>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f842 	bl	8001288 <_ZN3ros3MsgC1Ev>
 8002204:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	601a      	str	r2, [r3, #0]
      x(0),
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	0800883c 	.word	0x0800883c

08002244 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002244:	b480      	push	{r7}
 8002246:	b08b      	sub	sp, #44	; 0x2c
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002258:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800225c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002262:	6838      	ldr	r0, [r7, #0]
 8002264:	4401      	add	r1, r0
 8002266:	b2d3      	uxtb	r3, r2
 8002268:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800226a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	0a02      	lsrs	r2, r0, #8
 8002278:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800227c:	0a0b      	lsrs	r3, r1, #8
 800227e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002280:	3101      	adds	r1, #1
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	4401      	add	r1, r0
 8002286:	b2d3      	uxtb	r3, r2
 8002288:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800228a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	0c02      	lsrs	r2, r0, #16
 8002298:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800229c:	0c0b      	lsrs	r3, r1, #16
 800229e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a0:	3102      	adds	r1, #2
 80022a2:	6838      	ldr	r0, [r7, #0]
 80022a4:	4401      	add	r1, r0
 80022a6:	b2d3      	uxtb	r3, r2
 80022a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80022aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	0e02      	lsrs	r2, r0, #24
 80022b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022bc:	0e0b      	lsrs	r3, r1, #24
 80022be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c0:	3103      	adds	r1, #3
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	4401      	add	r1, r0
 80022c6:	b2d3      	uxtb	r3, r2
 80022c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80022ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	000a      	movs	r2, r1
 80022d8:	2300      	movs	r3, #0
 80022da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022dc:	3104      	adds	r1, #4
 80022de:	6838      	ldr	r0, [r7, #0]
 80022e0:	4401      	add	r1, r0
 80022e2:	b2d3      	uxtb	r3, r2
 80022e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80022e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	0a0a      	lsrs	r2, r1, #8
 80022f4:	2300      	movs	r3, #0
 80022f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f8:	3105      	adds	r1, #5
 80022fa:	6838      	ldr	r0, [r7, #0]
 80022fc:	4401      	add	r1, r0
 80022fe:	b2d3      	uxtb	r3, r2
 8002300:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002302:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	0c0a      	lsrs	r2, r1, #16
 8002310:	2300      	movs	r3, #0
 8002312:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002314:	3106      	adds	r1, #6
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	4401      	add	r1, r0
 800231a:	b2d3      	uxtb	r3, r2
 800231c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800231e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	0e0a      	lsrs	r2, r1, #24
 800232c:	2300      	movs	r3, #0
 800232e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002330:	3107      	adds	r1, #7
 8002332:	6838      	ldr	r0, [r7, #0]
 8002334:	4401      	add	r1, r0
 8002336:	b2d3      	uxtb	r3, r2
 8002338:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	3308      	adds	r3, #8
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002346:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800234a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800234e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002350:	6838      	ldr	r0, [r7, #0]
 8002352:	4401      	add	r1, r0
 8002354:	b2d3      	uxtb	r3, r2
 8002356:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002358:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	0a02      	lsrs	r2, r0, #8
 8002366:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800236a:	0a0b      	lsrs	r3, r1, #8
 800236c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236e:	3101      	adds	r1, #1
 8002370:	6838      	ldr	r0, [r7, #0]
 8002372:	4401      	add	r1, r0
 8002374:	b2d3      	uxtb	r3, r2
 8002376:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002378:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	0c02      	lsrs	r2, r0, #16
 8002386:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800238a:	0c0b      	lsrs	r3, r1, #16
 800238c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238e:	3102      	adds	r1, #2
 8002390:	6838      	ldr	r0, [r7, #0]
 8002392:	4401      	add	r1, r0
 8002394:	b2d3      	uxtb	r3, r2
 8002396:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002398:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	0e02      	lsrs	r2, r0, #24
 80023a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023aa:	0e0b      	lsrs	r3, r1, #24
 80023ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ae:	3103      	adds	r1, #3
 80023b0:	6838      	ldr	r0, [r7, #0]
 80023b2:	4401      	add	r1, r0
 80023b4:	b2d3      	uxtb	r3, r2
 80023b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80023b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	000a      	movs	r2, r1
 80023c6:	2300      	movs	r3, #0
 80023c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ca:	3104      	adds	r1, #4
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	4401      	add	r1, r0
 80023d0:	b2d3      	uxtb	r3, r2
 80023d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80023d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	0a0a      	lsrs	r2, r1, #8
 80023e2:	2300      	movs	r3, #0
 80023e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e6:	3105      	adds	r1, #5
 80023e8:	6838      	ldr	r0, [r7, #0]
 80023ea:	4401      	add	r1, r0
 80023ec:	b2d3      	uxtb	r3, r2
 80023ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80023f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	0c0a      	lsrs	r2, r1, #16
 80023fe:	2300      	movs	r3, #0
 8002400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002402:	3106      	adds	r1, #6
 8002404:	6838      	ldr	r0, [r7, #0]
 8002406:	4401      	add	r1, r0
 8002408:	b2d3      	uxtb	r3, r2
 800240a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800240c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	0e0a      	lsrs	r2, r1, #24
 800241a:	2300      	movs	r3, #0
 800241c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241e:	3107      	adds	r1, #7
 8002420:	6838      	ldr	r0, [r7, #0]
 8002422:	4401      	add	r1, r0
 8002424:	b2d3      	uxtb	r3, r2
 8002426:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	3308      	adds	r3, #8
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002434:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800243c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	4401      	add	r1, r0
 8002442:	b2d3      	uxtb	r3, r2
 8002444:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002446:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	0a02      	lsrs	r2, r0, #8
 8002454:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002458:	0a0b      	lsrs	r3, r1, #8
 800245a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800245c:	3101      	adds	r1, #1
 800245e:	6838      	ldr	r0, [r7, #0]
 8002460:	4401      	add	r1, r0
 8002462:	b2d3      	uxtb	r3, r2
 8002464:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	0c02      	lsrs	r2, r0, #16
 8002474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002478:	0c0b      	lsrs	r3, r1, #16
 800247a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247c:	3102      	adds	r1, #2
 800247e:	6838      	ldr	r0, [r7, #0]
 8002480:	4401      	add	r1, r0
 8002482:	b2d3      	uxtb	r3, r2
 8002484:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002486:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	0e02      	lsrs	r2, r0, #24
 8002494:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002498:	0e0b      	lsrs	r3, r1, #24
 800249a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249c:	3103      	adds	r1, #3
 800249e:	6838      	ldr	r0, [r7, #0]
 80024a0:	4401      	add	r1, r0
 80024a2:	b2d3      	uxtb	r3, r2
 80024a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80024a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	000a      	movs	r2, r1
 80024b4:	2300      	movs	r3, #0
 80024b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b8:	3104      	adds	r1, #4
 80024ba:	6838      	ldr	r0, [r7, #0]
 80024bc:	4401      	add	r1, r0
 80024be:	b2d3      	uxtb	r3, r2
 80024c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80024c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	0a0a      	lsrs	r2, r1, #8
 80024d0:	2300      	movs	r3, #0
 80024d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d4:	3105      	adds	r1, #5
 80024d6:	6838      	ldr	r0, [r7, #0]
 80024d8:	4401      	add	r1, r0
 80024da:	b2d3      	uxtb	r3, r2
 80024dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80024de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	0c0a      	lsrs	r2, r1, #16
 80024ec:	2300      	movs	r3, #0
 80024ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f0:	3106      	adds	r1, #6
 80024f2:	6838      	ldr	r0, [r7, #0]
 80024f4:	4401      	add	r1, r0
 80024f6:	b2d3      	uxtb	r3, r2
 80024f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80024fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	0e0a      	lsrs	r2, r1, #24
 8002508:	2300      	movs	r3, #0
 800250a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800250c:	3107      	adds	r1, #7
 800250e:	6838      	ldr	r0, [r7, #0]
 8002510:	4401      	add	r1, r0
 8002512:	b2d3      	uxtb	r3, r2
 8002514:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	3308      	adds	r3, #8
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800251e:	4618      	mov	r0, r3
 8002520:	372c      	adds	r7, #44	; 0x2c
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800252a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800252e:	b0eb      	sub	sp, #428	; 0x1ac
 8002530:	af00      	add	r7, sp, #0
 8002532:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002536:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800254c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002550:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002554:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002558:	4413      	add	r3, r2
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2200      	movs	r2, #0
 8002560:	461c      	mov	r4, r3
 8002562:	4615      	mov	r5, r2
 8002564:	ea40 0804 	orr.w	r8, r0, r4
 8002568:	ea41 0905 	orr.w	r9, r1, r5
 800256c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002570:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002574:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800257e:	4413      	add	r3, r2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2200      	movs	r2, #0
 8002586:	469a      	mov	sl, r3
 8002588:	4693      	mov	fp, r2
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002596:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800259a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800259e:	ea40 0402 	orr.w	r4, r0, r2
 80025a2:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80025a6:	430b      	orrs	r3, r1
 80025a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025ac:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80025b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025b4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80025b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025bc:	1c9a      	adds	r2, r3, #2
 80025be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025c2:	4413      	add	r3, r2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80025ce:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80025de:	464c      	mov	r4, r9
 80025e0:	0423      	lsls	r3, r4, #16
 80025e2:	4644      	mov	r4, r8
 80025e4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80025e8:	4644      	mov	r4, r8
 80025ea:	0422      	lsls	r2, r4, #16
 80025ec:	ea40 0402 	orr.w	r4, r0, r2
 80025f0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80025f4:	430b      	orrs	r3, r1
 80025f6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80025fa:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80025fe:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002602:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002606:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800260a:	1cda      	adds	r2, r3, #3
 800260c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002610:	4413      	add	r3, r2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2200      	movs	r2, #0
 8002618:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800261c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002620:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002624:	4623      	mov	r3, r4
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800262c:	4623      	mov	r3, r4
 800262e:	061b      	lsls	r3, r3, #24
 8002630:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002634:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002638:	4623      	mov	r3, r4
 800263a:	4303      	orrs	r3, r0
 800263c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002640:	462b      	mov	r3, r5
 8002642:	430b      	orrs	r3, r1
 8002644:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002648:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800264c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002650:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002654:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002658:	1d1a      	adds	r2, r3, #4
 800265a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800265e:	4413      	add	r3, r2
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2200      	movs	r2, #0
 8002666:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800266a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800267a:	0023      	movs	r3, r4
 800267c:	2200      	movs	r2, #0
 800267e:	ea40 0402 	orr.w	r4, r0, r2
 8002682:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002686:	430b      	orrs	r3, r1
 8002688:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800268c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002690:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002694:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002698:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800269c:	1d5a      	adds	r2, r3, #5
 800269e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80026ae:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80026be:	0223      	lsls	r3, r4, #8
 80026c0:	2200      	movs	r2, #0
 80026c2:	ea40 0402 	orr.w	r4, r0, r2
 80026c6:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80026ca:	430b      	orrs	r3, r1
 80026cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80026d0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80026d4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026e0:	1d9a      	adds	r2, r3, #6
 80026e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80026f2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002702:	0423      	lsls	r3, r4, #16
 8002704:	2200      	movs	r2, #0
 8002706:	ea40 0402 	orr.w	r4, r0, r2
 800270a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800270e:	430b      	orrs	r3, r1
 8002710:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002714:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002718:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800271c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002720:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002724:	1dda      	adds	r2, r3, #7
 8002726:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2200      	movs	r2, #0
 8002732:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002736:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002746:	0623      	lsls	r3, r4, #24
 8002748:	2200      	movs	r2, #0
 800274a:	ea40 0402 	orr.w	r4, r0, r2
 800274e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002752:	430b      	orrs	r3, r1
 8002754:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002758:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800275c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002760:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002764:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002768:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800276c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002770:	3308      	adds	r3, #8
 8002772:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002782:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002786:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800278a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800278e:	4413      	add	r3, r2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2200      	movs	r2, #0
 8002796:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800279a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800279e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80027a2:	4623      	mov	r3, r4
 80027a4:	4303      	orrs	r3, r0
 80027a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027aa:	462b      	mov	r3, r5
 80027ac:	430b      	orrs	r3, r1
 80027ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027b2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80027b6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027ba:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027c8:	4413      	add	r3, r2
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027d4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80027e4:	464c      	mov	r4, r9
 80027e6:	0223      	lsls	r3, r4, #8
 80027e8:	4644      	mov	r4, r8
 80027ea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80027ee:	4644      	mov	r4, r8
 80027f0:	0222      	lsls	r2, r4, #8
 80027f2:	ea40 0402 	orr.w	r4, r0, r2
 80027f6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80027fa:	430b      	orrs	r3, r1
 80027fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002800:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002804:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002808:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800280c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002810:	1c9a      	adds	r2, r3, #2
 8002812:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2200      	movs	r2, #0
 800281e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002822:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002832:	464c      	mov	r4, r9
 8002834:	0423      	lsls	r3, r4, #16
 8002836:	4644      	mov	r4, r8
 8002838:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800283c:	4644      	mov	r4, r8
 800283e:	0422      	lsls	r2, r4, #16
 8002840:	ea40 0402 	orr.w	r4, r0, r2
 8002844:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002848:	430b      	orrs	r3, r1
 800284a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800284e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002852:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002856:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800285a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800285e:	1cda      	adds	r2, r3, #3
 8002860:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002864:	4413      	add	r3, r2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002870:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002874:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002878:	4623      	mov	r3, r4
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002880:	4623      	mov	r3, r4
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002888:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800288c:	4623      	mov	r3, r4
 800288e:	4303      	orrs	r3, r0
 8002890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002894:	462b      	mov	r3, r5
 8002896:	430b      	orrs	r3, r1
 8002898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800289c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80028a0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028a4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80028a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028ac:	1d1a      	adds	r2, r3, #4
 80028ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028be:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80028ce:	0023      	movs	r3, r4
 80028d0:	2200      	movs	r2, #0
 80028d2:	ea40 0402 	orr.w	r4, r0, r2
 80028d6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80028da:	430b      	orrs	r3, r1
 80028dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80028e0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80028e4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028e8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80028ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028f0:	1d5a      	adds	r2, r3, #5
 80028f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002902:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002912:	0223      	lsls	r3, r4, #8
 8002914:	2200      	movs	r2, #0
 8002916:	ea40 0402 	orr.w	r4, r0, r2
 800291a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800291e:	430b      	orrs	r3, r1
 8002920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002924:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002928:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800292c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002930:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002934:	1d9a      	adds	r2, r3, #6
 8002936:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800293a:	4413      	add	r3, r2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2200      	movs	r2, #0
 8002942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002946:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002956:	0423      	lsls	r3, r4, #16
 8002958:	2200      	movs	r2, #0
 800295a:	ea40 0402 	orr.w	r4, r0, r2
 800295e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002962:	430b      	orrs	r3, r1
 8002964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002968:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800296c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002970:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002974:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002978:	1dda      	adds	r2, r3, #7
 800297a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800298a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800299a:	0623      	lsls	r3, r4, #24
 800299c:	2200      	movs	r2, #0
 800299e:	ea40 0402 	orr.w	r4, r0, r2
 80029a2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80029a6:	430b      	orrs	r3, r1
 80029a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029ac:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80029b0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80029b4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029bc:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80029c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029c4:	3308      	adds	r3, #8
 80029c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029d6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029da:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80029de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029ee:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80029f2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80029f6:	4623      	mov	r3, r4
 80029f8:	4303      	orrs	r3, r0
 80029fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80029fc:	462b      	mov	r3, r5
 80029fe:	430b      	orrs	r3, r1
 8002a00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a02:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002a06:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2200      	movs	r2, #0
 8002a20:	673b      	str	r3, [r7, #112]	; 0x70
 8002a22:	677a      	str	r2, [r7, #116]	; 0x74
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a30:	464c      	mov	r4, r9
 8002a32:	0223      	lsls	r3, r4, #8
 8002a34:	4644      	mov	r4, r8
 8002a36:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a3a:	4644      	mov	r4, r8
 8002a3c:	0222      	lsls	r2, r4, #8
 8002a3e:	ea40 0402 	orr.w	r4, r0, r2
 8002a42:	66bc      	str	r4, [r7, #104]	; 0x68
 8002a44:	430b      	orrs	r3, r1
 8002a46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a48:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002a4c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a50:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a58:	1c9a      	adds	r2, r3, #2
 8002a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	663b      	str	r3, [r7, #96]	; 0x60
 8002a68:	667a      	str	r2, [r7, #100]	; 0x64
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a76:	464c      	mov	r4, r9
 8002a78:	0423      	lsls	r3, r4, #16
 8002a7a:	4644      	mov	r4, r8
 8002a7c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a80:	4644      	mov	r4, r8
 8002a82:	0422      	lsls	r2, r4, #16
 8002a84:	ea40 0402 	orr.w	r4, r0, r2
 8002a88:	65bc      	str	r4, [r7, #88]	; 0x58
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a8e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002a92:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a96:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a9e:	1cda      	adds	r2, r3, #3
 8002aa0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2200      	movs	r2, #0
 8002aac:	653b      	str	r3, [r7, #80]	; 0x50
 8002aae:	657a      	str	r2, [r7, #84]	; 0x54
 8002ab0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aba:	4623      	mov	r3, r4
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	4303      	orrs	r3, r0
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8002aca:	462b      	mov	r3, r5
 8002acc:	430b      	orrs	r3, r1
 8002ace:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ad4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ad8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae0:	1d1a      	adds	r2, r3, #4
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002afc:	0023      	movs	r3, r4
 8002afe:	2200      	movs	r2, #0
 8002b00:	ea40 0402 	orr.w	r4, r0, r2
 8002b04:	633c      	str	r4, [r7, #48]	; 0x30
 8002b06:	430b      	orrs	r3, r1
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002b0e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b12:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b1a:	1d5a      	adds	r2, r3, #5
 8002b1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b20:	4413      	add	r3, r2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2200      	movs	r2, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002b36:	0223      	lsls	r3, r4, #8
 8002b38:	2200      	movs	r2, #0
 8002b3a:	ea40 0402 	orr.w	r4, r0, r2
 8002b3e:	623c      	str	r4, [r7, #32]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
 8002b44:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b48:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b4c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b54:	3306      	adds	r3, #6
 8002b56:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002b5a:	4413      	add	r3, r2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2200      	movs	r2, #0
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	61fa      	str	r2, [r7, #28]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	69bc      	ldr	r4, [r7, #24]
 8002b70:	0423      	lsls	r3, r4, #16
 8002b72:	2200      	movs	r2, #0
 8002b74:	ea40 0402 	orr.w	r4, r0, r2
 8002b78:	613c      	str	r4, [r7, #16]
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b82:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b86:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b8e:	3307      	adds	r3, #7
 8002b90:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002b94:	4413      	add	r3, r2
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	60fa      	str	r2, [r7, #12]
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	68bc      	ldr	r4, [r7, #8]
 8002baa:	0623      	lsls	r3, r4, #24
 8002bac:	2200      	movs	r2, #0
 8002bae:	ea40 0402 	orr.w	r4, r0, r2
 8002bb2:	603c      	str	r4, [r7, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002bbc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002bc0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002bc4:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002bc8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002bcc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002bd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002be6:	4770      	bx	lr

08002be8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	080086c0 	.word	0x080086c0

08002c04 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	080086d8 	.word	0x080086d8

08002c20 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fb2c 	bl	8001288 <_ZN3ros3MsgC1Ev>
 8002c30:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]
      linear(),
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3308      	adds	r3, #8
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fada 	bl	80021f4 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3328      	adds	r3, #40	; 0x28
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fad5 	bl	80021f4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	08008824 	.word	0x08008824

08002c58 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f103 0008 	add.w	r0, r3, #8
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7ff fae6 	bl	8002244 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7ff fad9 	bl	8002244 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
    }
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f103 0008 	add.w	r0, r3, #8
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7ff fc33 	bl	800252a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7ff fc26 	bl	800252a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
     return offset;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
    }
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	080086fc 	.word	0x080086fc

08002d0c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	08008710 	.word	0x08008710

08002d28 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
      data(0)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe faa8 	bl	8001288 <_ZN3ros3MsgC1Ev>
 8002d38:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	809a      	strh	r2, [r3, #4]
    {
    }
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	0800880c 	.word	0x0800880c

08002d54 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d68:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002d6a:	8939      	ldrh	r1, [r7, #8]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	b2ca      	uxtb	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002d76:	893b      	ldrh	r3, [r7, #8]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	b299      	uxth	r1, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	b2ca      	uxtb	r2, r1
 8002d86:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    }
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002dae:	893a      	ldrh	r2, [r7, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6839      	ldr	r1, [r7, #0]
 8002db4:	440b      	add	r3, r1
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dc0:	893b      	ldrh	r3, [r7, #8]
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	440b      	add	r3, r1
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002dda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3302      	adds	r3, #2
 8002de6:	60fb      	str	r3, [r7, #12]
     return offset;
 8002de8:	68fb      	ldr	r3, [r7, #12]
    }
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	08008734 	.word	0x08008734

08002e14 <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	08008744 	.word	0x08008744

08002e30 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE>:
float temp = 0.0;
double demand_speed_left;
double demand_speed_right;

void cmd_vel_cb( const geometry_msgs::Twist& twist)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
   demandx = twist.linear.x;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fd fdbf 	bl	80009c4 <__aeabi_d2f>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8002e4a:	6013      	str	r3, [r2, #0]
   demandz = twist.angular.z;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f7fd fdb5 	bl	80009c4 <__aeabi_d2f>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8002e5e:	6013      	str	r3, [r2, #0]
 }
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000240 	.word	0x20000240
 8002e6c:	20000244 	.word	0x20000244

08002e70 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	0800886c 	.word	0x0800886c

08002e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ffe8 	bl	8002e70 <_ZN3ros15NodeHandleBase_C1Ev>
 8002ea0:	4a36      	ldr	r2, [pc, #216]	; (8002f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f876 	bl	8001f9c <_ZN13STM32HardwareC1Ev>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f005 fa26 	bl	800832e <memset>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 fa1d 	bl	800832e <memset>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002efa:	2264      	movs	r2, #100	; 0x64
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f005 fa15 	bl	800832e <memset>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8002f0a:	2264      	movs	r2, #100	; 0x64
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f005 fa0d 	bl	800832e <memset>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fd00 	bl	8001970 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	080087f8 	.word	0x080087f8

08002f80 <_Z10publishPosv>:
std_msgs::Int16 right_wheel_msg;
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );

void publishPos()
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  left_wheel_msg.data = pos_act_left;
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <_Z10publishPosv+0x2c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <_Z10publishPosv+0x30>)
 8002f8c:	809a      	strh	r2, [r3, #4]
  right_wheel_msg.data = pos_act_right;
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <_Z10publishPosv+0x34>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b21a      	sxth	r2, r3
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <_Z10publishPosv+0x38>)
 8002f96:	809a      	strh	r2, [r3, #4]
  left_wheel_pub.publish(&left_wheel_msg);
 8002f98:	4905      	ldr	r1, [pc, #20]	; (8002fb0 <_Z10publishPosv+0x30>)
 8002f9a:	4808      	ldr	r0, [pc, #32]	; (8002fbc <_Z10publishPosv+0x3c>)
 8002f9c:	f7fe ffcb 	bl	8001f36 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  right_wheel_pub.publish(&right_wheel_msg);
 8002fa0:	4905      	ldr	r1, [pc, #20]	; (8002fb8 <_Z10publishPosv+0x38>)
 8002fa2:	4807      	ldr	r0, [pc, #28]	; (8002fc0 <_Z10publishPosv+0x40>)
 8002fa4:	f7fe ffc7 	bl	8001f36 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000228 	.word	0x20000228
 8002fb0:	20000b9c 	.word	0x20000b9c
 8002fb4:	2000022c 	.word	0x2000022c
 8002fb8:	20000bb8 	.word	0x20000bb8
 8002fbc:	20000ba4 	.word	0x20000ba4
 8002fc0:	20000bc0 	.word	0x20000bc0

08002fc4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == LeftWheelEncoderChannelA_Pin)
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	d165      	bne.n	80030a0 <HAL_GPIO_EXTI_Callback+0xdc>
	{
		if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelA_GPIO_Port, LeftWheelEncoderChannelA_Pin) == 1)
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	4867      	ldr	r0, [pc, #412]	; (8003174 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002fd8:	f002 f9f6 	bl	80053c8 <HAL_GPIO_ReadPin>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d026      	beq.n	800303a <HAL_GPIO_EXTI_Callback+0x76>
		{
			if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 1) leftenc++;
 8002fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ff0:	4860      	ldr	r0, [pc, #384]	; (8003174 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002ff2:	f002 f9e9 	bl	80053c8 <HAL_GPIO_ReadPin>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_GPIO_EXTI_Callback+0x4e>
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e0a8      	b.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 0) leftenc--;
 8003012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003016:	4857      	ldr	r0, [pc, #348]	; (8003174 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8003018:	f002 f9d6 	bl	80053c8 <HAL_GPIO_ReadPin>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 809b 	beq.w	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
 800302e:	4b52      	ldr	r3, [pc, #328]	; (8003178 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3b01      	subs	r3, #1
 8003034:	4a50      	ldr	r2, [pc, #320]	; (8003178 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e094      	b.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
		else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelA_GPIO_Port, LeftWheelEncoderChannelA_Pin) == 0)
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	484d      	ldr	r0, [pc, #308]	; (8003174 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800303e:	f002 f9c3 	bl	80053c8 <HAL_GPIO_ReadPin>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8088 	beq.w	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
		{
			if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 0) leftenc++;
 8003054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003058:	4846      	ldr	r0, [pc, #280]	; (8003174 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800305a:	f002 f9b5 	bl	80053c8 <HAL_GPIO_ReadPin>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_GPIO_EXTI_Callback+0xb6>
 800306e:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	4a40      	ldr	r2, [pc, #256]	; (8003178 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e074      	b.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 1) leftenc--;
 800307a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800307e:	483d      	ldr	r0, [pc, #244]	; (8003174 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8003080:	f002 f9a2 	bl	80053c8 <HAL_GPIO_ReadPin>
 8003084:	4603      	mov	r3, r0
 8003086:	2b01      	cmp	r3, #1
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d067      	beq.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
 8003094:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	4a37      	ldr	r2, [pc, #220]	; (8003178 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e061      	b.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
	}
	else if(GPIO_PIN == RightWheelEncoderChannelA_Pin)
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d15e      	bne.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
	{
		if(HAL_GPIO_ReadPin(RightWheelEncoderChannelA_GPIO_Port, RightWheelEncoderChannelA_Pin) == 1)
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	4834      	ldr	r0, [pc, #208]	; (800317c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80030aa:	f002 f98d 	bl	80053c8 <HAL_GPIO_ReadPin>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d023      	beq.n	8003106 <HAL_GPIO_EXTI_Callback+0x142>
		{
			if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 0) rightenc++;
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	482e      	ldr	r0, [pc, #184]	; (800317c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80030c2:	f002 f981 	bl	80053c8 <HAL_GPIO_ReadPin>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_GPIO_EXTI_Callback+0x11e>
 80030d6:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3301      	adds	r3, #1
 80030dc:	4a28      	ldr	r2, [pc, #160]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e040      	b.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 1) rightenc--;
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	4825      	ldr	r0, [pc, #148]	; (800317c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80030e6:	f002 f96f 	bl	80053c8 <HAL_GPIO_ReadPin>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d034      	beq.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
 80030fa:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3b01      	subs	r3, #1
 8003100:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	e02e      	b.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
		else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelA_GPIO_Port, RightWheelEncoderChannelA_Pin) == 0)
 8003106:	2140      	movs	r1, #64	; 0x40
 8003108:	481c      	ldr	r0, [pc, #112]	; (800317c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800310a:	f002 f95d 	bl	80053c8 <HAL_GPIO_ReadPin>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d022      	beq.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
		{
			if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 1) rightenc++;
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	4816      	ldr	r0, [pc, #88]	; (800317c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8003122:	f002 f951 	bl	80053c8 <HAL_GPIO_ReadPin>
 8003126:	4603      	mov	r3, r0
 8003128:	2b01      	cmp	r3, #1
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0x17e>
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	4a10      	ldr	r2, [pc, #64]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e010      	b.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 0) rightenc--;
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8003146:	f002 f93f 	bl	80053c8 <HAL_GPIO_ReadPin>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <HAL_GPIO_EXTI_Callback+0x1a0>
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3b01      	subs	r3, #1
 8003160:	4a07      	ldr	r2, [pc, #28]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003162:	6013      	str	r3, [r2, #0]
		}
	}
	flag = 1;
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	20000218 	.word	0x20000218
 800317c:	40020400 	.word	0x40020400
 8003180:	20000220 	.word	0x20000220
 8003184:	20000214 	.word	0x20000214

08003188 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

	rpm_right = (int)((rightenc - rightenco) * 0.6);
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f96e 	bl	800047c <__aeabi_i2d>
 80031a0:	a343      	add	r3, pc, #268	; (adr r3, 80032b0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd f9d3 	bl	8000550 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7fd fbdf 	bl	8000974 <__aeabi_d2iz>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4a43      	ldr	r2, [pc, #268]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80031ba:	6013      	str	r3, [r2, #0]
	rpm_left = (int)((leftenc - leftenco) * 0.6);
 80031bc:	4b43      	ldr	r3, [pc, #268]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x144>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f958 	bl	800047c <__aeabi_i2d>
 80031cc:	a338      	add	r3, pc, #224	; (adr r3, 80032b0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f7fd f9bd 	bl	8000550 <__aeabi_dmul>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	f7fd fbc9 	bl	8000974 <__aeabi_d2iz>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a3b      	ldr	r2, [pc, #236]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80031e6:	6013      	str	r3, [r2, #0]
	rightvel = (int)((rpm_right * 6.28 * 7.5)/(60));
 80031e8:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f945 	bl	800047c <__aeabi_i2d>
 80031f2:	a331      	add	r3, pc, #196	; (adr r3, 80032b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f7fd f9aa 	bl	8000550 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800320a:	f7fd f9a1 	bl	8000550 <__aeabi_dmul>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x154>)
 800321c:	f7fd fac2 	bl	80007a4 <__aeabi_ddiv>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fba4 	bl	8000974 <__aeabi_d2iz>
 800322c:	4603      	mov	r3, r0
 800322e:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003230:	6013      	str	r3, [r2, #0]
	leftvel = (int)((rpm_left * 6.28 * 7.5)/(60));
 8003232:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd f920 	bl	800047c <__aeabi_i2d>
 800323c:	a31e      	add	r3, pc, #120	; (adr r3, 80032b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd f985 	bl	8000550 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003254:	f7fd f97c 	bl	8000550 <__aeabi_dmul>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003266:	f7fd fa9d 	bl	80007a4 <__aeabi_ddiv>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f7fd fb7f 	bl	8000974 <__aeabi_d2iz>
 8003276:	4603      	mov	r3, r0
 8003278:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800327a:	6013      	str	r3, [r2, #0]
	rightenco = rightenc;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003282:	6013      	str	r3, [r2, #0]
	leftenco = leftenc;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800328a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GreenLED_GPIO_Port, GreenLED_Pin);
 800328c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003290:	4815      	ldr	r0, [pc, #84]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003292:	f002 f8ca 	bl	800542a <HAL_GPIO_TogglePin>
	pos_act_left = leftenc;
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a14      	ldr	r2, [pc, #80]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 800329c:	6013      	str	r3, [r2, #0]
	pos_act_right = rightenc;
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80032a4:	6013      	str	r3, [r2, #0]

}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	33333333 	.word	0x33333333
 80032b4:	3fe33333 	.word	0x3fe33333
 80032b8:	51eb851f 	.word	0x51eb851f
 80032bc:	40191eb8 	.word	0x40191eb8
 80032c0:	20000220 	.word	0x20000220
 80032c4:	20000224 	.word	0x20000224
 80032c8:	20000238 	.word	0x20000238
 80032cc:	20000218 	.word	0x20000218
 80032d0:	2000021c 	.word	0x2000021c
 80032d4:	2000023c 	.word	0x2000023c
 80032d8:	401e0000 	.word	0x401e0000
 80032dc:	404e0000 	.word	0x404e0000
 80032e0:	20000230 	.word	0x20000230
 80032e4:	20000234 	.word	0x20000234
 80032e8:	40020c00 	.word	0x40020c00
 80032ec:	20000228 	.word	0x20000228
 80032f0:	2000022c 	.word	0x2000022c

080032f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80032fc:	4805      	ldr	r0, [pc, #20]	; (8003314 <HAL_UART_TxCpltCallback+0x20>)
 80032fe:	f000 f977 	bl	80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003302:	4603      	mov	r3, r0
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe feaf 	bl	8002068 <_ZN13STM32Hardware5flushEv>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000260 	.word	0x20000260

08003318 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8003320:	4805      	ldr	r0, [pc, #20]	; (8003338 <HAL_UART_RxCpltCallback+0x20>)
 8003322:	f000 f965 	bl	80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003326:	4603      	mov	r3, r0
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fe5e 	bl	8001fea <_ZN13STM32Hardware10reset_rbufEv>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000260 	.word	0x20000260

0800333c <setup>:

void setup()
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	nh.initNode();
 8003340:	4808      	ldr	r0, [pc, #32]	; (8003364 <setup+0x28>)
 8003342:	f000 f961 	bl	8003608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_wheel_pub);
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <setup+0x2c>)
 8003348:	4806      	ldr	r0, [pc, #24]	; (8003364 <setup+0x28>)
 800334a:	f000 f97a 	bl	8003642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_wheel_pub);
 800334e:	4907      	ldr	r1, [pc, #28]	; (800336c <setup+0x30>)
 8003350:	4804      	ldr	r0, [pc, #16]	; (8003364 <setup+0x28>)
 8003352:	f000 f976 	bl	8003642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub);
 8003356:	4906      	ldr	r1, [pc, #24]	; (8003370 <setup+0x34>)
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <setup+0x28>)
 800335a:	f000 f9a2 	bl	80036a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000260 	.word	0x20000260
 8003368:	20000ba4 	.word	0x20000ba4
 800336c:	20000bc0 	.word	0x20000bc0
 8003370:	20000bd8 	.word	0x20000bd8

08003374 <loop>:

void loop()
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
	publishPos();
 8003378:	f7ff fe02 	bl	8002f80 <_Z10publishPosv>
	nh.spinOnce();
 800337c:	4857      	ldr	r0, [pc, #348]	; (80034dc <loop+0x168>)
 800337e:	f000 f9bb 	bl	80036f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

	demand_speed_left = demandx - (demandz * temp);
 8003382:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <loop+0x16c>)
 8003384:	ed93 7a00 	vldr	s14, [r3]
 8003388:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <loop+0x170>)
 800338a:	edd3 6a00 	vldr	s13, [r3]
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <loop+0x174>)
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800339c:	ee17 0a90 	vmov	r0, s15
 80033a0:	f7fd f87e 	bl	80004a0 <__aeabi_f2d>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4950      	ldr	r1, [pc, #320]	; (80034ec <loop+0x178>)
 80033aa:	e9c1 2300 	strd	r2, r3, [r1]
	demand_speed_right = demandx + (demandz * temp);
 80033ae:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <loop+0x170>)
 80033b0:	ed93 7a00 	vldr	s14, [r3]
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <loop+0x174>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033be:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <loop+0x16c>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c8:	ee17 0a90 	vmov	r0, s15
 80033cc:	f7fd f868 	bl	80004a0 <__aeabi_f2d>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4946      	ldr	r1, [pc, #280]	; (80034f0 <loop+0x17c>)
 80033d6:	e9c1 2300 	strd	r2, r3, [r1]


	if(demandx > 0)
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <loop+0x16c>)
 80033dc:	edd3 7a00 	vldr	s15, [r3]
 80033e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	dd25      	ble.n	8003436 <loop+0xc2>
	{
		HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_SET);
 80033ea:	2201      	movs	r2, #1
 80033ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033f0:	4840      	ldr	r0, [pc, #256]	; (80034f4 <loop+0x180>)
 80033f2:	f002 f801 	bl	80053f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_RESET);
 80033f6:	2200      	movs	r2, #0
 80033f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033fc:	483d      	ldr	r0, [pc, #244]	; (80034f4 <loop+0x180>)
 80033fe:	f001 fffb 	bl	80053f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_RESET);
 8003402:	2200      	movs	r2, #0
 8003404:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003408:	483a      	ldr	r0, [pc, #232]	; (80034f4 <loop+0x180>)
 800340a:	f001 fff5 	bl	80053f8 <HAL_GPIO_WritePin>
		TIM3->CCR1 = 50;
 800340e:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <loop+0x184>)
 8003410:	2232      	movs	r2, #50	; 0x32
 8003412:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8003414:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003418:	f001 f902 	bl	8004620 <HAL_Delay>
		TIM3->CCR1 = 100;
 800341c:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <loop+0x184>)
 800341e:	2264      	movs	r2, #100	; 0x64
 8003420:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <loop+0x184>)
 8003424:	2200      	movs	r2, #0
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 100;
 8003428:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <loop+0x184>)
 800342a:	2264      	movs	r2, #100	; 0x64
 800342c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 800342e:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <loop+0x184>)
 8003430:	2200      	movs	r2, #0
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
 8003434:	e04c      	b.n	80034d0 <loop+0x15c>
	}

	else if(demandx == 0)
 8003436:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <loop+0x16c>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	d11e      	bne.n	8003484 <loop+0x110>
	{
		HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_RESET);
 8003446:	2200      	movs	r2, #0
 8003448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800344c:	4829      	ldr	r0, [pc, #164]	; (80034f4 <loop+0x180>)
 800344e:	f001 ffd3 	bl	80053f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_SET);
 8003452:	2201      	movs	r2, #1
 8003454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003458:	4826      	ldr	r0, [pc, #152]	; (80034f4 <loop+0x180>)
 800345a:	f001 ffcd 	bl	80053f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_RESET);
 800345e:	2200      	movs	r2, #0
 8003460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003464:	4823      	ldr	r0, [pc, #140]	; (80034f4 <loop+0x180>)
 8003466:	f001 ffc7 	bl	80053f8 <HAL_GPIO_WritePin>
		TIM3->CCR1 = 0;
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <loop+0x184>)
 800346c:	2200      	movs	r2, #0
 800346e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <loop+0x184>)
 8003472:	2200      	movs	r2, #0
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <loop+0x184>)
 8003478:	2200      	movs	r2, #0
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <loop+0x184>)
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
 8003482:	e025      	b.n	80034d0 <loop+0x15c>
	}

	else if(demandx < 0)
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <loop+0x16c>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	d51d      	bpl.n	80034d0 <loop+0x15c>
	{
		HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_RESET);
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800349a:	4816      	ldr	r0, [pc, #88]	; (80034f4 <loop+0x180>)
 800349c:	f001 ffac 	bl	80053f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_RESET);
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034a6:	4813      	ldr	r0, [pc, #76]	; (80034f4 <loop+0x180>)
 80034a8:	f001 ffa6 	bl	80053f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_SET);
 80034ac:	2201      	movs	r2, #1
 80034ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034b2:	4810      	ldr	r0, [pc, #64]	; (80034f4 <loop+0x180>)
 80034b4:	f001 ffa0 	bl	80053f8 <HAL_GPIO_WritePin>
		TIM3->CCR1 = 0;
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <loop+0x184>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR2 = 100;
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <loop+0x184>)
 80034c0:	2264      	movs	r2, #100	; 0x64
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <loop+0x184>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 100;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <loop+0x184>)
 80034cc:	2264      	movs	r2, #100	; 0x64
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
	}
	HAL_Delay(150);
 80034d0:	2096      	movs	r0, #150	; 0x96
 80034d2:	f001 f8a5 	bl	8004620 <HAL_Delay>
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000260 	.word	0x20000260
 80034e0:	20000240 	.word	0x20000240
 80034e4:	20000244 	.word	0x20000244
 80034e8:	20000248 	.word	0x20000248
 80034ec:	20000250 	.word	0x20000250
 80034f0:	20000258 	.word	0x20000258
 80034f4:	40020c00 	.word	0x40020c00
 80034f8:	40000400 	.word	0x40000400

080034fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e00c      	b.n	8003526 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	fa22 f103 	lsr.w	r1, r2, r3
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	b2ca      	uxtb	r2, r1
 800351e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d9ef      	bls.n	800350c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	e010      	b.n	8003572 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	440a      	add	r2, r1
 800355a:	7812      	ldrb	r2, [r2, #0]
 800355c:	4611      	mov	r1, r2
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	00d2      	lsls	r2, r2, #3
 8003562:	fa01 f202 	lsl.w	r2, r1, r2
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3301      	adds	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d9eb      	bls.n	8003550 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	08008854 	.word	0x08008854

080035a8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ffe5 	bl	8003588 <_ZN3ros11Subscriber_C1Ev>
 80035be:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3310      	adds	r3, #16
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fb29 	bl	8002c20 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	609a      	str	r2, [r3, #8]
  };
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	080087e0 	.word	0x080087e0

080035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
  }
 80035fc:	4618      	mov	r0, r3
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe fcdd 	bl	8001fd4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e01d      	b.n	800368e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d111      	bne.n	8003688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	60da      	str	r2, [r3, #12]
        return true;
 8003684:	2301      	movs	r3, #1
 8003686:	e006      	b.n	8003696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3301      	adds	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b18      	cmp	r3, #24
 8003692:	ddde      	ble.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8003694:	2300      	movs	r3, #0
  }
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e018      	b.n	80036e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10d      	bne.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	605a      	str	r2, [r3, #4]
        return true;
 80036da:	2301      	movs	r3, #1
 80036dc:	e006      	b.n	80036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3301      	adds	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b18      	cmp	r3, #24
 80036e8:	dde3      	ble.n	80036b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80036ea:	2300      	movs	r3, #0
  }
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fd69 	bl	80021dc <_ZN13STM32Hardware4timeEv>
 800370a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800371a:	4293      	cmp	r3, r2
 800371c:	d903      	bls.n	8003726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d903      	bls.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800374a:	2b00      	cmp	r3, #0
 800374c:	d014      	beq.n	8003778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fd42 	bl	80021dc <_ZN13STM32Hardware4timeEv>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad2      	subs	r2, r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003764:	429a      	cmp	r2, r3
 8003766:	bf8c      	ite	hi
 8003768:	2301      	movhi	r3, #1
 800376a:	2300      	movls	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003772:	f06f 0301 	mvn.w	r3, #1
 8003776:	e194      	b.n	8003aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fc45 	bl	800200c <_ZN13STM32Hardware4readEv>
 8003782:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f2c0 8174 	blt.w	8003a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037a2:	2b07      	cmp	r3, #7
 80037a4:	d11e      	bne.n	80037e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80037ac:	1c59      	adds	r1, r3, #1
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	b2d1      	uxtb	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	460a      	mov	r2, r1
 80037be:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80037c8:	1e5a      	subs	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1b4      	bne.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2208      	movs	r2, #8
 80037de:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80037e2:	e7af      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d128      	bne.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2bff      	cmp	r3, #255	; 0xff
 80037f2:	d10d      	bne.n	8003810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f103 0214 	add.w	r2, r3, #20
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800380e:	e799      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fce1 	bl	80021dc <_ZN13STM32Hardware4timeEv>
 800381a:	4602      	mov	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	bf8c      	ite	hi
 8003828:	2301      	movhi	r3, #1
 800382a:	2300      	movls	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d088      	beq.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800383a:	f06f 0301 	mvn.w	r3, #1
 800383e:	e130      	b.n	8003aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003846:	2b01      	cmp	r3, #1
 8003848:	d118      	bne.n	800387c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2bfe      	cmp	r3, #254	; 0xfe
 800384e:	d107      	bne.n	8003860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800385e:	e771      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800386e:	2b00      	cmp	r3, #0
 8003870:	f47f af68 	bne.w	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f918 	bl	8003aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800387a:	e763      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003882:	2b02      	cmp	r3, #2
 8003884:	d113      	bne.n	80038ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80038ac:	e74a      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d110      	bne.n	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80038d8:	e734      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d116      	bne.n	8003912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80038ea:	425a      	negs	r2, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	bf58      	it	pl
 80038f2:	4253      	negpl	r3, r2
 80038f4:	2bff      	cmp	r3, #255	; 0xff
 80038f6:	d107      	bne.n	8003908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003906:	e71d      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003910:	e718      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003918:	2b05      	cmp	r3, #5
 800391a:	d10f      	bne.n	800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800393a:	e703      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003942:	2b06      	cmp	r3, #6
 8003944:	d117      	bne.n	8003976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2207      	movs	r2, #7
 800395c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f47f aeec 	bne.w	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2208      	movs	r2, #8
 8003970:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003974:	e6e6      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800397c:	2b08      	cmp	r3, #8
 800397e:	f47f aee1 	bne.w	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003990:	425a      	negs	r2, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	bf58      	it	pl
 8003998:	4253      	negpl	r3, r2
 800399a:	2bff      	cmp	r3, #255	; 0xff
 800399c:	f47f aed2 	bne.w	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d110      	bne.n	80039cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f87d 	bl	8003aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f898 	bl	8003ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	e06a      	b.n	8003aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80039d2:	2b0a      	cmp	r3, #10
 80039d4:	d107      	bne.n	80039e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f960 	bl	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80039e4:	e6ae      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d10e      	bne.n	8003a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f7fe f8f5 	bl	8001bee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003a0c:	e69a      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003a14:	2b0b      	cmp	r3, #11
 8003a16:	d104      	bne.n	8003a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003a20:	e690      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003a28:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f43f ae84 	beq.w	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003a42:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003a56:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4798      	blx	r3
    while (true)
 8003a72:	e667      	b.n	8003744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003a74:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00f      	beq.n	8003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d906      	bls.n	8003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f809 	bl	8003aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003aa0:	2300      	movs	r3, #0
  }
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fbf6 	bl	80012a8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f107 020c 	add.w	r2, r7, #12
 8003ac6:	210a      	movs	r1, #10
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
    rt_time = hardware_.time();
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fb83 	bl	80021dc <_ZN13STM32Hardware4timeEv>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003ae6:	b590      	push	{r4, r7, lr}
 8003ae8:	b08b      	sub	sp, #44	; 0x2c
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fcc8 	bl	8001488 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	e062      	b.n	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d056      	beq.n	8003bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3308      	adds	r3, #8
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4798      	blx	r3
 8003b60:	4603      	mov	r3, r0
 8003b62:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	4798      	blx	r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b96:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681c      	ldr	r4, [r3, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe f9d6 	bl	8001f5e <_ZN3ros9Publisher15getEndpointTypeEv>
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	f107 030c 	add.w	r3, r7, #12
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	2b18      	cmp	r3, #24
 8003bc8:	dd99      	ble.n	8003afe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	e05e      	b.n	8003c8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d053      	beq.n	8003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c06:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4608      	mov	r0, r1
 8003c22:	4798      	blx	r3
 8003c24:	4603      	mov	r3, r0
 8003c26:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c38:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4608      	mov	r0, r1
 8003c48:	4798      	blx	r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c52:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681c      	ldr	r4, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3304      	adds	r3, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4798      	blx	r3
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	f107 030c 	add.w	r3, r7, #12
 8003c82:	461a      	mov	r2, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	2b18      	cmp	r3, #24
 8003c92:	dd9d      	ble.n	8003bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003c9c:	bf00      	nop
 8003c9e:	372c      	adds	r7, #44	; 0x2c
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd90      	pop	{r4, r7, pc}

08003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003cae:	f107 0308 	add.w	r3, r7, #8
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd faf8 	bl	80012a8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fa8d 	bl	80021dc <_ZN13STM32Hardware4timeEv>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	6839      	ldr	r1, [r7, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fd fb57 	bl	8001388 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	4915      	ldr	r1, [pc, #84]	; (8003d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ce0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003cea:	6939      	ldr	r1, [r7, #16]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003cf0:	fba3 0302 	umull	r0, r3, r3, r2
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cfa:	fb00 f303 	mul.w	r3, r0, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	440b      	add	r3, r1
 8003d08:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8a6 	bl	8003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fa5d 	bl	80021dc <_ZN13STM32Hardware4timeEv>
 8003d22:	4602      	mov	r2, r0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003d2a:	bf00      	nop
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	10624dd3 	.word	0x10624dd3
 8003d38:	000f4240 	.word	0x000f4240

08003d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b63      	cmp	r3, #99	; 0x63
 8003d4c:	dd09      	ble.n	8003d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003d54:	f083 0301 	eor.w	r3, r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e079      	b.n	8003e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003d6e:	3207      	adds	r2, #7
 8003d70:	4611      	mov	r1, r2
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
 8003d76:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	22ff      	movs	r2, #255	; 0xff
 8003d7c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	22fe      	movs	r2, #254	; 0xfe
 8003d84:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003dae:	4413      	add	r3, r2
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	121b      	asrs	r3, r3, #8
 8003dcc:	b21b      	sxth	r3, r3
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003dda:	2305      	movs	r3, #5
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e00c      	b.n	8003dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4413      	add	r3, r2
 8003de6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	3306      	adds	r3, #6
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	dded      	ble.n	8003de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3307      	adds	r3, #7
 8003e08:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	425a      	negs	r2, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	bf58      	it	pl
 8003e14:	4253      	negpl	r3, r2
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	6179      	str	r1, [r7, #20]
 8003e1e:	43d2      	mvns	r2, r2
 8003e20:	b2d1      	uxtb	r1, r2
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	460a      	mov	r2, r1
 8003e28:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e32:	dc0a      	bgt.n	8003e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1d18      	adds	r0, r3, #4
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4619      	mov	r1, r3
 8003e42:	f7fe f985 	bl	8002150 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	e005      	b.n	8003e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003e4a:	4905      	ldr	r1, [pc, #20]	; (8003e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f849 	bl	8003ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	08008768 	.word	0x08008768

08003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe f9b2 	bl	80021dc <_ZN13STM32Hardware4timeEv>
 8003e78:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4915      	ldr	r1, [pc, #84]	; (8003ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003e82:	fba1 1303 	umull	r1, r3, r1, r3
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	1e5a      	subs	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ea4:	fb00 f303 	mul.w	r3, r0, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	1aca      	subs	r2, r1, r3
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f000 fae0 	bl	8004490 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	10624dd3 	.word	0x10624dd3
 8003edc:	000f4240 	.word	0x000f4240
 8003ee0:	3b9aca00 	.word	0x3b9aca00

08003ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	2103      	movs	r1, #3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f804 	bl	8003f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd fc7c 	bl	8001810 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003f18:	7afb      	ldrb	r3, [r7, #11]
 8003f1a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f107 0214 	add.w	r2, r7, #20
 8003f2a:	2107      	movs	r1, #7
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	4798      	blx	r3
  }
 8003f30:	bf00      	nop
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_Z41__static_initialization_and_destruction_0ii>:
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d11f      	bne.n	8003f88 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d11a      	bne.n	8003f88 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003f52:	480f      	ldr	r0, [pc, #60]	; (8003f90 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003f54:	f7fe ff9c 	bl	8002e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 left_wheel_msg;
 8003f58:	480e      	ldr	r0, [pc, #56]	; (8003f94 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003f5a:	f7fe fee5 	bl	8002d28 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher left_wheel_pub("lwheel", &left_wheel_msg);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003f62:	490d      	ldr	r1, [pc, #52]	; (8003f98 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003f64:	480d      	ldr	r0, [pc, #52]	; (8003f9c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003f66:	f7fd ffcf 	bl	8001f08 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int16 right_wheel_msg;
 8003f6a:	480d      	ldr	r0, [pc, #52]	; (8003fa0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003f6c:	f7fe fedc 	bl	8002d28 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);
 8003f70:	2300      	movs	r3, #0
 8003f72:	4a0b      	ldr	r2, [pc, #44]	; (8003fa0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003f74:	490b      	ldr	r1, [pc, #44]	; (8003fa4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003f76:	480c      	ldr	r0, [pc, #48]	; (8003fa8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003f78:	f7fd ffc6 	bl	8001f08 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003f80:	490b      	ldr	r1, [pc, #44]	; (8003fb0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003f82:	480c      	ldr	r0, [pc, #48]	; (8003fb4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003f84:	f7ff fb10 	bl	80035a8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000260 	.word	0x20000260
 8003f94:	20000b9c 	.word	0x20000b9c
 8003f98:	080087a4 	.word	0x080087a4
 8003f9c:	20000ba4 	.word	0x20000ba4
 8003fa0:	20000bb8 	.word	0x20000bb8
 8003fa4:	080087ac 	.word	0x080087ac
 8003fa8:	20000bc0 	.word	0x20000bc0
 8003fac:	08002e31 	.word	0x08002e31
 8003fb0:	080087b4 	.word	0x080087b4
 8003fb4:	20000bd8 	.word	0x20000bd8

08003fb8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3310      	adds	r3, #16
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fe6b 	bl	8002ca4 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	3210      	adds	r2, #16
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4798      	blx	r3
  }
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3310      	adds	r3, #16
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fe72 	bl	8002cf0 <_ZN13geometry_msgs5Twist7getTypeEv>
 800400c:	4603      	mov	r3, r0
  }
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3310      	adds	r3, #16
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fe72 	bl	8002d0c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004028:	4603      	mov	r3, r0
  }
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
    return configured_;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <_GLOBAL__sub_I_flag>:
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
 8004050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004054:	2001      	movs	r0, #1
 8004056:	f7ff ff6f 	bl	8003f38 <_Z41__static_initialization_and_destruction_0ii>
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_MspInit+0x4c>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	4a0f      	ldr	r2, [pc, #60]	; (80040a8 <HAL_MspInit+0x4c>)
 800406c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004070:	6453      	str	r3, [r2, #68]	; 0x44
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_MspInit+0x4c>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_MspInit+0x4c>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_MspInit+0x4c>)
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_MspInit+0x4c>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800409a:	2007      	movs	r0, #7
 800409c:	f000 fbb4 	bl	8004808 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d116      	bne.n	80040ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_TIM_Base_MspInit+0x70>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	4a15      	ldr	r2, [pc, #84]	; (800411c <HAL_TIM_Base_MspInit+0x70>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6413      	str	r3, [r2, #64]	; 0x40
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <HAL_TIM_Base_MspInit+0x70>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040da:	2200      	movs	r2, #0
 80040dc:	2100      	movs	r1, #0
 80040de:	201c      	movs	r0, #28
 80040e0:	f000 fb9d 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040e4:	201c      	movs	r0, #28
 80040e6:	f000 fbb6 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80040ea:	e012      	b.n	8004112 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <HAL_TIM_Base_MspInit+0x74>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10d      	bne.n	8004112 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <HAL_TIM_Base_MspInit+0x70>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a07      	ldr	r2, [pc, #28]	; (800411c <HAL_TIM_Base_MspInit+0x70>)
 8004100:	f043 0302 	orr.w	r3, r3, #2
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_TIM_Base_MspInit+0x70>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	40000400 	.word	0x40000400

08004124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <HAL_TIM_MspPostInit+0xa4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d13b      	bne.n	80041be <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_TIM_MspPostInit+0xa8>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <HAL_TIM_MspPostInit+0xa8>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6313      	str	r3, [r2, #48]	; 0x30
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_TIM_MspPostInit+0xa8>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_TIM_MspPostInit+0xa8>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_TIM_MspPostInit+0xa8>)
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	6313      	str	r3, [r2, #48]	; 0x30
 8004172:	4b16      	ldr	r3, [pc, #88]	; (80041cc <HAL_TIM_MspPostInit+0xa8>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800417e:	23c0      	movs	r3, #192	; 0xc0
 8004180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418a:	2300      	movs	r3, #0
 800418c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800418e:	2302      	movs	r3, #2
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004192:	f107 0314 	add.w	r3, r7, #20
 8004196:	4619      	mov	r1, r3
 8004198:	480d      	ldr	r0, [pc, #52]	; (80041d0 <HAL_TIM_MspPostInit+0xac>)
 800419a:	f000 ff79 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800419e:	2303      	movs	r3, #3
 80041a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a2:	2302      	movs	r3, #2
 80041a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041aa:	2300      	movs	r3, #0
 80041ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041ae:	2302      	movs	r3, #2
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	4619      	mov	r1, r3
 80041b8:	4806      	ldr	r0, [pc, #24]	; (80041d4 <HAL_TIM_MspPostInit+0xb0>)
 80041ba:	f000 ff69 	bl	8005090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80041be:	bf00      	nop
 80041c0:	3728      	adds	r7, #40	; 0x28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40020000 	.word	0x40020000
 80041d4:	40020400 	.word	0x40020400

080041d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	; 0x28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4d      	ldr	r2, [pc, #308]	; (800432c <HAL_UART_MspInit+0x154>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f040 8093 	bne.w	8004322 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <HAL_UART_MspInit+0x158>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	4a4a      	ldr	r2, [pc, #296]	; (8004330 <HAL_UART_MspInit+0x158>)
 8004206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800420a:	6413      	str	r3, [r2, #64]	; 0x40
 800420c:	4b48      	ldr	r3, [pc, #288]	; (8004330 <HAL_UART_MspInit+0x158>)
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_UART_MspInit+0x158>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	4a43      	ldr	r2, [pc, #268]	; (8004330 <HAL_UART_MspInit+0x158>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6313      	str	r3, [r2, #48]	; 0x30
 8004228:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_UART_MspInit+0x158>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004234:	230c      	movs	r3, #12
 8004236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004238:	2302      	movs	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004240:	2303      	movs	r3, #3
 8004242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004244:	2307      	movs	r3, #7
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	4619      	mov	r1, r3
 800424e:	4839      	ldr	r0, [pc, #228]	; (8004334 <HAL_UART_MspInit+0x15c>)
 8004250:	f000 ff1e 	bl	8005090 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <HAL_UART_MspInit+0x160>)
 8004256:	4a39      	ldr	r2, [pc, #228]	; (800433c <HAL_UART_MspInit+0x164>)
 8004258:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800425a:	4b37      	ldr	r3, [pc, #220]	; (8004338 <HAL_UART_MspInit+0x160>)
 800425c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004260:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004262:	4b35      	ldr	r3, [pc, #212]	; (8004338 <HAL_UART_MspInit+0x160>)
 8004264:	2200      	movs	r2, #0
 8004266:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004268:	4b33      	ldr	r3, [pc, #204]	; (8004338 <HAL_UART_MspInit+0x160>)
 800426a:	2200      	movs	r2, #0
 800426c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800426e:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_UART_MspInit+0x160>)
 8004270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004274:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004276:	4b30      	ldr	r3, [pc, #192]	; (8004338 <HAL_UART_MspInit+0x160>)
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800427c:	4b2e      	ldr	r3, [pc, #184]	; (8004338 <HAL_UART_MspInit+0x160>)
 800427e:	2200      	movs	r2, #0
 8004280:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004282:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <HAL_UART_MspInit+0x160>)
 8004284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004288:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800428a:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <HAL_UART_MspInit+0x160>)
 800428c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004290:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004292:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_UART_MspInit+0x160>)
 8004294:	2200      	movs	r2, #0
 8004296:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004298:	4827      	ldr	r0, [pc, #156]	; (8004338 <HAL_UART_MspInit+0x160>)
 800429a:	f000 faf7 	bl	800488c <HAL_DMA_Init>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80042a4:	f7fc ffda 	bl	800125c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a23      	ldr	r2, [pc, #140]	; (8004338 <HAL_UART_MspInit+0x160>)
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_UART_MspInit+0x160>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042b6:	4a23      	ldr	r2, [pc, #140]	; (8004344 <HAL_UART_MspInit+0x16c>)
 80042b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80042ba:	4b21      	ldr	r3, [pc, #132]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042c2:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042c4:	2240      	movs	r2, #64	; 0x40
 80042c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042ce:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042d8:	2200      	movs	r2, #0
 80042da:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042dc:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042de:	2200      	movs	r2, #0
 80042e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042e2:	4b17      	ldr	r3, [pc, #92]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042f0:	4b13      	ldr	r3, [pc, #76]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042f6:	4812      	ldr	r0, [pc, #72]	; (8004340 <HAL_UART_MspInit+0x168>)
 80042f8:	f000 fac8 	bl	800488c <HAL_DMA_Init>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004302:	f7fc ffab 	bl	800125c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <HAL_UART_MspInit+0x168>)
 800430a:	635a      	str	r2, [r3, #52]	; 0x34
 800430c:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <HAL_UART_MspInit+0x168>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004312:	2200      	movs	r2, #0
 8004314:	2100      	movs	r1, #0
 8004316:	2026      	movs	r0, #38	; 0x26
 8004318:	f000 fa81 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800431c:	2026      	movs	r0, #38	; 0x26
 800431e:	f000 fa9a 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004322:	bf00      	nop
 8004324:	3728      	adds	r7, #40	; 0x28
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40004400 	.word	0x40004400
 8004330:	40023800 	.word	0x40023800
 8004334:	40020000 	.word	0x40020000
 8004338:	20000150 	.word	0x20000150
 800433c:	40026088 	.word	0x40026088
 8004340:	200001b0 	.word	0x200001b0
 8004344:	400260a0 	.word	0x400260a0

08004348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800434c:	e7fe      	b.n	800434c <NMI_Handler+0x4>

0800434e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004352:	e7fe      	b.n	8004352 <HardFault_Handler+0x4>

08004354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004358:	e7fe      	b.n	8004358 <MemManage_Handler+0x4>

0800435a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800435e:	e7fe      	b.n	800435e <BusFault_Handler+0x4>

08004360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004364:	e7fe      	b.n	8004364 <UsageFault_Handler+0x4>

08004366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004382:	b480      	push	{r7}
 8004384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004394:	f000 f924 	bl	80045e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}

0800439c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80043a0:	4802      	ldr	r0, [pc, #8]	; (80043ac <DMA1_Stream5_IRQHandler+0x10>)
 80043a2:	f000 fc0b 	bl	8004bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000150 	.word	0x20000150

080043b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80043b4:	4802      	ldr	r0, [pc, #8]	; (80043c0 <DMA1_Stream6_IRQHandler+0x10>)
 80043b6:	f000 fc01 	bl	8004bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200001b0 	.word	0x200001b0

080043c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RightWheelEncoderChannelA_Pin);
 80043c8:	2040      	movs	r0, #64	; 0x40
 80043ca:	f001 f849 	bl	8005460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LeftWheelEncoderChannelA_Pin);
 80043ce:	2080      	movs	r0, #128	; 0x80
 80043d0:	f001 f846 	bl	8005460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043dc:	4802      	ldr	r0, [pc, #8]	; (80043e8 <TIM2_IRQHandler+0x10>)
 80043de:	f001 ff39 	bl	8006254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	2000007c 	.word	0x2000007c

080043ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80043f0:	4802      	ldr	r0, [pc, #8]	; (80043fc <USART2_IRQHandler+0x10>)
 80043f2:	f002 fe85 	bl	8007100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	2000010c 	.word	0x2000010c

08004400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004408:	4a14      	ldr	r2, [pc, #80]	; (800445c <_sbrk+0x5c>)
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <_sbrk+0x60>)
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004414:	4b13      	ldr	r3, [pc, #76]	; (8004464 <_sbrk+0x64>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <_sbrk+0x64>)
 800441e:	4a12      	ldr	r2, [pc, #72]	; (8004468 <_sbrk+0x68>)
 8004420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	429a      	cmp	r2, r3
 800442e:	d207      	bcs.n	8004440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004430:	f003 ff86 	bl	8008340 <__errno>
 8004434:	4603      	mov	r3, r0
 8004436:	220c      	movs	r2, #12
 8004438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295
 800443e:	e009      	b.n	8004454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <_sbrk+0x64>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <_sbrk+0x64>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	4a05      	ldr	r2, [pc, #20]	; (8004464 <_sbrk+0x64>)
 8004450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20020000 	.word	0x20020000
 8004460:	00000400 	.word	0x00000400
 8004464:	20000c38 	.word	0x20000c38
 8004468:	20000d88 	.word	0x20000d88

0800446c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <SystemInit+0x20>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <SystemInit+0x20>)
 8004478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800447c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	0a5a      	lsrs	r2, r3, #9
 80044a0:	490f      	ldr	r1, [pc, #60]	; (80044e0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80044a2:	fba1 1202 	umull	r1, r2, r1, r2
 80044a6:	09d2      	lsrs	r2, r2, #7
 80044a8:	490e      	ldr	r1, [pc, #56]	; (80044e4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80044aa:	fb01 f202 	mul.w	r2, r1, r2
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	0a5b      	lsrs	r3, r3, #9
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	09db      	lsrs	r3, r3, #7
 80044c0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	00044b83 	.word	0x00044b83
 80044e4:	3b9aca00 	.word	0x3b9aca00

080044e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044ec:	480d      	ldr	r0, [pc, #52]	; (8004524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044ee:	490e      	ldr	r1, [pc, #56]	; (8004528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044f4:	e002      	b.n	80044fc <LoopCopyDataInit>

080044f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044fa:	3304      	adds	r3, #4

080044fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004500:	d3f9      	bcc.n	80044f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004502:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004504:	4c0b      	ldr	r4, [pc, #44]	; (8004534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004508:	e001      	b.n	800450e <LoopFillZerobss>

0800450a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800450a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800450c:	3204      	adds	r2, #4

0800450e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800450e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004510:	d3fb      	bcc.n	800450a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004512:	f7ff ffab 	bl	800446c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004516:	f003 ff19 	bl	800834c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800451a:	f7fc fc21 	bl	8000d60 <main>
  bx  lr    
 800451e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004528:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800452c:	08008924 	.word	0x08008924
  ldr r2, =_sbss
 8004530:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004534:	20000d88 	.word	0x20000d88

08004538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004538:	e7fe      	b.n	8004538 <ADC_IRQHandler>
	...

0800453c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <HAL_Init+0x40>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0d      	ldr	r2, [pc, #52]	; (800457c <HAL_Init+0x40>)
 8004546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800454a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_Init+0x40>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0a      	ldr	r2, [pc, #40]	; (800457c <HAL_Init+0x40>)
 8004552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004558:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_Init+0x40>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <HAL_Init+0x40>)
 800455e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004564:	2003      	movs	r0, #3
 8004566:	f000 f94f 	bl	8004808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800456a:	2000      	movs	r0, #0
 800456c:	f000 f808 	bl	8004580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004570:	f7ff fd74 	bl	800405c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40023c00 	.word	0x40023c00

08004580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <HAL_InitTick+0x54>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_InitTick+0x58>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	4619      	mov	r1, r3
 8004592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004596:	fbb3 f3f1 	udiv	r3, r3, r1
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f967 	bl	8004872 <HAL_SYSTICK_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e00e      	b.n	80045cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b0f      	cmp	r3, #15
 80045b2:	d80a      	bhi.n	80045ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045b4:	2200      	movs	r2, #0
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	f000 f92f 	bl	800481e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045c0:	4a06      	ldr	r2, [pc, #24]	; (80045dc <HAL_InitTick+0x5c>)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e000      	b.n	80045cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000000 	.word	0x20000000
 80045d8:	20000008 	.word	0x20000008
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_IncTick+0x20>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_IncTick+0x24>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4413      	add	r3, r2
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <HAL_IncTick+0x24>)
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000008 	.word	0x20000008
 8004604:	20000c3c 	.word	0x20000c3c

08004608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return uwTick;
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <HAL_GetTick+0x14>)
 800460e:	681b      	ldr	r3, [r3, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000c3c 	.word	0x20000c3c

08004620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004628:	f7ff ffee 	bl	8004608 <HAL_GetTick>
 800462c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d005      	beq.n	8004646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <HAL_Delay+0x44>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004646:	bf00      	nop
 8004648:	f7ff ffde 	bl	8004608 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	429a      	cmp	r2, r3
 8004656:	d8f7      	bhi.n	8004648 <HAL_Delay+0x28>
  {
  }
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000008 	.word	0x20000008

08004668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004684:	4013      	ands	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469a:	4a04      	ldr	r2, [pc, #16]	; (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	60d3      	str	r3, [r2, #12]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <__NVIC_GetPriorityGrouping+0x18>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	f003 0307 	and.w	r3, r3, #7
}
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db0b      	blt.n	80046f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	f003 021f 	and.w	r2, r3, #31
 80046e4:	4907      	ldr	r1, [pc, #28]	; (8004704 <__NVIC_EnableIRQ+0x38>)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2001      	movs	r0, #1
 80046ee:	fa00 f202 	lsl.w	r2, r0, r2
 80046f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000e100 	.word	0xe000e100

08004708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db0a      	blt.n	8004732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <__NVIC_SetPriority+0x4c>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	440b      	add	r3, r1
 800472c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004730:	e00a      	b.n	8004748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4908      	ldr	r1, [pc, #32]	; (8004758 <__NVIC_SetPriority+0x50>)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	3b04      	subs	r3, #4
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	440b      	add	r3, r1
 8004746:	761a      	strb	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000e100 	.word	0xe000e100
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf28      	it	cs
 800477a:	2304      	movcs	r3, #4
 800477c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3304      	adds	r3, #4
 8004782:	2b06      	cmp	r3, #6
 8004784:	d902      	bls.n	800478c <NVIC_EncodePriority+0x30>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3b03      	subs	r3, #3
 800478a:	e000      	b.n	800478e <NVIC_EncodePriority+0x32>
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	401a      	ands	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a4:	f04f 31ff 	mov.w	r1, #4294967295
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	4313      	orrs	r3, r2
         );
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d4:	d301      	bcc.n	80047da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047d6:	2301      	movs	r3, #1
 80047d8:	e00f      	b.n	80047fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047da:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <SysTick_Config+0x40>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047e2:	210f      	movs	r1, #15
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	f7ff ff8e 	bl	8004708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <SysTick_Config+0x40>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <SysTick_Config+0x40>)
 80047f4:	2207      	movs	r2, #7
 80047f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	e000e010 	.word	0xe000e010

08004808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ff29 	bl	8004668 <__NVIC_SetPriorityGrouping>
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004830:	f7ff ff3e 	bl	80046b0 <__NVIC_GetPriorityGrouping>
 8004834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f7ff ff8e 	bl	800475c <NVIC_EncodePriority>
 8004840:	4602      	mov	r2, r0
 8004842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff5d 	bl	8004708 <__NVIC_SetPriority>
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	4603      	mov	r3, r0
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff ff31 	bl	80046cc <__NVIC_EnableIRQ>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ffa2 	bl	80047c4 <SysTick_Config>
 8004880:	4603      	mov	r3, r0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004898:	f7ff feb6 	bl	8004608 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e099      	b.n	80049dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c8:	e00f      	b.n	80048ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ca:	f7ff fe9d 	bl	8004608 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d908      	bls.n	80048ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2203      	movs	r2, #3
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e078      	b.n	80049dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e8      	bne.n	80048ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <HAL_DMA_Init+0x158>)
 8004904:	4013      	ands	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	2b04      	cmp	r3, #4
 8004942:	d107      	bne.n	8004954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	4313      	orrs	r3, r2
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b04      	cmp	r3, #4
 800497c:	d117      	bne.n	80049ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb01 	bl	8004f98 <DMA_CheckFifoParam>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049aa:	2301      	movs	r3, #1
 80049ac:	e016      	b.n	80049dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fab8 	bl	8004f2c <DMA_CalcBaseAndBitshift>
 80049bc:	4603      	mov	r3, r0
 80049be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	223f      	movs	r2, #63	; 0x3f
 80049c6:	409a      	lsls	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	f010803f 	.word	0xf010803f

080049e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_DMA_Start_IT+0x26>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e040      	b.n	8004a90 <HAL_DMA_Start_IT+0xa8>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d12f      	bne.n	8004a82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fa4a 	bl	8004ed0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	223f      	movs	r2, #63	; 0x3f
 8004a42:	409a      	lsls	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0216 	orr.w	r2, r2, #22
 8004a56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0208 	orr.w	r2, r2, #8
 8004a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e005      	b.n	8004a8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004aa6:	f7ff fdaf 	bl	8004608 <HAL_GetTick>
 8004aaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d008      	beq.n	8004aca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2280      	movs	r2, #128	; 0x80
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e052      	b.n	8004b70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0216 	bic.w	r2, r2, #22
 8004ad8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ae8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <HAL_DMA_Abort+0x62>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0208 	bic.w	r2, r2, #8
 8004b08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b1a:	e013      	b.n	8004b44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b1c:	f7ff fd74 	bl	8004608 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d90c      	bls.n	8004b44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2203      	movs	r2, #3
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e015      	b.n	8004b70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e4      	bne.n	8004b1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	223f      	movs	r2, #63	; 0x3f
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d004      	beq.n	8004b96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00c      	b.n	8004bb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2205      	movs	r2, #5
 8004b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bc8:	4b8e      	ldr	r3, [pc, #568]	; (8004e04 <HAL_DMA_IRQHandler+0x248>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a8e      	ldr	r2, [pc, #568]	; (8004e08 <HAL_DMA_IRQHandler+0x24c>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0a9b      	lsrs	r3, r3, #10
 8004bd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	2208      	movs	r2, #8
 8004be8:	409a      	lsls	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01a      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	2208      	movs	r2, #8
 8004c16:	409a      	lsls	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	f043 0201 	orr.w	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d012      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f043 0202 	orr.w	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	2204      	movs	r2, #4
 8004c64:	409a      	lsls	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d012      	beq.n	8004c94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00b      	beq.n	8004c94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	2204      	movs	r2, #4
 8004c82:	409a      	lsls	r2, r3
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f043 0204 	orr.w	r2, r3, #4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	2210      	movs	r2, #16
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d043      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d03c      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	2210      	movs	r2, #16
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d018      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d108      	bne.n	8004cec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d024      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4798      	blx	r3
 8004cea:	e01f      	b.n	8004d2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01b      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
 8004cfc:	e016      	b.n	8004d2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d107      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0208 	bic.w	r2, r2, #8
 8004d1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	2220      	movs	r2, #32
 8004d32:	409a      	lsls	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 808f 	beq.w	8004e5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8087 	beq.w	8004e5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	2220      	movs	r2, #32
 8004d54:	409a      	lsls	r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d136      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0216 	bic.w	r2, r2, #22
 8004d74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x1da>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0208 	bic.w	r2, r2, #8
 8004da4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004daa:	223f      	movs	r2, #63	; 0x3f
 8004dac:	409a      	lsls	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d07e      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
        }
        return;
 8004dd2:	e079      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01d      	beq.n	8004e1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10d      	bne.n	8004e0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d031      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
 8004e00:	e02c      	b.n	8004e5c <HAL_DMA_IRQHandler+0x2a0>
 8004e02:	bf00      	nop
 8004e04:	20000000 	.word	0x20000000
 8004e08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d023      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
 8004e1c:	e01e      	b.n	8004e5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10f      	bne.n	8004e4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0210 	bic.w	r2, r2, #16
 8004e3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d032      	beq.n	8004eca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d022      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2205      	movs	r2, #5
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d307      	bcc.n	8004ea4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f2      	bne.n	8004e88 <HAL_DMA_IRQHandler+0x2cc>
 8004ea2:	e000      	b.n	8004ea6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ea4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
 8004ec6:	e000      	b.n	8004eca <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ec8:	bf00      	nop
    }
  }
}
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d108      	bne.n	8004f10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f0e:	e007      	b.n	8004f20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	3b10      	subs	r3, #16
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <DMA_CalcBaseAndBitshift+0x64>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <DMA_CalcBaseAndBitshift+0x68>)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d909      	bls.n	8004f6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f6c:	e007      	b.n	8004f7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f76:	f023 0303 	bic.w	r3, r3, #3
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	aaaaaaab 	.word	0xaaaaaaab
 8004f94:	08008908 	.word	0x08008908

08004f98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11f      	bne.n	8004ff2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d856      	bhi.n	8005066 <DMA_CheckFifoParam+0xce>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <DMA_CheckFifoParam+0x28>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fe3 	.word	0x08004fe3
 8004fc8:	08004fd1 	.word	0x08004fd1
 8004fcc:	08005067 	.word	0x08005067
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d046      	beq.n	800506a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe0:	e043      	b.n	800506a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fea:	d140      	bne.n	800506e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff0:	e03d      	b.n	800506e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffa:	d121      	bne.n	8005040 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d837      	bhi.n	8005072 <DMA_CheckFifoParam+0xda>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <DMA_CheckFifoParam+0x70>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005019 	.word	0x08005019
 800500c:	0800501f 	.word	0x0800501f
 8005010:	08005019 	.word	0x08005019
 8005014:	08005031 	.word	0x08005031
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      break;
 800501c:	e030      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d025      	beq.n	8005076 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502e:	e022      	b.n	8005076 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005038:	d11f      	bne.n	800507a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800503e:	e01c      	b.n	800507a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d903      	bls.n	800504e <DMA_CheckFifoParam+0xb6>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d003      	beq.n	8005054 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800504c:	e018      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
      break;
 8005052:	e015      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e00b      	b.n	800507e <DMA_CheckFifoParam+0xe6>
      break;
 8005066:	bf00      	nop
 8005068:	e00a      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 800506a:	bf00      	nop
 800506c:	e008      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 800506e:	bf00      	nop
 8005070:	e006      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 8005072:	bf00      	nop
 8005074:	e004      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;   
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 800507e:	bf00      	nop
    }
  } 
  
  return status; 
 8005080:	7bfb      	ldrb	r3, [r7, #15]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop

08005090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e16b      	b.n	8005384 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050ac:	2201      	movs	r2, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f040 815a 	bne.w	800537e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d005      	beq.n	80050e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d130      	bne.n	8005144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2203      	movs	r2, #3
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4313      	orrs	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005118:	2201      	movs	r2, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 0201 	and.w	r2, r3, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b03      	cmp	r3, #3
 800514e:	d017      	beq.n	8005180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	2203      	movs	r2, #3
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d123      	bne.n	80051d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	220f      	movs	r2, #15
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	08da      	lsrs	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	69b9      	ldr	r1, [r7, #24]
 80051d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	2203      	movs	r2, #3
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0203 	and.w	r2, r3, #3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80b4 	beq.w	800537e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	4b60      	ldr	r3, [pc, #384]	; (800539c <HAL_GPIO_Init+0x30c>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	4a5f      	ldr	r2, [pc, #380]	; (800539c <HAL_GPIO_Init+0x30c>)
 8005220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005224:	6453      	str	r3, [r2, #68]	; 0x44
 8005226:	4b5d      	ldr	r3, [pc, #372]	; (800539c <HAL_GPIO_Init+0x30c>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005232:	4a5b      	ldr	r2, [pc, #364]	; (80053a0 <HAL_GPIO_Init+0x310>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a52      	ldr	r2, [pc, #328]	; (80053a4 <HAL_GPIO_Init+0x314>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d02b      	beq.n	80052b6 <HAL_GPIO_Init+0x226>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a51      	ldr	r2, [pc, #324]	; (80053a8 <HAL_GPIO_Init+0x318>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d025      	beq.n	80052b2 <HAL_GPIO_Init+0x222>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a50      	ldr	r2, [pc, #320]	; (80053ac <HAL_GPIO_Init+0x31c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01f      	beq.n	80052ae <HAL_GPIO_Init+0x21e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a4f      	ldr	r2, [pc, #316]	; (80053b0 <HAL_GPIO_Init+0x320>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d019      	beq.n	80052aa <HAL_GPIO_Init+0x21a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a4e      	ldr	r2, [pc, #312]	; (80053b4 <HAL_GPIO_Init+0x324>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_GPIO_Init+0x216>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a4d      	ldr	r2, [pc, #308]	; (80053b8 <HAL_GPIO_Init+0x328>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00d      	beq.n	80052a2 <HAL_GPIO_Init+0x212>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a4c      	ldr	r2, [pc, #304]	; (80053bc <HAL_GPIO_Init+0x32c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <HAL_GPIO_Init+0x20e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a4b      	ldr	r2, [pc, #300]	; (80053c0 <HAL_GPIO_Init+0x330>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d101      	bne.n	800529a <HAL_GPIO_Init+0x20a>
 8005296:	2307      	movs	r3, #7
 8005298:	e00e      	b.n	80052b8 <HAL_GPIO_Init+0x228>
 800529a:	2308      	movs	r3, #8
 800529c:	e00c      	b.n	80052b8 <HAL_GPIO_Init+0x228>
 800529e:	2306      	movs	r3, #6
 80052a0:	e00a      	b.n	80052b8 <HAL_GPIO_Init+0x228>
 80052a2:	2305      	movs	r3, #5
 80052a4:	e008      	b.n	80052b8 <HAL_GPIO_Init+0x228>
 80052a6:	2304      	movs	r3, #4
 80052a8:	e006      	b.n	80052b8 <HAL_GPIO_Init+0x228>
 80052aa:	2303      	movs	r3, #3
 80052ac:	e004      	b.n	80052b8 <HAL_GPIO_Init+0x228>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e002      	b.n	80052b8 <HAL_GPIO_Init+0x228>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_GPIO_Init+0x228>
 80052b6:	2300      	movs	r3, #0
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	f002 0203 	and.w	r2, r2, #3
 80052be:	0092      	lsls	r2, r2, #2
 80052c0:	4093      	lsls	r3, r2
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052c8:	4935      	ldr	r1, [pc, #212]	; (80053a0 <HAL_GPIO_Init+0x310>)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	3302      	adds	r3, #2
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052d6:	4b3b      	ldr	r3, [pc, #236]	; (80053c4 <HAL_GPIO_Init+0x334>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	43db      	mvns	r3, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4013      	ands	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052fa:	4a32      	ldr	r2, [pc, #200]	; (80053c4 <HAL_GPIO_Init+0x334>)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_GPIO_Init+0x334>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	43db      	mvns	r3, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005324:	4a27      	ldr	r2, [pc, #156]	; (80053c4 <HAL_GPIO_Init+0x334>)
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800532a:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <HAL_GPIO_Init+0x334>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800534e:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <HAL_GPIO_Init+0x334>)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005354:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <HAL_GPIO_Init+0x334>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005378:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <HAL_GPIO_Init+0x334>)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	3301      	adds	r3, #1
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	f67f ae90 	bls.w	80050ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	3724      	adds	r7, #36	; 0x24
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800
 80053a0:	40013800 	.word	0x40013800
 80053a4:	40020000 	.word	0x40020000
 80053a8:	40020400 	.word	0x40020400
 80053ac:	40020800 	.word	0x40020800
 80053b0:	40020c00 	.word	0x40020c00
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40021400 	.word	0x40021400
 80053bc:	40021800 	.word	0x40021800
 80053c0:	40021c00 	.word	0x40021c00
 80053c4:	40013c00 	.word	0x40013c00

080053c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	887b      	ldrh	r3, [r7, #2]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
 80053e4:	e001      	b.n	80053ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	807b      	strh	r3, [r7, #2]
 8005404:	4613      	mov	r3, r2
 8005406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005408:	787b      	ldrb	r3, [r7, #1]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800540e:	887a      	ldrh	r2, [r7, #2]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005414:	e003      	b.n	800541e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	041a      	lsls	r2, r3, #16
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	619a      	str	r2, [r3, #24]
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800543c:	887a      	ldrh	r2, [r7, #2]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4013      	ands	r3, r2
 8005442:	041a      	lsls	r2, r3, #16
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	43d9      	mvns	r1, r3
 8005448:	887b      	ldrh	r3, [r7, #2]
 800544a:	400b      	ands	r3, r1
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	619a      	str	r2, [r3, #24]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800546c:	695a      	ldr	r2, [r3, #20]
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d006      	beq.n	8005484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005476:	4a05      	ldr	r2, [pc, #20]	; (800548c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	4618      	mov	r0, r3
 8005480:	f7fd fda0 	bl	8002fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40013c00 	.word	0x40013c00

08005490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e267      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d075      	beq.n	800559a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ae:	4b88      	ldr	r3, [pc, #544]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d00c      	beq.n	80054d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ba:	4b85      	ldr	r3, [pc, #532]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d112      	bne.n	80054ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c6:	4b82      	ldr	r3, [pc, #520]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d2:	d10b      	bne.n	80054ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d4:	4b7e      	ldr	r3, [pc, #504]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d05b      	beq.n	8005598 <HAL_RCC_OscConfig+0x108>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d157      	bne.n	8005598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e242      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f4:	d106      	bne.n	8005504 <HAL_RCC_OscConfig+0x74>
 80054f6:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a75      	ldr	r2, [pc, #468]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e01d      	b.n	8005540 <HAL_RCC_OscConfig+0xb0>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800550c:	d10c      	bne.n	8005528 <HAL_RCC_OscConfig+0x98>
 800550e:	4b70      	ldr	r3, [pc, #448]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a6f      	ldr	r2, [pc, #444]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4b6d      	ldr	r3, [pc, #436]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6c      	ldr	r2, [pc, #432]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e00b      	b.n	8005540 <HAL_RCC_OscConfig+0xb0>
 8005528:	4b69      	ldr	r3, [pc, #420]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a68      	ldr	r2, [pc, #416]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 800552e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	4b66      	ldr	r3, [pc, #408]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a65      	ldr	r2, [pc, #404]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 800553a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d013      	beq.n	8005570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005548:	f7ff f85e 	bl	8004608 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005550:	f7ff f85a 	bl	8004608 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e207      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005562:	4b5b      	ldr	r3, [pc, #364]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0xc0>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005570:	f7ff f84a 	bl	8004608 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005578:	f7ff f846 	bl	8004608 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b64      	cmp	r3, #100	; 0x64
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1f3      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800558a:	4b51      	ldr	r3, [pc, #324]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0xe8>
 8005596:	e000      	b.n	800559a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d063      	beq.n	800566e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055a6:	4b4a      	ldr	r3, [pc, #296]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055b2:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d11c      	bne.n	80055f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055be:	4b44      	ldr	r3, [pc, #272]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d116      	bne.n	80055f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ca:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x152>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d001      	beq.n	80055e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e1c7      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e2:	4b3b      	ldr	r3, [pc, #236]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4937      	ldr	r1, [pc, #220]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f6:	e03a      	b.n	800566e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d020      	beq.n	8005642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005600:	4b34      	ldr	r3, [pc, #208]	; (80056d4 <HAL_RCC_OscConfig+0x244>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fe ffff 	bl	8004608 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560e:	f7fe fffb 	bl	8004608 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e1a8      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005620:	4b2b      	ldr	r3, [pc, #172]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562c:	4b28      	ldr	r3, [pc, #160]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4925      	ldr	r1, [pc, #148]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]
 8005640:	e015      	b.n	800566e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <HAL_RCC_OscConfig+0x244>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fe ffde 	bl	8004608 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005650:	f7fe ffda 	bl	8004608 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e187      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005662:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d036      	beq.n	80056e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d016      	beq.n	80056b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <HAL_RCC_OscConfig+0x248>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005688:	f7fe ffbe 	bl	8004608 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005690:	f7fe ffba 	bl	8004608 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e167      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_RCC_OscConfig+0x240>)
 80056a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0x200>
 80056ae:	e01b      	b.n	80056e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <HAL_RCC_OscConfig+0x248>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b6:	f7fe ffa7 	bl	8004608 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056bc:	e00e      	b.n	80056dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056be:	f7fe ffa3 	bl	8004608 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d907      	bls.n	80056dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e150      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
 80056d0:	40023800 	.word	0x40023800
 80056d4:	42470000 	.word	0x42470000
 80056d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056dc:	4b88      	ldr	r3, [pc, #544]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 80056de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ea      	bne.n	80056be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8097 	beq.w	8005824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056fa:	4b81      	ldr	r3, [pc, #516]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	4b7d      	ldr	r3, [pc, #500]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	4a7c      	ldr	r2, [pc, #496]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	6413      	str	r3, [r2, #64]	; 0x40
 8005716:	4b7a      	ldr	r3, [pc, #488]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005726:	4b77      	ldr	r3, [pc, #476]	; (8005904 <HAL_RCC_OscConfig+0x474>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d118      	bne.n	8005764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005732:	4b74      	ldr	r3, [pc, #464]	; (8005904 <HAL_RCC_OscConfig+0x474>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a73      	ldr	r2, [pc, #460]	; (8005904 <HAL_RCC_OscConfig+0x474>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573e:	f7fe ff63 	bl	8004608 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005746:	f7fe ff5f 	bl	8004608 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e10c      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005758:	4b6a      	ldr	r3, [pc, #424]	; (8005904 <HAL_RCC_OscConfig+0x474>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x2ea>
 800576c:	4b64      	ldr	r3, [pc, #400]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	4a63      	ldr	r2, [pc, #396]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	; 0x70
 8005778:	e01c      	b.n	80057b4 <HAL_RCC_OscConfig+0x324>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b05      	cmp	r3, #5
 8005780:	d10c      	bne.n	800579c <HAL_RCC_OscConfig+0x30c>
 8005782:	4b5f      	ldr	r3, [pc, #380]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	4a5e      	ldr	r2, [pc, #376]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	6713      	str	r3, [r2, #112]	; 0x70
 800578e:	4b5c      	ldr	r3, [pc, #368]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	4a5b      	ldr	r2, [pc, #364]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	6713      	str	r3, [r2, #112]	; 0x70
 800579a:	e00b      	b.n	80057b4 <HAL_RCC_OscConfig+0x324>
 800579c:	4b58      	ldr	r3, [pc, #352]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	4a57      	ldr	r2, [pc, #348]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	6713      	str	r3, [r2, #112]	; 0x70
 80057a8:	4b55      	ldr	r3, [pc, #340]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ac:	4a54      	ldr	r2, [pc, #336]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fe ff24 	bl	8004608 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c2:	e00a      	b.n	80057da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c4:	f7fe ff20 	bl	8004608 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e0cb      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057da:	4b49      	ldr	r3, [pc, #292]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0ee      	beq.n	80057c4 <HAL_RCC_OscConfig+0x334>
 80057e6:	e014      	b.n	8005812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e8:	f7fe ff0e 	bl	8004608 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f0:	f7fe ff0a 	bl	8004608 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e0b5      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005806:	4b3e      	ldr	r3, [pc, #248]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1ee      	bne.n	80057f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d105      	bne.n	8005824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005818:	4b39      	ldr	r3, [pc, #228]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	4a38      	ldr	r2, [pc, #224]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80a1 	beq.w	8005970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582e:	4b34      	ldr	r3, [pc, #208]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b08      	cmp	r3, #8
 8005838:	d05c      	beq.n	80058f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d141      	bne.n	80058c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005842:	4b31      	ldr	r3, [pc, #196]	; (8005908 <HAL_RCC_OscConfig+0x478>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005848:	f7fe fede 	bl	8004608 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005850:	f7fe feda 	bl	8004608 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e087      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005862:	4b27      	ldr	r3, [pc, #156]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	3b01      	subs	r3, #1
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	061b      	lsls	r3, r3, #24
 8005892:	491b      	ldr	r1, [pc, #108]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005898:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <HAL_RCC_OscConfig+0x478>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589e:	f7fe feb3 	bl	8004608 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a6:	f7fe feaf 	bl	8004608 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e05c      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x416>
 80058c4:	e054      	b.n	8005970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c6:	4b10      	ldr	r3, [pc, #64]	; (8005908 <HAL_RCC_OscConfig+0x478>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fe fe9c 	bl	8004608 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fe fe98 	bl	8004608 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e045      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_OscConfig+0x470>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x444>
 80058f2:	e03d      	b.n	8005970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e038      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
 8005900:	40023800 	.word	0x40023800
 8005904:	40007000 	.word	0x40007000
 8005908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800590c:	4b1b      	ldr	r3, [pc, #108]	; (800597c <HAL_RCC_OscConfig+0x4ec>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d028      	beq.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d121      	bne.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d11a      	bne.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800593c:	4013      	ands	r3, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005944:	4293      	cmp	r3, r2
 8005946:	d111      	bne.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	3b01      	subs	r3, #1
 8005956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d107      	bne.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40023800 	.word	0x40023800

08005980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0cc      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005994:	4b68      	ldr	r3, [pc, #416]	; (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d90c      	bls.n	80059bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b65      	ldr	r3, [pc, #404]	; (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059aa:	4b63      	ldr	r3, [pc, #396]	; (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d001      	beq.n	80059bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0b8      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d020      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d4:	4b59      	ldr	r3, [pc, #356]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4a58      	ldr	r2, [pc, #352]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059ec:	4b53      	ldr	r3, [pc, #332]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	4a52      	ldr	r2, [pc, #328]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f8:	4b50      	ldr	r3, [pc, #320]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	494d      	ldr	r1, [pc, #308]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d044      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d107      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1e:	4b47      	ldr	r3, [pc, #284]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d119      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e07f      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d003      	beq.n	8005a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3e:	4b3f      	ldr	r3, [pc, #252]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e06f      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4e:	4b3b      	ldr	r3, [pc, #236]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e067      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5e:	4b37      	ldr	r3, [pc, #220]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f023 0203 	bic.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4934      	ldr	r1, [pc, #208]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a70:	f7fe fdca 	bl	8004608 <HAL_GetTick>
 8005a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a78:	f7fe fdc6 	bl	8004608 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e04f      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8e:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 020c 	and.w	r2, r3, #12
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d1eb      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005aa0:	4b25      	ldr	r3, [pc, #148]	; (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d20c      	bcs.n	8005ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e032      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad4:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4916      	ldr	r1, [pc, #88]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005af2:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	490e      	ldr	r1, [pc, #56]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b06:	f000 f821 	bl	8005b4c <HAL_RCC_GetSysClockFreq>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	490a      	ldr	r1, [pc, #40]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 8005b18:	5ccb      	ldrb	r3, [r1, r3]
 8005b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <HAL_RCC_ClockConfig+0x1c8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fd2a 	bl	8004580 <HAL_InitTick>

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40023c00 	.word	0x40023c00
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	080088f0 	.word	0x080088f0
 8005b44:	20000000 	.word	0x20000000
 8005b48:	20000004 	.word	0x20000004

08005b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b50:	b094      	sub	sp, #80	; 0x50
 8005b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	647b      	str	r3, [r7, #68]	; 0x44
 8005b58:	2300      	movs	r3, #0
 8005b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b64:	4b79      	ldr	r3, [pc, #484]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 030c 	and.w	r3, r3, #12
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d00d      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0x40>
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	f200 80e1 	bhi.w	8005d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0x34>
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d003      	beq.n	8005b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7e:	e0db      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b80:	4b73      	ldr	r3, [pc, #460]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b84:	e0db      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b86:	4b73      	ldr	r3, [pc, #460]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b8a:	e0d8      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b8c:	4b6f      	ldr	r3, [pc, #444]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b96:	4b6d      	ldr	r3, [pc, #436]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d063      	beq.n	8005c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ba2:	4b6a      	ldr	r3, [pc, #424]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	2200      	movs	r2, #0
 8005baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f04f 0100 	mov.w	r1, #0
 8005bca:	0159      	lsls	r1, r3, #5
 8005bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd0:	0150      	lsls	r0, r2, #5
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	1a51      	subs	r1, r2, r1
 8005bda:	6139      	str	r1, [r7, #16]
 8005bdc:	4629      	mov	r1, r5
 8005bde:	eb63 0301 	sbc.w	r3, r3, r1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	018b      	lsls	r3, r1, #6
 8005bf4:	4651      	mov	r1, sl
 8005bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	018a      	lsls	r2, r1, #6
 8005bfe:	4651      	mov	r1, sl
 8005c00:	ebb2 0801 	subs.w	r8, r2, r1
 8005c04:	4659      	mov	r1, fp
 8005c06:	eb63 0901 	sbc.w	r9, r3, r1
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1e:	4690      	mov	r8, r2
 8005c20:	4699      	mov	r9, r3
 8005c22:	4623      	mov	r3, r4
 8005c24:	eb18 0303 	adds.w	r3, r8, r3
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	eb49 0303 	adc.w	r3, r9, r3
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c3e:	4629      	mov	r1, r5
 8005c40:	024b      	lsls	r3, r1, #9
 8005c42:	4621      	mov	r1, r4
 8005c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c48:	4621      	mov	r1, r4
 8005c4a:	024a      	lsls	r2, r1, #9
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c52:	2200      	movs	r2, #0
 8005c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c5c:	f7fa ff02 	bl	8000a64 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4613      	mov	r3, r2
 8005c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c68:	e058      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c6a:	4b38      	ldr	r3, [pc, #224]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	099b      	lsrs	r3, r3, #6
 8005c70:	2200      	movs	r2, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	4611      	mov	r1, r2
 8005c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c7a:	623b      	str	r3, [r7, #32]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	f04f 0000 	mov.w	r0, #0
 8005c8c:	f04f 0100 	mov.w	r1, #0
 8005c90:	0159      	lsls	r1, r3, #5
 8005c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c96:	0150      	lsls	r0, r2, #5
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8005cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	00eb      	lsls	r3, r5, #3
 8005cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd2:	00e2      	lsls	r2, r4, #3
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	4643      	mov	r3, r8
 8005cda:	18e3      	adds	r3, r4, r3
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	464b      	mov	r3, r9
 8005ce0:	eb45 0303 	adc.w	r3, r5, r3
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	028b      	lsls	r3, r1, #10
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	028a      	lsls	r2, r1, #10
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d06:	2200      	movs	r2, #0
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	61fa      	str	r2, [r7, #28]
 8005d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d10:	f7fa fea8 	bl	8000a64 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3750      	adds	r7, #80	; 0x50
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	007a1200 	.word	0x007a1200

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000000 	.word	0x20000000

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	; (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	08008900 	.word	0x08008900

08005d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d9c:	f7ff ffdc 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0b5b      	lsrs	r3, r3, #13
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	; (8005dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	08008900 	.word	0x08008900

08005dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e041      	b.n	8005e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fe f960 	bl	80040ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f000 fce2 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d001      	beq.n	8005e78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e046      	b.n	8005f06 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a23      	ldr	r2, [pc, #140]	; (8005f14 <HAL_TIM_Base_Start+0xb4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d022      	beq.n	8005ed0 <HAL_TIM_Base_Start+0x70>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e92:	d01d      	beq.n	8005ed0 <HAL_TIM_Base_Start+0x70>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1f      	ldr	r2, [pc, #124]	; (8005f18 <HAL_TIM_Base_Start+0xb8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d018      	beq.n	8005ed0 <HAL_TIM_Base_Start+0x70>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <HAL_TIM_Base_Start+0xbc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <HAL_TIM_Base_Start+0x70>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_TIM_Base_Start+0xc0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00e      	beq.n	8005ed0 <HAL_TIM_Base_Start+0x70>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <HAL_TIM_Base_Start+0xc4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_TIM_Base_Start+0x70>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <HAL_TIM_Base_Start+0xc8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d004      	beq.n	8005ed0 <HAL_TIM_Base_Start+0x70>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_TIM_Base_Start+0xcc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d111      	bne.n	8005ef4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b06      	cmp	r3, #6
 8005ee0:	d010      	beq.n	8005f04 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef2:	e007      	b.n	8005f04 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40010400 	.word	0x40010400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40001800 	.word	0x40001800

08005f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d001      	beq.n	8005f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e04e      	b.n	8005fe6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a23      	ldr	r2, [pc, #140]	; (8005ff4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d01d      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1f      	ldr	r2, [pc, #124]	; (8005ff8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <HAL_TIM_Base_Start_IT+0xcc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1b      	ldr	r2, [pc, #108]	; (8006004 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <HAL_TIM_Base_Start_IT+0xdc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d111      	bne.n	8005fd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d010      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd2:	e007      	b.n	8005fe4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	40010400 	.word	0x40010400
 8006008:	40014000 	.word	0x40014000
 800600c:	40001800 	.word	0x40001800

08006010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e041      	b.n	80060a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f839 	bl	80060ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f000 fbba 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
	...

080060c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <HAL_TIM_PWM_Start+0x24>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e022      	b.n	800612e <HAL_TIM_PWM_Start+0x6a>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d109      	bne.n	8006102 <HAL_TIM_PWM_Start+0x3e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	bf14      	ite	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	2300      	moveq	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	e015      	b.n	800612e <HAL_TIM_PWM_Start+0x6a>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b08      	cmp	r3, #8
 8006106:	d109      	bne.n	800611c <HAL_TIM_PWM_Start+0x58>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	e008      	b.n	800612e <HAL_TIM_PWM_Start+0x6a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e07c      	b.n	8006230 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0x82>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006144:	e013      	b.n	800616e <HAL_TIM_PWM_Start+0xaa>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0x92>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006154:	e00b      	b.n	800616e <HAL_TIM_PWM_Start+0xaa>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b08      	cmp	r3, #8
 800615a:	d104      	bne.n	8006166 <HAL_TIM_PWM_Start+0xa2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006164:	e003      	b.n	800616e <HAL_TIM_PWM_Start+0xaa>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2201      	movs	r2, #1
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fe10 	bl	8006d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a2d      	ldr	r2, [pc, #180]	; (8006238 <HAL_TIM_PWM_Start+0x174>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <HAL_TIM_PWM_Start+0xcc>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a2c      	ldr	r2, [pc, #176]	; (800623c <HAL_TIM_PWM_Start+0x178>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d101      	bne.n	8006194 <HAL_TIM_PWM_Start+0xd0>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <HAL_TIM_PWM_Start+0xd2>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a22      	ldr	r2, [pc, #136]	; (8006238 <HAL_TIM_PWM_Start+0x174>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d022      	beq.n	80061fa <HAL_TIM_PWM_Start+0x136>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d01d      	beq.n	80061fa <HAL_TIM_PWM_Start+0x136>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <HAL_TIM_PWM_Start+0x17c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d018      	beq.n	80061fa <HAL_TIM_PWM_Start+0x136>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <HAL_TIM_PWM_Start+0x180>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <HAL_TIM_PWM_Start+0x136>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1c      	ldr	r2, [pc, #112]	; (8006248 <HAL_TIM_PWM_Start+0x184>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00e      	beq.n	80061fa <HAL_TIM_PWM_Start+0x136>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a16      	ldr	r2, [pc, #88]	; (800623c <HAL_TIM_PWM_Start+0x178>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d009      	beq.n	80061fa <HAL_TIM_PWM_Start+0x136>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a18      	ldr	r2, [pc, #96]	; (800624c <HAL_TIM_PWM_Start+0x188>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_TIM_PWM_Start+0x136>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a16      	ldr	r2, [pc, #88]	; (8006250 <HAL_TIM_PWM_Start+0x18c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d111      	bne.n	800621e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b06      	cmp	r3, #6
 800620a:	d010      	beq.n	800622e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621c:	e007      	b.n	800622e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40010000 	.word	0x40010000
 800623c:	40010400 	.word	0x40010400
 8006240:	40000400 	.word	0x40000400
 8006244:	40000800 	.word	0x40000800
 8006248:	40000c00 	.word	0x40000c00
 800624c:	40014000 	.word	0x40014000
 8006250:	40001800 	.word	0x40001800

08006254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d122      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d11b      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0202 	mvn.w	r2, #2
 8006280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa77 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 800629c:	e005      	b.n	80062aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa69 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa7a 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d122      	bne.n	8006304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d11b      	bne.n	8006304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0204 	mvn.w	r2, #4
 80062d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa4d 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa3f 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa50 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b08      	cmp	r3, #8
 8006310:	d122      	bne.n	8006358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b08      	cmp	r3, #8
 800631e:	d11b      	bne.n	8006358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0208 	mvn.w	r2, #8
 8006328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2204      	movs	r2, #4
 800632e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa23 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 8006344:	e005      	b.n	8006352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fa15 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa26 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b10      	cmp	r3, #16
 8006364:	d122      	bne.n	80063ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	2b10      	cmp	r3, #16
 8006372:	d11b      	bne.n	80063ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0210 	mvn.w	r2, #16
 800637c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2208      	movs	r2, #8
 8006382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9f9 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 8006398:	e005      	b.n	80063a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f9eb 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f9fc 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d10e      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d107      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0201 	mvn.w	r2, #1
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fc fed8 	bl	8003188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d10e      	bne.n	8006404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f0:	2b80      	cmp	r3, #128	; 0x80
 80063f2:	d107      	bne.n	8006404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fd78 	bl	8006ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d10e      	bne.n	8006430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d107      	bne.n	8006430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9c1 	bl	80067b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d10e      	bne.n	800645c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b20      	cmp	r3, #32
 800644a:	d107      	bne.n	800645c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0220 	mvn.w	r2, #32
 8006454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fd42 	bl	8006ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800647e:	2302      	movs	r3, #2
 8006480:	e0ae      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b0c      	cmp	r3, #12
 800648e:	f200 809f 	bhi.w	80065d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064cd 	.word	0x080064cd
 800649c:	080065d1 	.word	0x080065d1
 80064a0:	080065d1 	.word	0x080065d1
 80064a4:	080065d1 	.word	0x080065d1
 80064a8:	0800650d 	.word	0x0800650d
 80064ac:	080065d1 	.word	0x080065d1
 80064b0:	080065d1 	.word	0x080065d1
 80064b4:	080065d1 	.word	0x080065d1
 80064b8:	0800654f 	.word	0x0800654f
 80064bc:	080065d1 	.word	0x080065d1
 80064c0:	080065d1 	.word	0x080065d1
 80064c4:	080065d1 	.word	0x080065d1
 80064c8:	0800658f 	.word	0x0800658f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fa18 	bl	8006908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0208 	orr.w	r2, r2, #8
 80064e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0204 	bic.w	r2, r2, #4
 80064f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6999      	ldr	r1, [r3, #24]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	619a      	str	r2, [r3, #24]
      break;
 800650a:	e064      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fa68 	bl	80069e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6999      	ldr	r1, [r3, #24]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	021a      	lsls	r2, r3, #8
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	619a      	str	r2, [r3, #24]
      break;
 800654c:	e043      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fabd 	bl	8006ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0208 	orr.w	r2, r2, #8
 8006568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0204 	bic.w	r2, r2, #4
 8006578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69d9      	ldr	r1, [r3, #28]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	61da      	str	r2, [r3, #28]
      break;
 800658c:	e023      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fb11 	bl	8006bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69d9      	ldr	r1, [r3, #28]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	021a      	lsls	r2, r3, #8
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	61da      	str	r2, [r3, #28]
      break;
 80065ce:	e002      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_TIM_ConfigClockSource+0x1c>
 8006600:	2302      	movs	r3, #2
 8006602:	e0b4      	b.n	800676e <HAL_TIM_ConfigClockSource+0x186>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800663c:	d03e      	beq.n	80066bc <HAL_TIM_ConfigClockSource+0xd4>
 800663e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006642:	f200 8087 	bhi.w	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664a:	f000 8086 	beq.w	800675a <HAL_TIM_ConfigClockSource+0x172>
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006652:	d87f      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006654:	2b70      	cmp	r3, #112	; 0x70
 8006656:	d01a      	beq.n	800668e <HAL_TIM_ConfigClockSource+0xa6>
 8006658:	2b70      	cmp	r3, #112	; 0x70
 800665a:	d87b      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 800665c:	2b60      	cmp	r3, #96	; 0x60
 800665e:	d050      	beq.n	8006702 <HAL_TIM_ConfigClockSource+0x11a>
 8006660:	2b60      	cmp	r3, #96	; 0x60
 8006662:	d877      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006664:	2b50      	cmp	r3, #80	; 0x50
 8006666:	d03c      	beq.n	80066e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006668:	2b50      	cmp	r3, #80	; 0x50
 800666a:	d873      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d058      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0x13a>
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d86f      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d064      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x15a>
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d86b      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d060      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x15a>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d867      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d05c      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x15a>
 8006688:	2b10      	cmp	r3, #16
 800668a:	d05a      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x15a>
 800668c:	e062      	b.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6899      	ldr	r1, [r3, #8]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f000 fb5d 	bl	8006d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	609a      	str	r2, [r3, #8]
      break;
 80066ba:	e04f      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	6899      	ldr	r1, [r3, #8]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f000 fb46 	bl	8006d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066de:	609a      	str	r2, [r3, #8]
      break;
 80066e0:	e03c      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	6859      	ldr	r1, [r3, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	461a      	mov	r2, r3
 80066f0:	f000 faba 	bl	8006c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2150      	movs	r1, #80	; 0x50
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fb13 	bl	8006d26 <TIM_ITRx_SetConfig>
      break;
 8006700:	e02c      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	6859      	ldr	r1, [r3, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	461a      	mov	r2, r3
 8006710:	f000 fad9 	bl	8006cc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2160      	movs	r1, #96	; 0x60
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fb03 	bl	8006d26 <TIM_ITRx_SetConfig>
      break;
 8006720:	e01c      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6859      	ldr	r1, [r3, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	461a      	mov	r2, r3
 8006730:	f000 fa9a 	bl	8006c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2140      	movs	r1, #64	; 0x40
 800673a:	4618      	mov	r0, r3
 800673c:	f000 faf3 	bl	8006d26 <TIM_ITRx_SetConfig>
      break;
 8006740:	e00c      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f000 faea 	bl	8006d26 <TIM_ITRx_SetConfig>
      break;
 8006752:	e003      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]
      break;
 8006758:	e000      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800675a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a40      	ldr	r2, [pc, #256]	; (80068dc <TIM_Base_SetConfig+0x114>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e6:	d00f      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3d      	ldr	r2, [pc, #244]	; (80068e0 <TIM_Base_SetConfig+0x118>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00b      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a3c      	ldr	r2, [pc, #240]	; (80068e4 <TIM_Base_SetConfig+0x11c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a3b      	ldr	r2, [pc, #236]	; (80068e8 <TIM_Base_SetConfig+0x120>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a3a      	ldr	r2, [pc, #232]	; (80068ec <TIM_Base_SetConfig+0x124>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d108      	bne.n	800681a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2f      	ldr	r2, [pc, #188]	; (80068dc <TIM_Base_SetConfig+0x114>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d02b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006828:	d027      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2c      	ldr	r2, [pc, #176]	; (80068e0 <TIM_Base_SetConfig+0x118>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d023      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2b      	ldr	r2, [pc, #172]	; (80068e4 <TIM_Base_SetConfig+0x11c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d01f      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a2a      	ldr	r2, [pc, #168]	; (80068e8 <TIM_Base_SetConfig+0x120>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a29      	ldr	r2, [pc, #164]	; (80068ec <TIM_Base_SetConfig+0x124>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d017      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a28      	ldr	r2, [pc, #160]	; (80068f0 <TIM_Base_SetConfig+0x128>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a27      	ldr	r2, [pc, #156]	; (80068f4 <TIM_Base_SetConfig+0x12c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00f      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a26      	ldr	r2, [pc, #152]	; (80068f8 <TIM_Base_SetConfig+0x130>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a25      	ldr	r2, [pc, #148]	; (80068fc <TIM_Base_SetConfig+0x134>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d007      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a24      	ldr	r2, [pc, #144]	; (8006900 <TIM_Base_SetConfig+0x138>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d003      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a23      	ldr	r2, [pc, #140]	; (8006904 <TIM_Base_SetConfig+0x13c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d108      	bne.n	800688c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <TIM_Base_SetConfig+0x114>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_Base_SetConfig+0xf8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a0c      	ldr	r2, [pc, #48]	; (80068ec <TIM_Base_SetConfig+0x124>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d103      	bne.n	80068c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	615a      	str	r2, [r3, #20]
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40000c00 	.word	0x40000c00
 80068ec:	40010400 	.word	0x40010400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800
 80068fc:	40001800 	.word	0x40001800
 8006900:	40001c00 	.word	0x40001c00
 8006904:	40002000 	.word	0x40002000

08006908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f023 0302 	bic.w	r3, r3, #2
 8006950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a20      	ldr	r2, [pc, #128]	; (80069e0 <TIM_OC1_SetConfig+0xd8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_OC1_SetConfig+0x64>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <TIM_OC1_SetConfig+0xdc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d10c      	bne.n	8006986 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 0308 	bic.w	r3, r3, #8
 8006972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 0304 	bic.w	r3, r3, #4
 8006984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <TIM_OC1_SetConfig+0xd8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_OC1_SetConfig+0x8e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <TIM_OC1_SetConfig+0xdc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d111      	bne.n	80069ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800699c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	621a      	str	r2, [r3, #32]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40010400 	.word	0x40010400

080069e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f023 0210 	bic.w	r2, r3, #16
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	021b      	lsls	r3, r3, #8
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f023 0320 	bic.w	r3, r3, #32
 8006a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a22      	ldr	r2, [pc, #136]	; (8006acc <TIM_OC2_SetConfig+0xe4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_OC2_SetConfig+0x68>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <TIM_OC2_SetConfig+0xe8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10d      	bne.n	8006a6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a17      	ldr	r2, [pc, #92]	; (8006acc <TIM_OC2_SetConfig+0xe4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <TIM_OC2_SetConfig+0x94>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <TIM_OC2_SetConfig+0xe8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d113      	bne.n	8006aa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40010000 	.word	0x40010000
 8006ad0:	40010400 	.word	0x40010400

08006ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a21      	ldr	r2, [pc, #132]	; (8006bb4 <TIM_OC3_SetConfig+0xe0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d003      	beq.n	8006b3a <TIM_OC3_SetConfig+0x66>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a20      	ldr	r2, [pc, #128]	; (8006bb8 <TIM_OC3_SetConfig+0xe4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d10d      	bne.n	8006b56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a16      	ldr	r2, [pc, #88]	; (8006bb4 <TIM_OC3_SetConfig+0xe0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_OC3_SetConfig+0x92>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <TIM_OC3_SetConfig+0xe4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d113      	bne.n	8006b8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40010400 	.word	0x40010400

08006bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	031b      	lsls	r3, r3, #12
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a12      	ldr	r2, [pc, #72]	; (8006c60 <TIM_OC4_SetConfig+0xa4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_OC4_SetConfig+0x68>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a11      	ldr	r2, [pc, #68]	; (8006c64 <TIM_OC4_SetConfig+0xa8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d109      	bne.n	8006c38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	019b      	lsls	r3, r3, #6
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40010400 	.word	0x40010400

08006c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f023 0201 	bic.w	r2, r3, #1
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f023 030a 	bic.w	r3, r3, #10
 8006ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b087      	sub	sp, #28
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0210 	bic.w	r2, r3, #16
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f043 0307 	orr.w	r3, r3, #7
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	021a      	lsls	r2, r3, #8
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	609a      	str	r2, [r3, #8]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	2201      	movs	r2, #1
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e05a      	b.n	8006eb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a21      	ldr	r2, [pc, #132]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d022      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4c:	d01d      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d018      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1b      	ldr	r2, [pc, #108]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a15      	ldr	r2, [pc, #84]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d10c      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40010000 	.word	0x40010000
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40000800 	.word	0x40000800
 8006ed0:	40000c00 	.word	0x40000c00
 8006ed4:	40010400 	.word	0x40010400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40001800 	.word	0x40001800

08006ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e03f      	b.n	8006f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fd f952 	bl	80041d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2224      	movs	r2, #36	; 0x24
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 ff43 	bl	8007dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695a      	ldr	r2, [r3, #20]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08c      	sub	sp, #48	; 0x30
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d165      	bne.n	800708a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_UART_Transmit_DMA+0x26>
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e05e      	b.n	800708c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_UART_Transmit_DMA+0x38>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e057      	b.n	800708c <HAL_UART_Transmit_DMA+0xe8>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	88fa      	ldrh	r2, [r7, #6]
 8006fee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2221      	movs	r2, #33	; 0x21
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	4a22      	ldr	r2, [pc, #136]	; (8007094 <HAL_UART_Transmit_DMA+0xf0>)
 800700a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007010:	4a21      	ldr	r2, [pc, #132]	; (8007098 <HAL_UART_Transmit_DMA+0xf4>)
 8007012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	4a20      	ldr	r2, [pc, #128]	; (800709c <HAL_UART_Transmit_DMA+0xf8>)
 800701a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007020:	2200      	movs	r2, #0
 8007022:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007024:	f107 0308 	add.w	r3, r7, #8
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	6819      	ldr	r1, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3304      	adds	r3, #4
 8007038:	461a      	mov	r2, r3
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	f7fd fcd4 	bl	80049e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007048:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3314      	adds	r3, #20
 8007058:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	617b      	str	r3, [r7, #20]
   return(result);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007068:	62bb      	str	r3, [r7, #40]	; 0x28
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3314      	adds	r3, #20
 8007070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007072:	627a      	str	r2, [r7, #36]	; 0x24
 8007074:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6a39      	ldr	r1, [r7, #32]
 8007078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e000      	b.n	800708c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800708a:	2302      	movs	r3, #2
  }
}
 800708c:	4618      	mov	r0, r3
 800708e:	3730      	adds	r7, #48	; 0x30
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	08007671 	.word	0x08007671
 8007098:	0800770b 	.word	0x0800770b
 800709c:	08007883 	.word	0x08007883

080070a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	d11d      	bne.n	80070f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_UART_Receive_DMA+0x26>
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e016      	b.n	80070f8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_UART_Receive_DMA+0x38>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e00f      	b.n	80070f8 <HAL_UART_Receive_DMA+0x58>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	461a      	mov	r2, r3
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fc13 	bl	8007918 <UART_Start_Receive_DMA>
 80070f2:	4603      	mov	r3, r0
 80070f4:	e000      	b.n	80070f8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b0ba      	sub	sp, #232	; 0xe8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007126:	2300      	movs	r3, #0
 8007128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800712c:	2300      	movs	r3, #0
 800712e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800713e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10f      	bne.n	8007166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <HAL_UART_IRQHandler+0x66>
 8007152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fd7f 	bl	8007c62 <UART_Receive_IT>
      return;
 8007164:	e256      	b.n	8007614 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 80de 	beq.w	800732c <HAL_UART_IRQHandler+0x22c>
 8007170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007180:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80d1 	beq.w	800732c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800718a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <HAL_UART_IRQHandler+0xae>
 8007196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800719a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f043 0201 	orr.w	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_UART_IRQHandler+0xd2>
 80071ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f043 0202 	orr.w	r2, r3, #2
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <HAL_UART_IRQHandler+0xf6>
 80071de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f043 0204 	orr.w	r2, r3, #4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d011      	beq.n	8007226 <HAL_UART_IRQHandler+0x126>
 8007202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800720e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f043 0208 	orr.w	r2, r3, #8
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 81ed 	beq.w	800760a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <HAL_UART_IRQHandler+0x14e>
 800723c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fd0a 	bl	8007c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	bf0c      	ite	eq
 800725c:	2301      	moveq	r3, #1
 800725e:	2300      	movne	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d103      	bne.n	800727a <HAL_UART_IRQHandler+0x17a>
 8007272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04f      	beq.n	800731a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fc12 	bl	8007aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d141      	bne.n	8007312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3314      	adds	r3, #20
 8007294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3314      	adds	r3, #20
 80072b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1d9      	bne.n	800728e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d013      	beq.n	800730a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	4a7d      	ldr	r2, [pc, #500]	; (80074dc <HAL_UART_IRQHandler+0x3dc>)
 80072e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fd fc42 	bl	8004b78 <HAL_DMA_Abort_IT>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d016      	beq.n	8007328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007304:	4610      	mov	r0, r2
 8007306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007308:	e00e      	b.n	8007328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f99a 	bl	8007644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	e00a      	b.n	8007328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f996 	bl	8007644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	e006      	b.n	8007328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f992 	bl	8007644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007326:	e170      	b.n	800760a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	bf00      	nop
    return;
 800732a:	e16e      	b.n	800760a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	2b01      	cmp	r3, #1
 8007332:	f040 814a 	bne.w	80075ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8143 	beq.w	80075ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 813c 	beq.w	80075ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007352:	2300      	movs	r3, #0
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	f040 80b4 	bne.w	80074e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8140 	beq.w	800760e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007396:	429a      	cmp	r2, r3
 8007398:	f080 8139 	bcs.w	800760e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ae:	f000 8088 	beq.w	80074c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	330c      	adds	r3, #12
 80073b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1d9      	bne.n	80073b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3314      	adds	r3, #20
 8007404:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800740e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3314      	adds	r3, #20
 800741e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007422:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007426:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800742a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e1      	bne.n	80073fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3314      	adds	r3, #20
 8007440:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800744a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800744c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3314      	adds	r3, #20
 800745a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800745e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007460:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007464:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800746c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e3      	bne.n	800743a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80074a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e3      	bne.n	8007480 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fd faeb 	bl	8004a98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8c0 	bl	8007658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074d8:	e099      	b.n	800760e <HAL_UART_IRQHandler+0x50e>
 80074da:	bf00      	nop
 80074dc:	08007b6b 	.word	0x08007b6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 808b 	beq.w	8007612 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8086 	beq.w	8007612 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	330c      	adds	r3, #12
 800750c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800751c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800752a:	647a      	str	r2, [r7, #68]	; 0x44
 800752c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e3      	bne.n	8007506 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3314      	adds	r3, #20
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	623b      	str	r3, [r7, #32]
   return(result);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007562:	633a      	str	r2, [r7, #48]	; 0x30
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	330c      	adds	r3, #12
 800758a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	60fb      	str	r3, [r7, #12]
   return(result);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0310 	bic.w	r3, r3, #16
 800759a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	330c      	adds	r3, #12
 80075a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075a8:	61fa      	str	r2, [r7, #28]
 80075aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	69b9      	ldr	r1, [r7, #24]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	617b      	str	r3, [r7, #20]
   return(result);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e3      	bne.n	8007584 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f848 	bl	8007658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075c8:	e023      	b.n	8007612 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <HAL_UART_IRQHandler+0x4ea>
 80075d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fad5 	bl	8007b92 <UART_Transmit_IT>
    return;
 80075e8:	e014      	b.n	8007614 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00e      	beq.n	8007614 <HAL_UART_IRQHandler+0x514>
 80075f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d008      	beq.n	8007614 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb15 	bl	8007c32 <UART_EndTransmit_IT>
    return;
 8007608:	e004      	b.n	8007614 <HAL_UART_IRQHandler+0x514>
    return;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <HAL_UART_IRQHandler+0x514>
      return;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <HAL_UART_IRQHandler+0x514>
      return;
 8007612:	bf00      	nop
  }
}
 8007614:	37e8      	adds	r7, #232	; 0xe8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop

0800761c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b090      	sub	sp, #64	; 0x40
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007688:	2b00      	cmp	r3, #0
 800768a:	d137      	bne.n	80076fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800768c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768e:	2200      	movs	r2, #0
 8007690:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3314      	adds	r3, #20
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	623b      	str	r3, [r7, #32]
   return(result);
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3314      	adds	r3, #20
 80076b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b2:	633a      	str	r2, [r7, #48]	; 0x30
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	330c      	adds	r3, #12
 80076cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
 80076de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	330c      	adds	r3, #12
 80076e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076e6:	61fa      	str	r2, [r7, #28]
 80076e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	69b9      	ldr	r1, [r7, #24]
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	617b      	str	r3, [r7, #20]
   return(result);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076fa:	e002      	b.n	8007702 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076fe:	f7fb fdf9 	bl	80032f4 <HAL_UART_TxCpltCallback>
}
 8007702:	bf00      	nop
 8007704:	3740      	adds	r7, #64	; 0x40
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f7ff ff7f 	bl	800761c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b09c      	sub	sp, #112	; 0x70
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d172      	bne.n	8007828 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007744:	2200      	movs	r2, #0
 8007746:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	330c      	adds	r3, #12
 800774e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007768:	65ba      	str	r2, [r7, #88]	; 0x58
 800776a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800776e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e5      	bne.n	8007748 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	f023 0301 	bic.w	r3, r3, #1
 8007792:	667b      	str	r3, [r7, #100]	; 0x64
 8007794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3314      	adds	r3, #20
 800779a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800779c:	647a      	str	r2, [r7, #68]	; 0x44
 800779e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e5      	bne.n	800777c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3314      	adds	r3, #20
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	623b      	str	r3, [r7, #32]
   return(result);
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c6:	663b      	str	r3, [r7, #96]	; 0x60
 80077c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3314      	adds	r3, #20
 80077ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077d0:	633a      	str	r2, [r7, #48]	; 0x30
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e5      	bne.n	80077b0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d119      	bne.n	8007828 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	330c      	adds	r3, #12
 80077fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	60fb      	str	r3, [r7, #12]
   return(result);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0310 	bic.w	r3, r3, #16
 800780a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800780c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007814:	61fa      	str	r2, [r7, #28]
 8007816:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	69b9      	ldr	r1, [r7, #24]
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	617b      	str	r3, [r7, #20]
   return(result);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e5      	bne.n	80077f4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	2b01      	cmp	r3, #1
 800782e:	d106      	bne.n	800783e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007832:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007834:	4619      	mov	r1, r3
 8007836:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007838:	f7ff ff0e 	bl	8007658 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800783c:	e002      	b.n	8007844 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800783e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007840:	f7fb fd6a 	bl	8003318 <HAL_UART_RxCpltCallback>
}
 8007844:	bf00      	nop
 8007846:	3770      	adds	r7, #112	; 0x70
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	2b01      	cmp	r3, #1
 8007860:	d108      	bne.n	8007874 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007866:	085b      	lsrs	r3, r3, #1
 8007868:	b29b      	uxth	r3, r3
 800786a:	4619      	mov	r1, r3
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f7ff fef3 	bl	8007658 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007872:	e002      	b.n	800787a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff fedb 	bl	8007630 <HAL_UART_RxHalfCpltCallback>
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789e:	2b80      	cmp	r3, #128	; 0x80
 80078a0:	bf0c      	ite	eq
 80078a2:	2301      	moveq	r3, #1
 80078a4:	2300      	movne	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b21      	cmp	r3, #33	; 0x21
 80078b4:	d108      	bne.n	80078c8 <UART_DMAError+0x46>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80078c2:	68b8      	ldr	r0, [r7, #8]
 80078c4:	f000 f8c6 	bl	8007a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	bf0c      	ite	eq
 80078d6:	2301      	moveq	r3, #1
 80078d8:	2300      	movne	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b22      	cmp	r3, #34	; 0x22
 80078e8:	d108      	bne.n	80078fc <UART_DMAError+0x7a>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80078f6:	68b8      	ldr	r0, [r7, #8]
 80078f8:	f000 f8d4 	bl	8007aa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f043 0210 	orr.w	r2, r3, #16
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007908:	68b8      	ldr	r0, [r7, #8]
 800790a:	f7ff fe9b 	bl	8007644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b098      	sub	sp, #96	; 0x60
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2222      	movs	r2, #34	; 0x22
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	4a40      	ldr	r2, [pc, #256]	; (8007a48 <UART_Start_Receive_DMA+0x130>)
 8007946:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	4a3f      	ldr	r2, [pc, #252]	; (8007a4c <UART_Start_Receive_DMA+0x134>)
 800794e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	4a3e      	ldr	r2, [pc, #248]	; (8007a50 <UART_Start_Receive_DMA+0x138>)
 8007956:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	2200      	movs	r2, #0
 800795e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007960:	f107 0308 	add.w	r3, r7, #8
 8007964:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3304      	adds	r3, #4
 8007970:	4619      	mov	r1, r3
 8007972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	88fb      	ldrh	r3, [r7, #6]
 8007978:	f7fd f836 	bl	80049e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800797c:	2300      	movs	r3, #0
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	613b      	str	r3, [r7, #16]
 8007990:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d019      	beq.n	80079d6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80079c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80079c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80079d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e5      	bne.n	80079a2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3314      	adds	r3, #20
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	f043 0301 	orr.w	r3, r3, #1
 80079ec:	657b      	str	r3, [r7, #84]	; 0x54
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3314      	adds	r3, #20
 80079f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e5      	bne.n	80079d6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a20:	653b      	str	r3, [r7, #80]	; 0x50
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3314      	adds	r3, #20
 8007a28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a2a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6a39      	ldr	r1, [r7, #32]
 8007a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e5      	bne.n	8007a0a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3760      	adds	r7, #96	; 0x60
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	08007727 	.word	0x08007727
 8007a4c:	0800784d 	.word	0x0800784d
 8007a50:	08007883 	.word	0x08007883

08007a54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b089      	sub	sp, #36	; 0x24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	61ba      	str	r2, [r7, #24]
 8007a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6979      	ldr	r1, [r7, #20]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007a98:	bf00      	nop
 8007a9a:	3724      	adds	r7, #36	; 0x24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b095      	sub	sp, #84	; 0x54
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007acc:	643a      	str	r2, [r7, #64]	; 0x40
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e5      	bne.n	8007aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3314      	adds	r3, #20
 8007ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	f023 0301 	bic.w	r3, r3, #1
 8007af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3314      	adds	r3, #20
 8007afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e5      	bne.n	8007ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d119      	bne.n	8007b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f023 0310 	bic.w	r3, r3, #16
 8007b32:	647b      	str	r3, [r7, #68]	; 0x44
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	330c      	adds	r3, #12
 8007b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b3c:	61ba      	str	r2, [r7, #24]
 8007b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6979      	ldr	r1, [r7, #20]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	613b      	str	r3, [r7, #16]
   return(result);
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e5      	bne.n	8007b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b5e:	bf00      	nop
 8007b60:	3754      	adds	r7, #84	; 0x54
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f7ff fd5d 	bl	8007644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b21      	cmp	r3, #33	; 0x21
 8007ba4:	d13e      	bne.n	8007c24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	d114      	bne.n	8007bda <UART_Transmit_IT+0x48>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d110      	bne.n	8007bda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	1c9a      	adds	r2, r3, #2
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	621a      	str	r2, [r3, #32]
 8007bd8:	e008      	b.n	8007bec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	1c59      	adds	r1, r3, #1
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6211      	str	r1, [r2, #32]
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10f      	bne.n	8007c20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c24:	2302      	movs	r3, #2
  }
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7fb fb4e 	bl	80032f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b08c      	sub	sp, #48	; 0x30
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b22      	cmp	r3, #34	; 0x22
 8007c74:	f040 80ab 	bne.w	8007dce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c80:	d117      	bne.n	8007cb2 <UART_Receive_IT+0x50>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d113      	bne.n	8007cb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	1c9a      	adds	r2, r3, #2
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28
 8007cb0:	e026      	b.n	8007d00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc4:	d007      	beq.n	8007cd6 <UART_Receive_IT+0x74>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10a      	bne.n	8007ce4 <UART_Receive_IT+0x82>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d106      	bne.n	8007ce4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	e008      	b.n	8007cf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d15a      	bne.n	8007dca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0220 	bic.w	r2, r2, #32
 8007d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0201 	bic.w	r2, r2, #1
 8007d42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d135      	bne.n	8007dc0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f023 0310 	bic.w	r3, r3, #16
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7a:	623a      	str	r2, [r7, #32]
 8007d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	69f9      	ldr	r1, [r7, #28]
 8007d80:	6a3a      	ldr	r2, [r7, #32]
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e5      	bne.n	8007d5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b10      	cmp	r3, #16
 8007d9a:	d10a      	bne.n	8007db2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff fc4d 	bl	8007658 <HAL_UARTEx_RxEventCallback>
 8007dbe:	e002      	b.n	8007dc6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7fb faa9 	bl	8003318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e002      	b.n	8007dd0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e000      	b.n	8007dd0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007dce:	2302      	movs	r3, #2
  }
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3730      	adds	r7, #48	; 0x30
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ddc:	b0c0      	sub	sp, #256	; 0x100
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df4:	68d9      	ldr	r1, [r3, #12]
 8007df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	ea40 0301 	orr.w	r3, r0, r1
 8007e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	431a      	orrs	r2, r3
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e30:	f021 010c 	bic.w	r1, r1, #12
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e52:	6999      	ldr	r1, [r3, #24]
 8007e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	ea40 0301 	orr.w	r3, r0, r1
 8007e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	4b8f      	ldr	r3, [pc, #572]	; (80080a4 <UART_SetConfig+0x2cc>)
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d005      	beq.n	8007e78 <UART_SetConfig+0xa0>
 8007e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4b8d      	ldr	r3, [pc, #564]	; (80080a8 <UART_SetConfig+0x2d0>)
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d104      	bne.n	8007e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e78:	f7fd ff8e 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 8007e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e80:	e003      	b.n	8007e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e82:	f7fd ff75 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8007e86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e94:	f040 810c 	bne.w	80080b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007eaa:	4622      	mov	r2, r4
 8007eac:	462b      	mov	r3, r5
 8007eae:	1891      	adds	r1, r2, r2
 8007eb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007eb2:	415b      	adcs	r3, r3
 8007eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007eba:	4621      	mov	r1, r4
 8007ebc:	eb12 0801 	adds.w	r8, r2, r1
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	eb43 0901 	adc.w	r9, r3, r1
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	f04f 0300 	mov.w	r3, #0
 8007ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007eda:	4690      	mov	r8, r2
 8007edc:	4699      	mov	r9, r3
 8007ede:	4623      	mov	r3, r4
 8007ee0:	eb18 0303 	adds.w	r3, r8, r3
 8007ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ee8:	462b      	mov	r3, r5
 8007eea:	eb49 0303 	adc.w	r3, r9, r3
 8007eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007efe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f06:	460b      	mov	r3, r1
 8007f08:	18db      	adds	r3, r3, r3
 8007f0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	eb42 0303 	adc.w	r3, r2, r3
 8007f12:	657b      	str	r3, [r7, #84]	; 0x54
 8007f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f1c:	f7f8 fda2 	bl	8000a64 <__aeabi_uldivmod>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4b61      	ldr	r3, [pc, #388]	; (80080ac <UART_SetConfig+0x2d4>)
 8007f26:	fba3 2302 	umull	r2, r3, r3, r2
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	011c      	lsls	r4, r3, #4
 8007f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f40:	4642      	mov	r2, r8
 8007f42:	464b      	mov	r3, r9
 8007f44:	1891      	adds	r1, r2, r2
 8007f46:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f48:	415b      	adcs	r3, r3
 8007f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f50:	4641      	mov	r1, r8
 8007f52:	eb12 0a01 	adds.w	sl, r2, r1
 8007f56:	4649      	mov	r1, r9
 8007f58:	eb43 0b01 	adc.w	fp, r3, r1
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f70:	4692      	mov	sl, r2
 8007f72:	469b      	mov	fp, r3
 8007f74:	4643      	mov	r3, r8
 8007f76:	eb1a 0303 	adds.w	r3, sl, r3
 8007f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	eb4b 0303 	adc.w	r3, fp, r3
 8007f84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	18db      	adds	r3, r3, r3
 8007fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	eb42 0303 	adc.w	r3, r2, r3
 8007fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8007faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007fb2:	f7f8 fd57 	bl	8000a64 <__aeabi_uldivmod>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4b3b      	ldr	r3, [pc, #236]	; (80080ac <UART_SetConfig+0x2d4>)
 8007fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	2264      	movs	r2, #100	; 0x64
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
 8007fca:	1acb      	subs	r3, r1, r3
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007fd2:	4b36      	ldr	r3, [pc, #216]	; (80080ac <UART_SetConfig+0x2d4>)
 8007fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fe0:	441c      	add	r4, r3
 8007fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	1891      	adds	r1, r2, r2
 8007ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ffc:	415b      	adcs	r3, r3
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008004:	4641      	mov	r1, r8
 8008006:	1851      	adds	r1, r2, r1
 8008008:	6339      	str	r1, [r7, #48]	; 0x30
 800800a:	4649      	mov	r1, r9
 800800c:	414b      	adcs	r3, r1
 800800e:	637b      	str	r3, [r7, #52]	; 0x34
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800801c:	4659      	mov	r1, fp
 800801e:	00cb      	lsls	r3, r1, #3
 8008020:	4651      	mov	r1, sl
 8008022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008026:	4651      	mov	r1, sl
 8008028:	00ca      	lsls	r2, r1, #3
 800802a:	4610      	mov	r0, r2
 800802c:	4619      	mov	r1, r3
 800802e:	4603      	mov	r3, r0
 8008030:	4642      	mov	r2, r8
 8008032:	189b      	adds	r3, r3, r2
 8008034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008038:	464b      	mov	r3, r9
 800803a:	460a      	mov	r2, r1
 800803c:	eb42 0303 	adc.w	r3, r2, r3
 8008040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008050:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008058:	460b      	mov	r3, r1
 800805a:	18db      	adds	r3, r3, r3
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
 800805e:	4613      	mov	r3, r2
 8008060:	eb42 0303 	adc.w	r3, r2, r3
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800806a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800806e:	f7f8 fcf9 	bl	8000a64 <__aeabi_uldivmod>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <UART_SetConfig+0x2d4>)
 8008078:	fba3 1302 	umull	r1, r3, r3, r2
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	2164      	movs	r1, #100	; 0x64
 8008080:	fb01 f303 	mul.w	r3, r1, r3
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	3332      	adds	r3, #50	; 0x32
 800808a:	4a08      	ldr	r2, [pc, #32]	; (80080ac <UART_SetConfig+0x2d4>)
 800808c:	fba2 2303 	umull	r2, r3, r2, r3
 8008090:	095b      	lsrs	r3, r3, #5
 8008092:	f003 0207 	and.w	r2, r3, #7
 8008096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4422      	add	r2, r4
 800809e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080a0:	e106      	b.n	80082b0 <UART_SetConfig+0x4d8>
 80080a2:	bf00      	nop
 80080a4:	40011000 	.word	0x40011000
 80080a8:	40011400 	.word	0x40011400
 80080ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080b4:	2200      	movs	r2, #0
 80080b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80080c2:	4642      	mov	r2, r8
 80080c4:	464b      	mov	r3, r9
 80080c6:	1891      	adds	r1, r2, r2
 80080c8:	6239      	str	r1, [r7, #32]
 80080ca:	415b      	adcs	r3, r3
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
 80080ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080d2:	4641      	mov	r1, r8
 80080d4:	1854      	adds	r4, r2, r1
 80080d6:	4649      	mov	r1, r9
 80080d8:	eb43 0501 	adc.w	r5, r3, r1
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	00eb      	lsls	r3, r5, #3
 80080e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ea:	00e2      	lsls	r2, r4, #3
 80080ec:	4614      	mov	r4, r2
 80080ee:	461d      	mov	r5, r3
 80080f0:	4643      	mov	r3, r8
 80080f2:	18e3      	adds	r3, r4, r3
 80080f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080f8:	464b      	mov	r3, r9
 80080fa:	eb45 0303 	adc.w	r3, r5, r3
 80080fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800810e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008112:	f04f 0200 	mov.w	r2, #0
 8008116:	f04f 0300 	mov.w	r3, #0
 800811a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800811e:	4629      	mov	r1, r5
 8008120:	008b      	lsls	r3, r1, #2
 8008122:	4621      	mov	r1, r4
 8008124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008128:	4621      	mov	r1, r4
 800812a:	008a      	lsls	r2, r1, #2
 800812c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008130:	f7f8 fc98 	bl	8000a64 <__aeabi_uldivmod>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4b60      	ldr	r3, [pc, #384]	; (80082bc <UART_SetConfig+0x4e4>)
 800813a:	fba3 2302 	umull	r2, r3, r3, r2
 800813e:	095b      	lsrs	r3, r3, #5
 8008140:	011c      	lsls	r4, r3, #4
 8008142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008146:	2200      	movs	r2, #0
 8008148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800814c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008154:	4642      	mov	r2, r8
 8008156:	464b      	mov	r3, r9
 8008158:	1891      	adds	r1, r2, r2
 800815a:	61b9      	str	r1, [r7, #24]
 800815c:	415b      	adcs	r3, r3
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008164:	4641      	mov	r1, r8
 8008166:	1851      	adds	r1, r2, r1
 8008168:	6139      	str	r1, [r7, #16]
 800816a:	4649      	mov	r1, r9
 800816c:	414b      	adcs	r3, r1
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	f04f 0200 	mov.w	r2, #0
 8008174:	f04f 0300 	mov.w	r3, #0
 8008178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800817c:	4659      	mov	r1, fp
 800817e:	00cb      	lsls	r3, r1, #3
 8008180:	4651      	mov	r1, sl
 8008182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008186:	4651      	mov	r1, sl
 8008188:	00ca      	lsls	r2, r1, #3
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	4603      	mov	r3, r0
 8008190:	4642      	mov	r2, r8
 8008192:	189b      	adds	r3, r3, r2
 8008194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008198:	464b      	mov	r3, r9
 800819a:	460a      	mov	r2, r1
 800819c:	eb42 0303 	adc.w	r3, r2, r3
 80081a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80081ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80081bc:	4649      	mov	r1, r9
 80081be:	008b      	lsls	r3, r1, #2
 80081c0:	4641      	mov	r1, r8
 80081c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081c6:	4641      	mov	r1, r8
 80081c8:	008a      	lsls	r2, r1, #2
 80081ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80081ce:	f7f8 fc49 	bl	8000a64 <__aeabi_uldivmod>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4611      	mov	r1, r2
 80081d8:	4b38      	ldr	r3, [pc, #224]	; (80082bc <UART_SetConfig+0x4e4>)
 80081da:	fba3 2301 	umull	r2, r3, r3, r1
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	2264      	movs	r2, #100	; 0x64
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	1acb      	subs	r3, r1, r3
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	3332      	adds	r3, #50	; 0x32
 80081ec:	4a33      	ldr	r2, [pc, #204]	; (80082bc <UART_SetConfig+0x4e4>)
 80081ee:	fba2 2303 	umull	r2, r3, r2, r3
 80081f2:	095b      	lsrs	r3, r3, #5
 80081f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081f8:	441c      	add	r4, r3
 80081fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081fe:	2200      	movs	r2, #0
 8008200:	673b      	str	r3, [r7, #112]	; 0x70
 8008202:	677a      	str	r2, [r7, #116]	; 0x74
 8008204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008208:	4642      	mov	r2, r8
 800820a:	464b      	mov	r3, r9
 800820c:	1891      	adds	r1, r2, r2
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	415b      	adcs	r3, r3
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008218:	4641      	mov	r1, r8
 800821a:	1851      	adds	r1, r2, r1
 800821c:	6039      	str	r1, [r7, #0]
 800821e:	4649      	mov	r1, r9
 8008220:	414b      	adcs	r3, r1
 8008222:	607b      	str	r3, [r7, #4]
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008230:	4659      	mov	r1, fp
 8008232:	00cb      	lsls	r3, r1, #3
 8008234:	4651      	mov	r1, sl
 8008236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800823a:	4651      	mov	r1, sl
 800823c:	00ca      	lsls	r2, r1, #3
 800823e:	4610      	mov	r0, r2
 8008240:	4619      	mov	r1, r3
 8008242:	4603      	mov	r3, r0
 8008244:	4642      	mov	r2, r8
 8008246:	189b      	adds	r3, r3, r2
 8008248:	66bb      	str	r3, [r7, #104]	; 0x68
 800824a:	464b      	mov	r3, r9
 800824c:	460a      	mov	r2, r1
 800824e:	eb42 0303 	adc.w	r3, r2, r3
 8008252:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	663b      	str	r3, [r7, #96]	; 0x60
 800825e:	667a      	str	r2, [r7, #100]	; 0x64
 8008260:	f04f 0200 	mov.w	r2, #0
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800826c:	4649      	mov	r1, r9
 800826e:	008b      	lsls	r3, r1, #2
 8008270:	4641      	mov	r1, r8
 8008272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008276:	4641      	mov	r1, r8
 8008278:	008a      	lsls	r2, r1, #2
 800827a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800827e:	f7f8 fbf1 	bl	8000a64 <__aeabi_uldivmod>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4b0d      	ldr	r3, [pc, #52]	; (80082bc <UART_SetConfig+0x4e4>)
 8008288:	fba3 1302 	umull	r1, r3, r3, r2
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	2164      	movs	r1, #100	; 0x64
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	011b      	lsls	r3, r3, #4
 8008298:	3332      	adds	r3, #50	; 0x32
 800829a:	4a08      	ldr	r2, [pc, #32]	; (80082bc <UART_SetConfig+0x4e4>)
 800829c:	fba2 2303 	umull	r2, r3, r2, r3
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	f003 020f 	and.w	r2, r3, #15
 80082a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4422      	add	r2, r4
 80082ae:	609a      	str	r2, [r3, #8]
}
 80082b0:	bf00      	nop
 80082b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80082b6:	46bd      	mov	sp, r7
 80082b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082bc:	51eb851f 	.word	0x51eb851f

080082c0 <realloc>:
 80082c0:	4b02      	ldr	r3, [pc, #8]	; (80082cc <realloc+0xc>)
 80082c2:	460a      	mov	r2, r1
 80082c4:	4601      	mov	r1, r0
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	f000 b802 	b.w	80082d0 <_realloc_r>
 80082cc:	20000058 	.word	0x20000058

080082d0 <_realloc_r>:
 80082d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d4:	4680      	mov	r8, r0
 80082d6:	4614      	mov	r4, r2
 80082d8:	460e      	mov	r6, r1
 80082da:	b921      	cbnz	r1, 80082e6 <_realloc_r+0x16>
 80082dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e0:	4611      	mov	r1, r2
 80082e2:	f000 b8d3 	b.w	800848c <_malloc_r>
 80082e6:	b92a      	cbnz	r2, 80082f4 <_realloc_r+0x24>
 80082e8:	f000 f864 	bl	80083b4 <_free_r>
 80082ec:	4625      	mov	r5, r4
 80082ee:	4628      	mov	r0, r5
 80082f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f4:	f000 f956 	bl	80085a4 <_malloc_usable_size_r>
 80082f8:	4284      	cmp	r4, r0
 80082fa:	4607      	mov	r7, r0
 80082fc:	d802      	bhi.n	8008304 <_realloc_r+0x34>
 80082fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008302:	d812      	bhi.n	800832a <_realloc_r+0x5a>
 8008304:	4621      	mov	r1, r4
 8008306:	4640      	mov	r0, r8
 8008308:	f000 f8c0 	bl	800848c <_malloc_r>
 800830c:	4605      	mov	r5, r0
 800830e:	2800      	cmp	r0, #0
 8008310:	d0ed      	beq.n	80082ee <_realloc_r+0x1e>
 8008312:	42bc      	cmp	r4, r7
 8008314:	4622      	mov	r2, r4
 8008316:	4631      	mov	r1, r6
 8008318:	bf28      	it	cs
 800831a:	463a      	movcs	r2, r7
 800831c:	f000 f83c 	bl	8008398 <memcpy>
 8008320:	4631      	mov	r1, r6
 8008322:	4640      	mov	r0, r8
 8008324:	f000 f846 	bl	80083b4 <_free_r>
 8008328:	e7e1      	b.n	80082ee <_realloc_r+0x1e>
 800832a:	4635      	mov	r5, r6
 800832c:	e7df      	b.n	80082ee <_realloc_r+0x1e>

0800832e <memset>:
 800832e:	4402      	add	r2, r0
 8008330:	4603      	mov	r3, r0
 8008332:	4293      	cmp	r3, r2
 8008334:	d100      	bne.n	8008338 <memset+0xa>
 8008336:	4770      	bx	lr
 8008338:	f803 1b01 	strb.w	r1, [r3], #1
 800833c:	e7f9      	b.n	8008332 <memset+0x4>
	...

08008340 <__errno>:
 8008340:	4b01      	ldr	r3, [pc, #4]	; (8008348 <__errno+0x8>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	20000058 	.word	0x20000058

0800834c <__libc_init_array>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4d0d      	ldr	r5, [pc, #52]	; (8008384 <__libc_init_array+0x38>)
 8008350:	4c0d      	ldr	r4, [pc, #52]	; (8008388 <__libc_init_array+0x3c>)
 8008352:	1b64      	subs	r4, r4, r5
 8008354:	10a4      	asrs	r4, r4, #2
 8008356:	2600      	movs	r6, #0
 8008358:	42a6      	cmp	r6, r4
 800835a:	d109      	bne.n	8008370 <__libc_init_array+0x24>
 800835c:	4d0b      	ldr	r5, [pc, #44]	; (800838c <__libc_init_array+0x40>)
 800835e:	4c0c      	ldr	r4, [pc, #48]	; (8008390 <__libc_init_array+0x44>)
 8008360:	f000 f938 	bl	80085d4 <_init>
 8008364:	1b64      	subs	r4, r4, r5
 8008366:	10a4      	asrs	r4, r4, #2
 8008368:	2600      	movs	r6, #0
 800836a:	42a6      	cmp	r6, r4
 800836c:	d105      	bne.n	800837a <__libc_init_array+0x2e>
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	f855 3b04 	ldr.w	r3, [r5], #4
 8008374:	4798      	blx	r3
 8008376:	3601      	adds	r6, #1
 8008378:	e7ee      	b.n	8008358 <__libc_init_array+0xc>
 800837a:	f855 3b04 	ldr.w	r3, [r5], #4
 800837e:	4798      	blx	r3
 8008380:	3601      	adds	r6, #1
 8008382:	e7f2      	b.n	800836a <__libc_init_array+0x1e>
 8008384:	08008918 	.word	0x08008918
 8008388:	08008918 	.word	0x08008918
 800838c:	08008918 	.word	0x08008918
 8008390:	08008920 	.word	0x08008920

08008394 <__retarget_lock_acquire_recursive>:
 8008394:	4770      	bx	lr

08008396 <__retarget_lock_release_recursive>:
 8008396:	4770      	bx	lr

08008398 <memcpy>:
 8008398:	440a      	add	r2, r1
 800839a:	4291      	cmp	r1, r2
 800839c:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a0:	d100      	bne.n	80083a4 <memcpy+0xc>
 80083a2:	4770      	bx	lr
 80083a4:	b510      	push	{r4, lr}
 80083a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ae:	4291      	cmp	r1, r2
 80083b0:	d1f9      	bne.n	80083a6 <memcpy+0xe>
 80083b2:	bd10      	pop	{r4, pc}

080083b4 <_free_r>:
 80083b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083b6:	2900      	cmp	r1, #0
 80083b8:	d044      	beq.n	8008444 <_free_r+0x90>
 80083ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083be:	9001      	str	r0, [sp, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f1a1 0404 	sub.w	r4, r1, #4
 80083c6:	bfb8      	it	lt
 80083c8:	18e4      	addlt	r4, r4, r3
 80083ca:	f000 f8df 	bl	800858c <__malloc_lock>
 80083ce:	4a1e      	ldr	r2, [pc, #120]	; (8008448 <_free_r+0x94>)
 80083d0:	9801      	ldr	r0, [sp, #4]
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	b933      	cbnz	r3, 80083e4 <_free_r+0x30>
 80083d6:	6063      	str	r3, [r4, #4]
 80083d8:	6014      	str	r4, [r2, #0]
 80083da:	b003      	add	sp, #12
 80083dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e0:	f000 b8da 	b.w	8008598 <__malloc_unlock>
 80083e4:	42a3      	cmp	r3, r4
 80083e6:	d908      	bls.n	80083fa <_free_r+0x46>
 80083e8:	6825      	ldr	r5, [r4, #0]
 80083ea:	1961      	adds	r1, r4, r5
 80083ec:	428b      	cmp	r3, r1
 80083ee:	bf01      	itttt	eq
 80083f0:	6819      	ldreq	r1, [r3, #0]
 80083f2:	685b      	ldreq	r3, [r3, #4]
 80083f4:	1949      	addeq	r1, r1, r5
 80083f6:	6021      	streq	r1, [r4, #0]
 80083f8:	e7ed      	b.n	80083d6 <_free_r+0x22>
 80083fa:	461a      	mov	r2, r3
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	b10b      	cbz	r3, 8008404 <_free_r+0x50>
 8008400:	42a3      	cmp	r3, r4
 8008402:	d9fa      	bls.n	80083fa <_free_r+0x46>
 8008404:	6811      	ldr	r1, [r2, #0]
 8008406:	1855      	adds	r5, r2, r1
 8008408:	42a5      	cmp	r5, r4
 800840a:	d10b      	bne.n	8008424 <_free_r+0x70>
 800840c:	6824      	ldr	r4, [r4, #0]
 800840e:	4421      	add	r1, r4
 8008410:	1854      	adds	r4, r2, r1
 8008412:	42a3      	cmp	r3, r4
 8008414:	6011      	str	r1, [r2, #0]
 8008416:	d1e0      	bne.n	80083da <_free_r+0x26>
 8008418:	681c      	ldr	r4, [r3, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	6053      	str	r3, [r2, #4]
 800841e:	440c      	add	r4, r1
 8008420:	6014      	str	r4, [r2, #0]
 8008422:	e7da      	b.n	80083da <_free_r+0x26>
 8008424:	d902      	bls.n	800842c <_free_r+0x78>
 8008426:	230c      	movs	r3, #12
 8008428:	6003      	str	r3, [r0, #0]
 800842a:	e7d6      	b.n	80083da <_free_r+0x26>
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	1961      	adds	r1, r4, r5
 8008430:	428b      	cmp	r3, r1
 8008432:	bf04      	itt	eq
 8008434:	6819      	ldreq	r1, [r3, #0]
 8008436:	685b      	ldreq	r3, [r3, #4]
 8008438:	6063      	str	r3, [r4, #4]
 800843a:	bf04      	itt	eq
 800843c:	1949      	addeq	r1, r1, r5
 800843e:	6021      	streq	r1, [r4, #0]
 8008440:	6054      	str	r4, [r2, #4]
 8008442:	e7ca      	b.n	80083da <_free_r+0x26>
 8008444:	b003      	add	sp, #12
 8008446:	bd30      	pop	{r4, r5, pc}
 8008448:	20000d80 	.word	0x20000d80

0800844c <sbrk_aligned>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	4e0e      	ldr	r6, [pc, #56]	; (8008488 <sbrk_aligned+0x3c>)
 8008450:	460c      	mov	r4, r1
 8008452:	6831      	ldr	r1, [r6, #0]
 8008454:	4605      	mov	r5, r0
 8008456:	b911      	cbnz	r1, 800845e <sbrk_aligned+0x12>
 8008458:	f000 f8ac 	bl	80085b4 <_sbrk_r>
 800845c:	6030      	str	r0, [r6, #0]
 800845e:	4621      	mov	r1, r4
 8008460:	4628      	mov	r0, r5
 8008462:	f000 f8a7 	bl	80085b4 <_sbrk_r>
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	d00a      	beq.n	8008480 <sbrk_aligned+0x34>
 800846a:	1cc4      	adds	r4, r0, #3
 800846c:	f024 0403 	bic.w	r4, r4, #3
 8008470:	42a0      	cmp	r0, r4
 8008472:	d007      	beq.n	8008484 <sbrk_aligned+0x38>
 8008474:	1a21      	subs	r1, r4, r0
 8008476:	4628      	mov	r0, r5
 8008478:	f000 f89c 	bl	80085b4 <_sbrk_r>
 800847c:	3001      	adds	r0, #1
 800847e:	d101      	bne.n	8008484 <sbrk_aligned+0x38>
 8008480:	f04f 34ff 	mov.w	r4, #4294967295
 8008484:	4620      	mov	r0, r4
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	20000d84 	.word	0x20000d84

0800848c <_malloc_r>:
 800848c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008490:	1ccd      	adds	r5, r1, #3
 8008492:	f025 0503 	bic.w	r5, r5, #3
 8008496:	3508      	adds	r5, #8
 8008498:	2d0c      	cmp	r5, #12
 800849a:	bf38      	it	cc
 800849c:	250c      	movcc	r5, #12
 800849e:	2d00      	cmp	r5, #0
 80084a0:	4607      	mov	r7, r0
 80084a2:	db01      	blt.n	80084a8 <_malloc_r+0x1c>
 80084a4:	42a9      	cmp	r1, r5
 80084a6:	d905      	bls.n	80084b4 <_malloc_r+0x28>
 80084a8:	230c      	movs	r3, #12
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	2600      	movs	r6, #0
 80084ae:	4630      	mov	r0, r6
 80084b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008588 <_malloc_r+0xfc>
 80084b8:	f000 f868 	bl	800858c <__malloc_lock>
 80084bc:	f8d8 3000 	ldr.w	r3, [r8]
 80084c0:	461c      	mov	r4, r3
 80084c2:	bb5c      	cbnz	r4, 800851c <_malloc_r+0x90>
 80084c4:	4629      	mov	r1, r5
 80084c6:	4638      	mov	r0, r7
 80084c8:	f7ff ffc0 	bl	800844c <sbrk_aligned>
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	4604      	mov	r4, r0
 80084d0:	d155      	bne.n	800857e <_malloc_r+0xf2>
 80084d2:	f8d8 4000 	ldr.w	r4, [r8]
 80084d6:	4626      	mov	r6, r4
 80084d8:	2e00      	cmp	r6, #0
 80084da:	d145      	bne.n	8008568 <_malloc_r+0xdc>
 80084dc:	2c00      	cmp	r4, #0
 80084de:	d048      	beq.n	8008572 <_malloc_r+0xe6>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	4631      	mov	r1, r6
 80084e4:	4638      	mov	r0, r7
 80084e6:	eb04 0903 	add.w	r9, r4, r3
 80084ea:	f000 f863 	bl	80085b4 <_sbrk_r>
 80084ee:	4581      	cmp	r9, r0
 80084f0:	d13f      	bne.n	8008572 <_malloc_r+0xe6>
 80084f2:	6821      	ldr	r1, [r4, #0]
 80084f4:	1a6d      	subs	r5, r5, r1
 80084f6:	4629      	mov	r1, r5
 80084f8:	4638      	mov	r0, r7
 80084fa:	f7ff ffa7 	bl	800844c <sbrk_aligned>
 80084fe:	3001      	adds	r0, #1
 8008500:	d037      	beq.n	8008572 <_malloc_r+0xe6>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	442b      	add	r3, r5
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	f8d8 3000 	ldr.w	r3, [r8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d038      	beq.n	8008582 <_malloc_r+0xf6>
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	42a2      	cmp	r2, r4
 8008514:	d12b      	bne.n	800856e <_malloc_r+0xe2>
 8008516:	2200      	movs	r2, #0
 8008518:	605a      	str	r2, [r3, #4]
 800851a:	e00f      	b.n	800853c <_malloc_r+0xb0>
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	1b52      	subs	r2, r2, r5
 8008520:	d41f      	bmi.n	8008562 <_malloc_r+0xd6>
 8008522:	2a0b      	cmp	r2, #11
 8008524:	d917      	bls.n	8008556 <_malloc_r+0xca>
 8008526:	1961      	adds	r1, r4, r5
 8008528:	42a3      	cmp	r3, r4
 800852a:	6025      	str	r5, [r4, #0]
 800852c:	bf18      	it	ne
 800852e:	6059      	strne	r1, [r3, #4]
 8008530:	6863      	ldr	r3, [r4, #4]
 8008532:	bf08      	it	eq
 8008534:	f8c8 1000 	streq.w	r1, [r8]
 8008538:	5162      	str	r2, [r4, r5]
 800853a:	604b      	str	r3, [r1, #4]
 800853c:	4638      	mov	r0, r7
 800853e:	f104 060b 	add.w	r6, r4, #11
 8008542:	f000 f829 	bl	8008598 <__malloc_unlock>
 8008546:	f026 0607 	bic.w	r6, r6, #7
 800854a:	1d23      	adds	r3, r4, #4
 800854c:	1af2      	subs	r2, r6, r3
 800854e:	d0ae      	beq.n	80084ae <_malloc_r+0x22>
 8008550:	1b9b      	subs	r3, r3, r6
 8008552:	50a3      	str	r3, [r4, r2]
 8008554:	e7ab      	b.n	80084ae <_malloc_r+0x22>
 8008556:	42a3      	cmp	r3, r4
 8008558:	6862      	ldr	r2, [r4, #4]
 800855a:	d1dd      	bne.n	8008518 <_malloc_r+0x8c>
 800855c:	f8c8 2000 	str.w	r2, [r8]
 8008560:	e7ec      	b.n	800853c <_malloc_r+0xb0>
 8008562:	4623      	mov	r3, r4
 8008564:	6864      	ldr	r4, [r4, #4]
 8008566:	e7ac      	b.n	80084c2 <_malloc_r+0x36>
 8008568:	4634      	mov	r4, r6
 800856a:	6876      	ldr	r6, [r6, #4]
 800856c:	e7b4      	b.n	80084d8 <_malloc_r+0x4c>
 800856e:	4613      	mov	r3, r2
 8008570:	e7cc      	b.n	800850c <_malloc_r+0x80>
 8008572:	230c      	movs	r3, #12
 8008574:	603b      	str	r3, [r7, #0]
 8008576:	4638      	mov	r0, r7
 8008578:	f000 f80e 	bl	8008598 <__malloc_unlock>
 800857c:	e797      	b.n	80084ae <_malloc_r+0x22>
 800857e:	6025      	str	r5, [r4, #0]
 8008580:	e7dc      	b.n	800853c <_malloc_r+0xb0>
 8008582:	605b      	str	r3, [r3, #4]
 8008584:	deff      	udf	#255	; 0xff
 8008586:	bf00      	nop
 8008588:	20000d80 	.word	0x20000d80

0800858c <__malloc_lock>:
 800858c:	4801      	ldr	r0, [pc, #4]	; (8008594 <__malloc_lock+0x8>)
 800858e:	f7ff bf01 	b.w	8008394 <__retarget_lock_acquire_recursive>
 8008592:	bf00      	nop
 8008594:	20000d7c 	.word	0x20000d7c

08008598 <__malloc_unlock>:
 8008598:	4801      	ldr	r0, [pc, #4]	; (80085a0 <__malloc_unlock+0x8>)
 800859a:	f7ff befc 	b.w	8008396 <__retarget_lock_release_recursive>
 800859e:	bf00      	nop
 80085a0:	20000d7c 	.word	0x20000d7c

080085a4 <_malloc_usable_size_r>:
 80085a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a8:	1f18      	subs	r0, r3, #4
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	bfbc      	itt	lt
 80085ae:	580b      	ldrlt	r3, [r1, r0]
 80085b0:	18c0      	addlt	r0, r0, r3
 80085b2:	4770      	bx	lr

080085b4 <_sbrk_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d06      	ldr	r5, [pc, #24]	; (80085d0 <_sbrk_r+0x1c>)
 80085b8:	2300      	movs	r3, #0
 80085ba:	4604      	mov	r4, r0
 80085bc:	4608      	mov	r0, r1
 80085be:	602b      	str	r3, [r5, #0]
 80085c0:	f7fb ff1e 	bl	8004400 <_sbrk>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_sbrk_r+0x1a>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_sbrk_r+0x1a>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	20000d78 	.word	0x20000d78

080085d4 <_init>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr

080085e0 <_fini>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr
