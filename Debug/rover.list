
rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007874  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d20  08007d20  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d28  08007d28  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007d28  08007d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000cc8  20000060  20000060  00020060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000d28  20000d28  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014d9e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002883  00000000  00000000  00034e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f20  00000000  00000000  000376f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bdc  00000000  00000000  00038610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000223da  00000000  00000000  000391ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011b0d  00000000  00000000  0005b5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1852  00000000  00000000  0006d0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004550  00000000  00000000  0013e928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00142e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079e4 	.word	0x080079e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	080079e4 	.word	0x080079e4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b970 	b.w	8000d5c <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	460f      	mov	r7, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d14a      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0xe2>
 8000aaa:	fab2 f382 	clz	r3, r2
 8000aae:	b143      	cbz	r3, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab4:	f1c3 0220 	rsb	r2, r3, #32
 8000ab8:	409f      	lsls	r7, r3
 8000aba:	fa20 f202 	lsr.w	r2, r0, r2
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	409c      	lsls	r4, r3
 8000ac2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ac6:	fa1f f58c 	uxth.w	r5, ip
 8000aca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ace:	0c22      	lsrs	r2, r4, #16
 8000ad0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ad4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad8:	fb01 f005 	mul.w	r0, r1, r5
 8000adc:	4290      	cmp	r0, r2
 8000ade:	d90a      	bls.n	8000af6 <__udivmoddi4+0x62>
 8000ae0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae8:	f080 811c 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000aec:	4290      	cmp	r0, r2
 8000aee:	f240 8119 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000af2:	3902      	subs	r1, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a12      	subs	r2, r2, r0
 8000af8:	b2a4      	uxth	r4, r4
 8000afa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000afe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b06:	fb00 f505 	mul.w	r5, r0, r5
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	d90a      	bls.n	8000b24 <__udivmoddi4+0x90>
 8000b0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b16:	f080 8107 	bcs.w	8000d28 <__udivmoddi4+0x294>
 8000b1a:	42a5      	cmp	r5, r4
 8000b1c:	f240 8104 	bls.w	8000d28 <__udivmoddi4+0x294>
 8000b20:	4464      	add	r4, ip
 8000b22:	3802      	subs	r0, #2
 8000b24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b28:	1b64      	subs	r4, r4, r5
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	b11e      	cbz	r6, 8000b36 <__udivmoddi4+0xa2>
 8000b2e:	40dc      	lsrs	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	e9c6 4300 	strd	r4, r3, [r6]
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0xbc>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80ed 	beq.w	8000d1e <__udivmoddi4+0x28a>
 8000b44:	2100      	movs	r1, #0
 8000b46:	e9c6 0500 	strd	r0, r5, [r6]
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b50:	fab3 f183 	clz	r1, r3
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d149      	bne.n	8000bec <__udivmoddi4+0x158>
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	d302      	bcc.n	8000b62 <__udivmoddi4+0xce>
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	f200 80f8 	bhi.w	8000d52 <__udivmoddi4+0x2be>
 8000b62:	1a84      	subs	r4, r0, r2
 8000b64:	eb65 0203 	sbc.w	r2, r5, r3
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4617      	mov	r7, r2
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d0e2      	beq.n	8000b36 <__udivmoddi4+0xa2>
 8000b70:	e9c6 4700 	strd	r4, r7, [r6]
 8000b74:	e7df      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xe6>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f382 	clz	r3, r2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8090 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b84:	1a8a      	subs	r2, r1, r2
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b94:	fb07 2015 	mls	r0, r7, r5, r2
 8000b98:	0c22      	lsrs	r2, r4, #16
 8000b9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba6:	eb1c 0202 	adds.w	r2, ip, r2
 8000baa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4290      	cmp	r0, r2
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2b8>
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	1a12      	subs	r2, r2, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x14e>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x14c>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2c2>
 8000be0:	4610      	mov	r0, r2
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bea:	e79f      	b.n	8000b2c <__udivmoddi4+0x98>
 8000bec:	f1c1 0720 	rsb	r7, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000c02:	40fd      	lsrs	r5, r7
 8000c04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c08:	4323      	orrs	r3, r4
 8000c0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c0e:	fa1f fe8c 	uxth.w	lr, ip
 8000c12:	fb09 5518 	mls	r5, r9, r8, r5
 8000c16:	0c1c      	lsrs	r4, r3, #16
 8000c18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	fa00 f001 	lsl.w	r0, r0, r1
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2b4>
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2b4>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4464      	add	r4, ip
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	b29d      	uxth	r5, r3
 8000c48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2ac>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2ac>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	4464      	add	r4, ip
 8000c6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c72:	fba3 9502 	umull	r9, r5, r3, r2
 8000c76:	eba4 040e 	sub.w	r4, r4, lr
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46ae      	mov	lr, r5
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x29c>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x298>
 8000c84:	b156      	cbz	r6, 8000c9c <__udivmoddi4+0x208>
 8000c86:	ebb0 0208 	subs.w	r2, r0, r8
 8000c8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c92:	40ca      	lsrs	r2, r1
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	4317      	orrs	r7, r2
 8000c98:	e9c6 7400 	strd	r7, r4, [r6]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	f1c3 0120 	rsb	r1, r3, #32
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cb4:	409d      	lsls	r5, r3
 8000cb6:	432a      	orrs	r2, r5
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cce:	fb00 f50e 	mul.w	r5, r0, lr
 8000cd2:	428d      	cmp	r5, r1
 8000cd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x258>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b0>
 8000ce4:	428d      	cmp	r5, r1
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b0>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1b49      	subs	r1, r1, r5
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cf4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000d00:	4291      	cmp	r1, r2
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x282>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2a8>
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2a8>
 8000d12:	3d02      	subs	r5, #2
 8000d14:	4462      	add	r2, ip
 8000d16:	1a52      	subs	r2, r2, r1
 8000d18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0xfc>
 8000d1e:	4631      	mov	r1, r6
 8000d20:	4630      	mov	r0, r6
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000d24:	4639      	mov	r1, r7
 8000d26:	e6e6      	b.n	8000af6 <__udivmoddi4+0x62>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	e6fb      	b.n	8000b24 <__udivmoddi4+0x90>
 8000d2c:	4548      	cmp	r0, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3c:	4645      	mov	r5, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x282>
 8000d40:	462b      	mov	r3, r5
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x258>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4c:	3d02      	subs	r5, #2
 8000d4e:	4462      	add	r2, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d52:	4608      	mov	r0, r1
 8000d54:	e70a      	b.n	8000b6c <__udivmoddi4+0xd8>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x14e>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f003 fa14 	bl	8004190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f812 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f000 f918 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d70:	f000 f8ee 	bl	8000f50 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d74:	f000 f876 	bl	8000e64 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d78:	f000 f8c0 	bl	8000efc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <main+0x2c>)
 8000d7e:	f004 fe99 	bl	8005ab4 <HAL_TIM_Base_Start_IT>

  //char uart_buf[100];
  //int uart_buf_len;
  setup();
 8000d82:	f002 fa2b 	bl	80031dc <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  loop();
 8000d86:	f002 fa45 	bl	8003214 <loop>
 8000d8a:	e7fc      	b.n	8000d86 <main+0x26>
 8000d8c:	2000007c 	.word	0x2000007c

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 fccd 	bl	800773e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <SystemClock_Config+0xd0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000e04:	235a      	movs	r3, #90	; 0x5a
 8000e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 f965 	bl	80050e4 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e20:	f000 f96c 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2102      	movs	r1, #2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f004 fbc6 	bl	80055d4 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e4e:	f000 f955 	bl	80010fc <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	; 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30000;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000e8a:	f247 5230 	movw	r2, #30000	; 0x7530
 8000e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000e98:	2296      	movs	r2, #150	; 0x96
 8000e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000eaa:	f004 fdb3 	bl	8005a14 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000eb4:	f000 f922 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000ec6:	f004 ff6d 	bl	8005da4 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 f914 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_TIM2_Init+0x94>)
 8000ee2:	f005 f989 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f000 f906 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000007c 	.word	0x2000007c

08000efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_USART2_UART_Init+0x50>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f08:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f34:	f005 f9f0 	bl	8006318 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3e:	f000 f8dd 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000c4 	.word	0x200000c4
 8000f4c:	40004400 	.word	0x40004400

08000f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_DMA_Init+0x4c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <MX_DMA_Init+0x4c>)
 8000f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <MX_DMA_Init+0x4c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2010      	movs	r0, #16
 8000f78:	f003 fa7b 	bl	8004472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	f003 fa94 	bl	80044aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2011      	movs	r0, #17
 8000f88:	f003 fa73 	bl	8004472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f8c:	2011      	movs	r0, #17
 8000f8e:	f003 fa8c 	bl	80044aa <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <MX_GPIO_Init+0x14c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <MX_GPIO_Init+0x14c>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b49      	ldr	r3, [pc, #292]	; (80010ec <MX_GPIO_Init+0x14c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b45      	ldr	r3, [pc, #276]	; (80010ec <MX_GPIO_Init+0x14c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a44      	ldr	r2, [pc, #272]	; (80010ec <MX_GPIO_Init+0x14c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <MX_GPIO_Init+0x14c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <MX_GPIO_Init+0x14c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a3d      	ldr	r2, [pc, #244]	; (80010ec <MX_GPIO_Init+0x14c>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <MX_GPIO_Init+0x14c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a36      	ldr	r2, [pc, #216]	; (80010ec <MX_GPIO_Init+0x14c>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <MX_GPIO_Init+0x14c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <MX_GPIO_Init+0x14c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <MX_GPIO_Init+0x14c>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <MX_GPIO_Init+0x14c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4829      	ldr	r0, [pc, #164]	; (80010f0 <MX_GPIO_Init+0x150>)
 800104a:	f003 ffff 	bl	800504c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LeftWheelEncoderChannelA_Pin */
  GPIO_InitStruct.Pin = LeftWheelEncoderChannelA_Pin;
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001052:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftWheelEncoderChannelA_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4824      	ldr	r0, [pc, #144]	; (80010f4 <MX_GPIO_Init+0x154>)
 8001064:	f003 fe3e 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftWheelEncoderChannelB_Pin */
  GPIO_InitStruct.Pin = LeftWheelEncoderChannelB_Pin;
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftWheelEncoderChannelB_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	481d      	ldr	r0, [pc, #116]	; (80010f4 <MX_GPIO_Init+0x154>)
 800107e:	f003 fe31 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4815      	ldr	r0, [pc, #84]	; (80010f0 <MX_GPIO_Init+0x150>)
 800109c:	f003 fe22 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightWheelEncoderChannelA_Pin */
  GPIO_InitStruct.Pin = RightWheelEncoderChannelA_Pin;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010a4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightWheelEncoderChannelA_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <MX_GPIO_Init+0x158>)
 80010b6:	f003 fe15 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightWheelEncoderChannelB_Pin */
  GPIO_InitStruct.Pin = RightWheelEncoderChannelB_Pin;
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightWheelEncoderChannelB_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <MX_GPIO_Init+0x158>)
 80010ce:	f003 fe09 	bl	8004ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2017      	movs	r0, #23
 80010d8:	f003 f9cb 	bl	8004472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010dc:	2017      	movs	r0, #23
 80010de:	f003 f9e4 	bl	80044aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40020400 	.word	0x40020400

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>

08001106 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <_ZN3ros3MsgC1Ev+0x1c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	08007cf0 	.word	0x08007cf0

08001148 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
      data()
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ffe8 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3304      	adds	r3, #4
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffcf 	bl	8001106 <_ZN3ros4TimeC1Ev>
    {
    }
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	08007cd8 	.word	0x08007cd8

08001178 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6859      	ldr	r1, [r3, #4]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	4413      	add	r3, r2
 8001190:	b2ca      	uxtb	r2, r1
 8001192:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	0a19      	lsrs	r1, r3, #8
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	b2ca      	uxtb	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	0c19      	lsrs	r1, r3, #16
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3302      	adds	r3, #2
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2ca      	uxtb	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	0e19      	lsrs	r1, r3, #24
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3303      	adds	r3, #3
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	b2ca      	uxtb	r2, r1
 80011c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3304      	adds	r3, #4
 80011ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6899      	ldr	r1, [r3, #8]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	0a19      	lsrs	r1, r3, #8
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	b2ca      	uxtb	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	0c19      	lsrs	r1, r3, #16
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3302      	adds	r3, #2
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	b2ca      	uxtb	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	0e19      	lsrs	r1, r3, #24
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3303      	adds	r3, #3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3304      	adds	r3, #4
 8001218:	60fb      	str	r3, [r7, #12]
      return offset;
 800121a:	68fb      	ldr	r3, [r7, #12]
    }
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	440b      	add	r3, r1
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3302      	adds	r3, #2
 8001262:	6839      	ldr	r1, [r7, #0]
 8001264:	440b      	add	r3, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	041b      	lsls	r3, r3, #16
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3303      	adds	r3, #3
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	440b      	add	r3, r1
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	061b      	lsls	r3, r3, #24
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3304      	adds	r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	440b      	add	r3, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3302      	adds	r3, #2
 80012b8:	6839      	ldr	r1, [r7, #0]
 80012ba:	440b      	add	r3, r1
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3303      	adds	r3, #3
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	440b      	add	r3, r1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	061b      	lsls	r3, r3, #24
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3304      	adds	r3, #4
 80012e0:	60fb      	str	r3, [r7, #12]
     return offset;
 80012e2:	68fb      	ldr	r3, [r7, #12]
    }
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	080079fc 	.word	0x080079fc

0800130c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	08007a0c 	.word	0x08007a0c

08001328 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fef8 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001348:	609a      	str	r2, [r3, #8]
      message_type(""),
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800134e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a06      	ldr	r2, [pc, #24]	; (800136c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001354:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
    {
    }
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	08007cc0 	.word	0x08007cc0
 800136c:	08007a30 	.word	0x08007a30

08001370 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	8899      	ldrh	r1, [r3, #4]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	4413      	add	r3, r2
 8001388:	b2ca      	uxtb	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b299      	uxth	r1, r3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3301      	adds	r3, #1
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	4413      	add	r3, r2
 800139c:	b2ca      	uxtb	r2, r1
 800139e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	3302      	adds	r3, #2
 80013a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff0c 	bl	80001c8 <strlen>
 80013b0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	69b9      	ldr	r1, [r7, #24]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 ff38 	bl	8003230 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3304      	adds	r3, #4
 80013c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	18d0      	adds	r0, r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4619      	mov	r1, r3
 80013d4:	f006 f9e8 	bl	80077a8 <memcpy>
      offset += length_topic_name;
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4413      	add	r3, r2
 80013de:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe feef 	bl	80001c8 <strlen>
 80013ea:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	6979      	ldr	r1, [r7, #20]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 ff1b 	bl	8003230 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	18d0      	adds	r0, r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4619      	mov	r1, r3
 800140e:	f006 f9cb 	bl	80077a8 <memcpy>
      offset += length_message_type;
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	4413      	add	r3, r2
 8001418:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe fed2 	bl	80001c8 <strlen>
 8001424:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	4413      	add	r3, r2
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fefe 	bl	8003230 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3304      	adds	r3, #4
 8001438:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	18d0      	adds	r0, r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4619      	mov	r1, r3
 8001448:	f006 f9ae 	bl	80077a8 <memcpy>
      offset += length_md5sum;
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4413      	add	r3, r2
 8001452:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	b2ca      	uxtb	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	0a19      	lsrs	r1, r3, #8
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3301      	adds	r3, #1
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	0c19      	lsrs	r1, r3, #16
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3302      	adds	r3, #2
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	0e19      	lsrs	r1, r3, #24
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3303      	adds	r3, #3
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	4413      	add	r3, r2
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	61fb      	str	r3, [r7, #28]
      return offset;
 800149c:	69fb      	ldr	r3, [r7, #28]
    }
 800149e:	4618      	mov	r0, r3
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b08a      	sub	sp, #40	; 0x28
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	3301      	adds	r3, #1
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	440b      	add	r3, r1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21b      	sxth	r3, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	3302      	adds	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	441a      	add	r2, r3
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 febb 	bl	800326e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	3304      	adds	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
 8001502:	e00b      	b.n	800151c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	441a      	add	r2, r3
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	3b01      	subs	r3, #1
 800150e:	6839      	ldr	r1, [r7, #0]
 8001510:	440b      	add	r3, r1
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	4413      	add	r3, r2
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	429a      	cmp	r2, r3
 8001526:	d3ed      	bcc.n	8001504 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4413      	add	r3, r2
 800152e:	3b01      	subs	r3, #1
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	4413      	add	r3, r2
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	3b01      	subs	r3, #1
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	441a      	add	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	4413      	add	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	441a      	add	r2, r3
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fe88 	bl	800326e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	3304      	adds	r3, #4
 8001562:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	623b      	str	r3, [r7, #32]
 8001568:	e00b      	b.n	8001582 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	441a      	add	r2, r3
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	3b01      	subs	r3, #1
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	440b      	add	r3, r1
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	3301      	adds	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4413      	add	r3, r2
 8001588:	6a3a      	ldr	r2, [r7, #32]
 800158a:	429a      	cmp	r2, r3
 800158c:	d3ed      	bcc.n	800156a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4413      	add	r3, r2
 8001594:	3b01      	subs	r3, #1
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	441a      	add	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4413      	add	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	441a      	add	r2, r3
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fe55 	bl	800326e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3304      	adds	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e00b      	b.n	80015e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	441a      	add	r2, r3
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b01      	subs	r3, #1
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	440b      	add	r3, r1
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3ed      	bcc.n	80015d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	3b01      	subs	r3, #1
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	3b01      	subs	r3, #1
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	441a      	add	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	6839      	ldr	r1, [r7, #0]
 8001622:	440a      	add	r2, r1
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	3301      	adds	r3, #1
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	440b      	add	r3, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	4313      	orrs	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	3302      	adds	r3, #2
 8001642:	6839      	ldr	r1, [r7, #0]
 8001644:	440b      	add	r3, r1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	4313      	orrs	r3, r2
 800164c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	3303      	adds	r3, #3
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	440b      	add	r3, r1
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	061b      	lsls	r3, r3, #24
 800165c:	4313      	orrs	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	3304      	adds	r3, #4
 800166a:	61bb      	str	r3, [r7, #24]
     return offset;
 800166c:	69bb      	ldr	r3, [r7, #24]
    }
 800166e:	4618      	mov	r0, r3
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	08007a34 	.word	0x08007a34

08001694 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	08007a50 	.word	0x08007a50

080016b0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fd34 	bl	8001128 <_ZN3ros3MsgC1Ev>
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]
      level(0),
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	711a      	strb	r2, [r3, #4]
      msg("")
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80016d0:	609a      	str	r2, [r3, #8]
    {
    }
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	08007ca8 	.word	0x08007ca8
 80016e0:	08007a30 	.word	0x08007a30

080016e4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	7912      	ldrb	r2, [r2, #4]
 80016fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fd5d 	bl	80001c8 <strlen>
 800170e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	4413      	add	r3, r2
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fd89 	bl	8003230 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3304      	adds	r3, #4
 8001722:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	18d0      	adds	r0, r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	4619      	mov	r1, r3
 8001732:	f006 f839 	bl	80077a8 <memcpy>
      offset += length_msg;
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
      return offset;
 800173e:	68fb      	ldr	r3, [r7, #12]
    }
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	4413      	add	r3, r2
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	3301      	adds	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	441a      	add	r2, r3
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fd7a 	bl	800326e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	3304      	adds	r3, #4
 800177e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e00b      	b.n	800179e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	441a      	add	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3b01      	subs	r3, #1
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	440b      	add	r3, r1
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3ed      	bcc.n	8001786 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	3b01      	subs	r3, #1
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	3b01      	subs	r3, #1
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	441a      	add	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
     return offset;
 80017ce:	693b      	ldr	r3, [r7, #16]
    }
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	08007a74 	.word	0x08007a74

080017f4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	08007a88 	.word	0x08007a88

08001810 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fc84 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	08007c90 	.word	0x08007c90

0800186c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6859      	ldr	r1, [r3, #4]
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	0a19      	lsrs	r1, r3, #8
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	3301      	adds	r3, #1
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4413      	add	r3, r2
 8001896:	b2ca      	uxtb	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c19      	lsrs	r1, r3, #16
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	3302      	adds	r3, #2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	b2ca      	uxtb	r2, r1
 80018aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0e19      	lsrs	r1, r3, #24
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	3303      	adds	r3, #3
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3304      	adds	r3, #4
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
 80018c8:	e02a      	b.n	8001920 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80018d8:	6939      	ldr	r1, [r7, #16]
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	b2ca      	uxtb	r2, r1
 80018e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	0a19      	lsrs	r1, r3, #8
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	0c19      	lsrs	r1, r3, #16
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	3302      	adds	r3, #2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	b2ca      	uxtb	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	0e19      	lsrs	r1, r3, #24
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3303      	adds	r3, #3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	b2ca      	uxtb	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	3304      	adds	r3, #4
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	3301      	adds	r3, #1
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	6a3a      	ldr	r2, [r7, #32]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3cf      	bcc.n	80018ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	0a19      	lsrs	r1, r3, #8
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	3301      	adds	r3, #1
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	4413      	add	r3, r2
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	0c19      	lsrs	r1, r3, #16
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3302      	adds	r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	0e19      	lsrs	r1, r3, #24
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3303      	adds	r3, #3
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	3304      	adds	r3, #4
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	e02a      	b.n	80019d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001988:	68f9      	ldr	r1, [r7, #12]
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	b2ca      	uxtb	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	0a19      	lsrs	r1, r3, #8
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3301      	adds	r3, #1
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	0c19      	lsrs	r1, r3, #16
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	3302      	adds	r3, #2
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	0e19      	lsrs	r1, r3, #24
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3303      	adds	r3, #3
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	b2ca      	uxtb	r2, r1
 80019c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	3304      	adds	r3, #4
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3cf      	bcc.n	800197a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69d9      	ldr	r1, [r3, #28]
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	b2ca      	uxtb	r2, r1
 80019e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	0a19      	lsrs	r1, r3, #8
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3301      	adds	r3, #1
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	0c19      	lsrs	r1, r3, #16
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	3302      	adds	r3, #2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	0e19      	lsrs	r1, r3, #24
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3303      	adds	r3, #3
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b2ca      	uxtb	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	3304      	adds	r3, #4
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	e027      	b.n	8001a7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fbc6 	bl	80001c8 <strlen>
 8001a3c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	6979      	ldr	r1, [r7, #20]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fbf2 	bl	8003230 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3304      	adds	r3, #4
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	18d0      	adds	r0, r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4619      	mov	r1, r3
 8001a68:	f005 fe9e 	bl	80077a8 <memcpy>
      offset += length_stringsi;
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4413      	add	r3, r2
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3d2      	bcc.n	8001a2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001a86:	4618      	mov	r0, r3
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b08e      	sub	sp, #56	; 0x38
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	6a3a      	ldr	r2, [r7, #32]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aba:	3302      	adds	r3, #2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	6a3a      	ldr	r2, [r7, #32]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	3303      	adds	r3, #3
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	6a3a      	ldr	r2, [r7, #32]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	3304      	adds	r3, #4
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	6a3a      	ldr	r2, [r7, #32]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d90a      	bls.n	8001b02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f005 fdea 	bl	80076d0 <realloc>
 8001afc:	4602      	mov	r2, r0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b0c:	e035      	b.n	8001b7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	440a      	add	r2, r1
 8001b1a:	7812      	ldrb	r2, [r2, #0]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b24:	3301      	adds	r3, #1
 8001b26:	6839      	ldr	r1, [r7, #0]
 8001b28:	440b      	add	r3, r1
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b36:	3302      	adds	r3, #2
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	440b      	add	r3, r1
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	041b      	lsls	r3, r3, #16
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	3303      	adds	r3, #3
 8001b4a:	6839      	ldr	r1, [r7, #0]
 8001b4c:	440b      	add	r3, r1
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	4313      	orrs	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5e:	3304      	adds	r3, #4
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b76:	3301      	adds	r3, #1
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d3c4      	bcc.n	8001b0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b90:	3301      	adds	r3, #1
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb4:	3303      	adds	r3, #3
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	061b      	lsls	r3, r3, #24
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d90a      	bls.n	8001bea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f005 fd76 	bl	80076d0 <realloc>
 8001be4:	4602      	mov	r2, r0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf4:	e035      	b.n	8001c62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	440a      	add	r2, r1
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	440b      	add	r3, r1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1e:	3302      	adds	r3, #2
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	440b      	add	r3, r1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c30:	3303      	adds	r3, #3
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	440b      	add	r3, r1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c46:	3304      	adds	r3, #4
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	3214      	adds	r2, #20
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5e:	3301      	adds	r3, #1
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3c4      	bcc.n	8001bf6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c78:	3301      	adds	r3, #1
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	3303      	adds	r3, #3
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cae:	3304      	adds	r3, #4
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d90a      	bls.n	8001cd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f005 fd02 	bl	80076d0 <realloc>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cdc:	e03e      	b.n	8001d5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	441a      	add	r2, r3
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fabf 	bl	800326e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	e00b      	b.n	8001d14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	441a      	add	r2, r3
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3b01      	subs	r3, #1
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	440b      	add	r3, r1
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	3301      	adds	r3, #1
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
 8001d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3ed      	bcc.n	8001cfc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	3b01      	subs	r3, #1
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	3b01      	subs	r3, #1
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	441a      	add	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	3220      	adds	r2, #32
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	3301      	adds	r3, #1
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d3bb      	bcc.n	8001cde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3738      	adds	r7, #56	; 0x38
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	08007bcc 	.word	0x08007bcc

08001d8c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	08007aac 	.word	0x08007aac

08001da8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68d8      	ldr	r0, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6891      	ldr	r1, [r2, #8]
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	4798      	blx	r3
 8001df4:	4603      	mov	r3, r0
  };
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
  }
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <_ZN13STM32HardwareC1Ev+0x34>)
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	200000c4 	.word	0x200000c4

08001e74 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f804 	bl	8001e8a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f004 fb06 	bl	80064b0 <HAL_UART_Receive_DMA>
    }
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZN13STM32Hardware4readEv>:

    int read(){
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ffa8 	bl	8001e16 <_ZN13STM32Hardware10getRdmaIndEv>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	429c      	cmp	r4, r3
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001edc:	1c59      	adds	r1, r3, #1
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	791b      	ldrb	r3, [r3, #4]
 8001eea:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001efc:	68fb      	ldr	r3, [r7, #12]
    }
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}
	...

08001f08 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d108      	bne.n	8001f30 <_ZN13STM32Hardware5flushEv+0x28>
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <_ZN13STM32Hardware5flushEv+0xe4>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f083 0301 	eor.w	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <_ZN13STM32Hardware5flushEv+0x28>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <_ZN13STM32Hardware5flushEv+0x2a>
 8001f30:	2300      	movs	r3, #0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d055      	beq.n	8001fe2 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <_ZN13STM32Hardware5flushEv+0xe4>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d047      	beq.n	8001fdc <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d217      	bcs.n	8001f90 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	89fa      	ldrh	r2, [r7, #14]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f004 fa13 	bl	80063b4 <HAL_UART_Transmit_DMA>
 8001f8e:	e01f      	b.n	8001fd0 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001f9c:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	89fa      	ldrh	r2, [r7, #14]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f004 f9fe 	bl	80063b4 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f004 f9f2 	bl	80063b4 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <_ZN13STM32Hardware5flushEv+0xe4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
      }
    }
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200001c8 	.word	0x200001c8

08001ff0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
      int n = length;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002006:	bfa8      	it	ge
 8002008:	f44f 7300 	movge.w	r3, #512	; 0x200
 800200c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002014:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4293      	cmp	r3, r2
 800201c:	bf28      	it	cs
 800201e:	4613      	movcs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002028:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	4618      	mov	r0, r3
 8002036:	f005 fbb7 	bl	80077a8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	4413      	add	r3, r2
 8002044:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	429a      	cmp	r2, r3
 8002054:	d00b      	beq.n	800206e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	18d1      	adds	r1, r2, r3
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	461a      	mov	r2, r3
 800206a:	f005 fb9d 	bl	80077a8 <memcpy>
      }

      flush();
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f7ff ff4a 	bl	8001f08 <_ZN13STM32Hardware5flushEv>
    }
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	f002 f8ea 	bl	800425c <HAL_GetTick>
 8002088:	4603      	mov	r3, r0
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f842 	bl	8001128 <_ZN3ros3MsgC1Ev>
 80020a4:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	601a      	str	r2, [r3, #0]
      x(0),
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	08007c4c 	.word	0x08007c4c

080020e4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80020e4:	b480      	push	{r7}
 80020e6:	b08b      	sub	sp, #44	; 0x2c
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80020fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002102:	6838      	ldr	r0, [r7, #0]
 8002104:	4401      	add	r1, r0
 8002106:	b2d3      	uxtb	r3, r2
 8002108:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800210a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	0a02      	lsrs	r2, r0, #8
 8002118:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800211c:	0a0b      	lsrs	r3, r1, #8
 800211e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002120:	3101      	adds	r1, #1
 8002122:	6838      	ldr	r0, [r7, #0]
 8002124:	4401      	add	r1, r0
 8002126:	b2d3      	uxtb	r3, r2
 8002128:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800212a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	0c02      	lsrs	r2, r0, #16
 8002138:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800213c:	0c0b      	lsrs	r3, r1, #16
 800213e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002140:	3102      	adds	r1, #2
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	4401      	add	r1, r0
 8002146:	b2d3      	uxtb	r3, r2
 8002148:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800214a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	0e02      	lsrs	r2, r0, #24
 8002158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215c:	0e0b      	lsrs	r3, r1, #24
 800215e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002160:	3103      	adds	r1, #3
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	4401      	add	r1, r0
 8002166:	b2d3      	uxtb	r3, r2
 8002168:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800216a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	000a      	movs	r2, r1
 8002178:	2300      	movs	r3, #0
 800217a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217c:	3104      	adds	r1, #4
 800217e:	6838      	ldr	r0, [r7, #0]
 8002180:	4401      	add	r1, r0
 8002182:	b2d3      	uxtb	r3, r2
 8002184:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002186:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	0a0a      	lsrs	r2, r1, #8
 8002194:	2300      	movs	r3, #0
 8002196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002198:	3105      	adds	r1, #5
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	4401      	add	r1, r0
 800219e:	b2d3      	uxtb	r3, r2
 80021a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80021a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	0c0a      	lsrs	r2, r1, #16
 80021b0:	2300      	movs	r3, #0
 80021b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b4:	3106      	adds	r1, #6
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	4401      	add	r1, r0
 80021ba:	b2d3      	uxtb	r3, r2
 80021bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80021be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	0e0a      	lsrs	r2, r1, #24
 80021cc:	2300      	movs	r3, #0
 80021ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d0:	3107      	adds	r1, #7
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	4401      	add	r1, r0
 80021d6:	b2d3      	uxtb	r3, r2
 80021d8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	3308      	adds	r3, #8
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80021ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f0:	6838      	ldr	r0, [r7, #0]
 80021f2:	4401      	add	r1, r0
 80021f4:	b2d3      	uxtb	r3, r2
 80021f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80021f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	0a02      	lsrs	r2, r0, #8
 8002206:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800220a:	0a0b      	lsrs	r3, r1, #8
 800220c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220e:	3101      	adds	r1, #1
 8002210:	6838      	ldr	r0, [r7, #0]
 8002212:	4401      	add	r1, r0
 8002214:	b2d3      	uxtb	r3, r2
 8002216:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002218:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	0c02      	lsrs	r2, r0, #16
 8002226:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800222a:	0c0b      	lsrs	r3, r1, #16
 800222c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800222e:	3102      	adds	r1, #2
 8002230:	6838      	ldr	r0, [r7, #0]
 8002232:	4401      	add	r1, r0
 8002234:	b2d3      	uxtb	r3, r2
 8002236:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002238:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	0e02      	lsrs	r2, r0, #24
 8002246:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800224a:	0e0b      	lsrs	r3, r1, #24
 800224c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224e:	3103      	adds	r1, #3
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	4401      	add	r1, r0
 8002254:	b2d3      	uxtb	r3, r2
 8002256:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002258:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	000a      	movs	r2, r1
 8002266:	2300      	movs	r3, #0
 8002268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800226a:	3104      	adds	r1, #4
 800226c:	6838      	ldr	r0, [r7, #0]
 800226e:	4401      	add	r1, r0
 8002270:	b2d3      	uxtb	r3, r2
 8002272:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002274:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	0a0a      	lsrs	r2, r1, #8
 8002282:	2300      	movs	r3, #0
 8002284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002286:	3105      	adds	r1, #5
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	4401      	add	r1, r0
 800228c:	b2d3      	uxtb	r3, r2
 800228e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	0c0a      	lsrs	r2, r1, #16
 800229e:	2300      	movs	r3, #0
 80022a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a2:	3106      	adds	r1, #6
 80022a4:	6838      	ldr	r0, [r7, #0]
 80022a6:	4401      	add	r1, r0
 80022a8:	b2d3      	uxtb	r3, r2
 80022aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80022ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	0e0a      	lsrs	r2, r1, #24
 80022ba:	2300      	movs	r3, #0
 80022bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022be:	3107      	adds	r1, #7
 80022c0:	6838      	ldr	r0, [r7, #0]
 80022c2:	4401      	add	r1, r0
 80022c4:	b2d3      	uxtb	r3, r2
 80022c6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	3308      	adds	r3, #8
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80022d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022de:	6838      	ldr	r0, [r7, #0]
 80022e0:	4401      	add	r1, r0
 80022e2:	b2d3      	uxtb	r3, r2
 80022e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80022e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	0a02      	lsrs	r2, r0, #8
 80022f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022f8:	0a0b      	lsrs	r3, r1, #8
 80022fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fc:	3101      	adds	r1, #1
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	4401      	add	r1, r0
 8002302:	b2d3      	uxtb	r3, r2
 8002304:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	0c02      	lsrs	r2, r0, #16
 8002314:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002318:	0c0b      	lsrs	r3, r1, #16
 800231a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231c:	3102      	adds	r1, #2
 800231e:	6838      	ldr	r0, [r7, #0]
 8002320:	4401      	add	r1, r0
 8002322:	b2d3      	uxtb	r3, r2
 8002324:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	0e02      	lsrs	r2, r0, #24
 8002334:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002338:	0e0b      	lsrs	r3, r1, #24
 800233a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800233c:	3103      	adds	r1, #3
 800233e:	6838      	ldr	r0, [r7, #0]
 8002340:	4401      	add	r1, r0
 8002342:	b2d3      	uxtb	r3, r2
 8002344:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	000a      	movs	r2, r1
 8002354:	2300      	movs	r3, #0
 8002356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002358:	3104      	adds	r1, #4
 800235a:	6838      	ldr	r0, [r7, #0]
 800235c:	4401      	add	r1, r0
 800235e:	b2d3      	uxtb	r3, r2
 8002360:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	0a0a      	lsrs	r2, r1, #8
 8002370:	2300      	movs	r3, #0
 8002372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002374:	3105      	adds	r1, #5
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	4401      	add	r1, r0
 800237a:	b2d3      	uxtb	r3, r2
 800237c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800237e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	0c0a      	lsrs	r2, r1, #16
 800238c:	2300      	movs	r3, #0
 800238e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002390:	3106      	adds	r1, #6
 8002392:	6838      	ldr	r0, [r7, #0]
 8002394:	4401      	add	r1, r0
 8002396:	b2d3      	uxtb	r3, r2
 8002398:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800239a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	0e0a      	lsrs	r2, r1, #24
 80023a8:	2300      	movs	r3, #0
 80023aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ac:	3107      	adds	r1, #7
 80023ae:	6838      	ldr	r0, [r7, #0]
 80023b0:	4401      	add	r1, r0
 80023b2:	b2d3      	uxtb	r3, r2
 80023b4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	3308      	adds	r3, #8
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80023be:	4618      	mov	r0, r3
 80023c0:	372c      	adds	r7, #44	; 0x2c
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80023ca:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80023ce:	b0eb      	sub	sp, #428	; 0x1ac
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80023d6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80023ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023f0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80023f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023f8:	4413      	add	r3, r2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2200      	movs	r2, #0
 8002400:	461c      	mov	r4, r3
 8002402:	4615      	mov	r5, r2
 8002404:	ea40 0804 	orr.w	r8, r0, r4
 8002408:	ea41 0905 	orr.w	r9, r1, r5
 800240c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002410:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002414:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2200      	movs	r2, #0
 8002426:	469a      	mov	sl, r3
 8002428:	4693      	mov	fp, r2
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002436:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800243a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800243e:	ea40 0402 	orr.w	r4, r0, r2
 8002442:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002446:	430b      	orrs	r3, r1
 8002448:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800244c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002450:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002454:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002458:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800245c:	1c9a      	adds	r2, r3, #2
 800245e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2200      	movs	r2, #0
 800246a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800246e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800247e:	464c      	mov	r4, r9
 8002480:	0423      	lsls	r3, r4, #16
 8002482:	4644      	mov	r4, r8
 8002484:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002488:	4644      	mov	r4, r8
 800248a:	0422      	lsls	r2, r4, #16
 800248c:	ea40 0402 	orr.w	r4, r0, r2
 8002490:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002494:	430b      	orrs	r3, r1
 8002496:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800249a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800249e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024a2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024aa:	1cda      	adds	r2, r3, #3
 80024ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80024bc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80024c0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80024c4:	4623      	mov	r3, r4
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80024cc:	4623      	mov	r3, r4
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80024d4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80024d8:	4623      	mov	r3, r4
 80024da:	4303      	orrs	r3, r0
 80024dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024e0:	462b      	mov	r3, r5
 80024e2:	430b      	orrs	r3, r1
 80024e4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024e8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80024ec:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80024f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024f8:	1d1a      	adds	r2, r3, #4
 80024fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2200      	movs	r2, #0
 8002506:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800250a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800251a:	0023      	movs	r3, r4
 800251c:	2200      	movs	r2, #0
 800251e:	ea40 0402 	orr.w	r4, r0, r2
 8002522:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002526:	430b      	orrs	r3, r1
 8002528:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800252c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002530:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002534:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002538:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800253c:	1d5a      	adds	r2, r3, #5
 800253e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800254e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800255e:	0223      	lsls	r3, r4, #8
 8002560:	2200      	movs	r2, #0
 8002562:	ea40 0402 	orr.w	r4, r0, r2
 8002566:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800256a:	430b      	orrs	r3, r1
 800256c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002570:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002574:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002578:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800257c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002580:	1d9a      	adds	r2, r3, #6
 8002582:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002586:	4413      	add	r3, r2
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2200      	movs	r2, #0
 800258e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002592:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80025a2:	0423      	lsls	r3, r4, #16
 80025a4:	2200      	movs	r2, #0
 80025a6:	ea40 0402 	orr.w	r4, r0, r2
 80025aa:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80025ae:	430b      	orrs	r3, r1
 80025b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025b4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80025b8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80025bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80025c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025c4:	1dda      	adds	r2, r3, #7
 80025c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025ca:	4413      	add	r3, r2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80025d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80025e6:	0623      	lsls	r3, r4, #24
 80025e8:	2200      	movs	r2, #0
 80025ea:	ea40 0402 	orr.w	r4, r0, r2
 80025ee:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80025f2:	430b      	orrs	r3, r1
 80025f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80025f8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80025fc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002600:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002604:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002608:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800260c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002610:	3308      	adds	r3, #8
 8002612:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002622:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002626:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800262a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800262e:	4413      	add	r3, r2
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2200      	movs	r2, #0
 8002636:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800263a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800263e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002642:	4623      	mov	r3, r4
 8002644:	4303      	orrs	r3, r0
 8002646:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800264a:	462b      	mov	r3, r5
 800264c:	430b      	orrs	r3, r1
 800264e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002652:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002656:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800265a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800265e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002674:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002684:	464c      	mov	r4, r9
 8002686:	0223      	lsls	r3, r4, #8
 8002688:	4644      	mov	r4, r8
 800268a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800268e:	4644      	mov	r4, r8
 8002690:	0222      	lsls	r2, r4, #8
 8002692:	ea40 0402 	orr.w	r4, r0, r2
 8002696:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800269a:	430b      	orrs	r3, r1
 800269c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80026a0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80026a4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026b0:	1c9a      	adds	r2, r3, #2
 80026b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2200      	movs	r2, #0
 80026be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80026d2:	464c      	mov	r4, r9
 80026d4:	0423      	lsls	r3, r4, #16
 80026d6:	4644      	mov	r4, r8
 80026d8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80026dc:	4644      	mov	r4, r8
 80026de:	0422      	lsls	r2, r4, #16
 80026e0:	ea40 0402 	orr.w	r4, r0, r2
 80026e4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80026e8:	430b      	orrs	r3, r1
 80026ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026ee:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80026f2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026f6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026fe:	1cda      	adds	r2, r3, #3
 8002700:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002704:	4413      	add	r3, r2
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002710:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002714:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002718:	4623      	mov	r3, r4
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002720:	4623      	mov	r3, r4
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002728:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800272c:	4623      	mov	r3, r4
 800272e:	4303      	orrs	r3, r0
 8002730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002734:	462b      	mov	r3, r5
 8002736:	430b      	orrs	r3, r1
 8002738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800273c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002740:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002744:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002748:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800274c:	1d1a      	adds	r2, r3, #4
 800274e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002752:	4413      	add	r3, r2
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2200      	movs	r2, #0
 800275a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800275e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800276e:	0023      	movs	r3, r4
 8002770:	2200      	movs	r2, #0
 8002772:	ea40 0402 	orr.w	r4, r0, r2
 8002776:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800277a:	430b      	orrs	r3, r1
 800277c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002780:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002784:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002788:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800278c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002790:	1d5a      	adds	r2, r3, #5
 8002792:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002796:	4413      	add	r3, r2
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2200      	movs	r2, #0
 800279e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027a2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80027b2:	0223      	lsls	r3, r4, #8
 80027b4:	2200      	movs	r2, #0
 80027b6:	ea40 0402 	orr.w	r4, r0, r2
 80027ba:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80027be:	430b      	orrs	r3, r1
 80027c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027c4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80027c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80027cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027d4:	1d9a      	adds	r2, r3, #6
 80027d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2200      	movs	r2, #0
 80027e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80027f6:	0423      	lsls	r3, r4, #16
 80027f8:	2200      	movs	r2, #0
 80027fa:	ea40 0402 	orr.w	r4, r0, r2
 80027fe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002802:	430b      	orrs	r3, r1
 8002804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002808:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800280c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002810:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002814:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002818:	1dda      	adds	r2, r3, #7
 800281a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2200      	movs	r2, #0
 8002826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800282a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800283a:	0623      	lsls	r3, r4, #24
 800283c:	2200      	movs	r2, #0
 800283e:	ea40 0402 	orr.w	r4, r0, r2
 8002842:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002846:	430b      	orrs	r3, r1
 8002848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800284c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002850:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002854:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002858:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800285c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002860:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002864:	3308      	adds	r3, #8
 8002866:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002876:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800287a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800287e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002882:	4413      	add	r3, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2200      	movs	r2, #0
 800288a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800288e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002892:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002896:	4623      	mov	r3, r4
 8002898:	4303      	orrs	r3, r0
 800289a:	67bb      	str	r3, [r7, #120]	; 0x78
 800289c:	462b      	mov	r3, r5
 800289e:	430b      	orrs	r3, r1
 80028a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028a2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80028a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028b8:	4413      	add	r3, r2
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2200      	movs	r2, #0
 80028c0:	673b      	str	r3, [r7, #112]	; 0x70
 80028c2:	677a      	str	r2, [r7, #116]	; 0x74
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028d0:	464c      	mov	r4, r9
 80028d2:	0223      	lsls	r3, r4, #8
 80028d4:	4644      	mov	r4, r8
 80028d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80028da:	4644      	mov	r4, r8
 80028dc:	0222      	lsls	r2, r4, #8
 80028de:	ea40 0402 	orr.w	r4, r0, r2
 80028e2:	66bc      	str	r4, [r7, #104]	; 0x68
 80028e4:	430b      	orrs	r3, r1
 80028e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028e8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80028ec:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028f0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2200      	movs	r2, #0
 8002906:	663b      	str	r3, [r7, #96]	; 0x60
 8002908:	667a      	str	r2, [r7, #100]	; 0x64
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002916:	464c      	mov	r4, r9
 8002918:	0423      	lsls	r3, r4, #16
 800291a:	4644      	mov	r4, r8
 800291c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002920:	4644      	mov	r4, r8
 8002922:	0422      	lsls	r2, r4, #16
 8002924:	ea40 0402 	orr.w	r4, r0, r2
 8002928:	65bc      	str	r4, [r7, #88]	; 0x58
 800292a:	430b      	orrs	r3, r1
 800292c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800292e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002932:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002936:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800293a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800293e:	1cda      	adds	r2, r3, #3
 8002940:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2200      	movs	r2, #0
 800294c:	653b      	str	r3, [r7, #80]	; 0x50
 800294e:	657a      	str	r2, [r7, #84]	; 0x54
 8002950:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002954:	4623      	mov	r3, r4
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295a:	4623      	mov	r3, r4
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002960:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002964:	4623      	mov	r3, r4
 8002966:	4303      	orrs	r3, r0
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
 800296a:	462b      	mov	r3, r5
 800296c:	430b      	orrs	r3, r1
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
 8002970:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002974:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002978:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800297c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002980:	1d1a      	adds	r2, r3, #4
 8002982:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002986:	4413      	add	r3, r2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2200      	movs	r2, #0
 800298e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002990:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800299c:	0023      	movs	r3, r4
 800299e:	2200      	movs	r2, #0
 80029a0:	ea40 0402 	orr.w	r4, r0, r2
 80029a4:	633c      	str	r4, [r7, #48]	; 0x30
 80029a6:	430b      	orrs	r3, r1
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
 80029aa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80029ae:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80029b2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029ba:	1d5a      	adds	r2, r3, #5
 80029bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c0:	4413      	add	r3, r2
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2200      	movs	r2, #0
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80029d6:	0223      	lsls	r3, r4, #8
 80029d8:	2200      	movs	r2, #0
 80029da:	ea40 0402 	orr.w	r4, r0, r2
 80029de:	623c      	str	r4, [r7, #32]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80029e8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80029ec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f4:	3306      	adds	r3, #6
 80029f6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	61fa      	str	r2, [r7, #28]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	69bc      	ldr	r4, [r7, #24]
 8002a10:	0423      	lsls	r3, r4, #16
 8002a12:	2200      	movs	r2, #0
 8002a14:	ea40 0402 	orr.w	r4, r0, r2
 8002a18:	613c      	str	r4, [r7, #16]
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a22:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a26:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a2e:	3307      	adds	r3, #7
 8002a30:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002a34:	4413      	add	r3, r2
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	60fa      	str	r2, [r7, #12]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	68bc      	ldr	r4, [r7, #8]
 8002a4a:	0623      	lsls	r3, r4, #24
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	ea40 0402 	orr.w	r4, r0, r2
 8002a52:	603c      	str	r4, [r7, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002a5c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002a60:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002a64:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002a68:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002a6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a70:	3308      	adds	r3, #8
 8002a72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002a76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002a80:	46bd      	mov	sp, r7
 8002a82:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a86:	4770      	bx	lr

08002a88 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	08007ad0 	.word	0x08007ad0

08002aa4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	08007ae8 	.word	0x08007ae8

08002ac0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fb2c 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8002ad0:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
      linear(),
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3308      	adds	r3, #8
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fada 	bl	8002094 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3328      	adds	r3, #40	; 0x28
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fad5 	bl	8002094 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	08007c34 	.word	0x08007c34

08002af8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f103 0008 	add.w	r0, r3, #8
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7ff fae6 	bl	80020e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7ff fad9 	bl	80020e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
    }
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f103 0008 	add.w	r0, r3, #8
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7ff fc33 	bl	80023ca <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7ff fc26 	bl	80023ca <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
     return offset;
 8002b86:	68fb      	ldr	r3, [r7, #12]
    }
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	08007b0c 	.word	0x08007b0c

08002bac <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	08007b20 	.word	0x08007b20

08002bc8 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
      data(0)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe faa8 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8002bd8:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	809a      	strh	r2, [r3, #4]
    {
    }
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08007c1c 	.word	0x08007c1c

08002bf4 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c08:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002c0a:	8939      	ldrh	r1, [r7, #8]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	b2ca      	uxtb	r2, r1
 8002c14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	b2ca      	uxtb	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    }
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c4e:	893a      	ldrh	r2, [r7, #8]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6839      	ldr	r1, [r7, #0]
 8002c54:	440b      	add	r3, r1
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c60:	893b      	ldrh	r3, [r7, #8]
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3301      	adds	r3, #1
 8002c68:	6839      	ldr	r1, [r7, #0]
 8002c6a:	440b      	add	r3, r1
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	b21b      	sxth	r3, r3
 8002c72:	4313      	orrs	r3, r2
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002c7a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3302      	adds	r3, #2
 8002c86:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c88:	68fb      	ldr	r3, [r7, #12]
    }
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	08007b44 	.word	0x08007b44

08002cb4 <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	08007b54 	.word	0x08007b54

08002cd0 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE>:

float demandx = 0;
float demandz = 0;

void cmd_vel_cb( const geometry_msgs::Twist& twist)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
   demandx = twist.linear.x;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd fe6f 	bl	80009c4 <__aeabi_d2f>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8002cea:	6013      	str	r3, [r2, #0]
   demandz = twist.angular.z;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd fe65 	bl	80009c4 <__aeabi_d2f>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8002cfe:	6013      	str	r3, [r2, #0]
 }
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200001f8 	.word	0x200001f8
 8002d0c:	200001fc 	.word	0x200001fc

08002d10 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	08007c7c 	.word	0x08007c7c

08002d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ffe8 	bl	8002d10 <_ZN3ros15NodeHandleBase_C1Ev>
 8002d40:	4a36      	ldr	r2, [pc, #216]	; (8002e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f876 	bl	8001e3c <_ZN13STM32HardwareC1Ev>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f004 fcde 	bl	800773e <memset>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 fcd5 	bl	800773e <memset>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002d9a:	2264      	movs	r2, #100	; 0x64
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 fccd 	bl	800773e <memset>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8002daa:	2264      	movs	r2, #100	; 0x64
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fcc5 	bl	800773e <memset>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fd00 	bl	8001810 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	08007c08 	.word	0x08007c08

08002e20 <_Z10publishPosv>:
std_msgs::Int16 right_wheel_msg;
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );

void publishPos()
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  left_wheel_msg.data = pos_act_left;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <_Z10publishPosv+0x2c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b21a      	sxth	r2, r3
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <_Z10publishPosv+0x30>)
 8002e2c:	809a      	strh	r2, [r3, #4]
  right_wheel_msg.data = pos_act_right;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <_Z10publishPosv+0x34>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <_Z10publishPosv+0x38>)
 8002e36:	809a      	strh	r2, [r3, #4]
  left_wheel_pub.publish(&left_wheel_msg);
 8002e38:	4905      	ldr	r1, [pc, #20]	; (8002e50 <_Z10publishPosv+0x30>)
 8002e3a:	4808      	ldr	r0, [pc, #32]	; (8002e5c <_Z10publishPosv+0x3c>)
 8002e3c:	f7fe ffcb 	bl	8001dd6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  right_wheel_pub.publish(&right_wheel_msg);
 8002e40:	4905      	ldr	r1, [pc, #20]	; (8002e58 <_Z10publishPosv+0x38>)
 8002e42:	4807      	ldr	r0, [pc, #28]	; (8002e60 <_Z10publishPosv+0x40>)
 8002e44:	f7fe ffc7 	bl	8001dd6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	200001e0 	.word	0x200001e0
 8002e50:	20000b3c 	.word	0x20000b3c
 8002e54:	200001e4 	.word	0x200001e4
 8002e58:	20000b58 	.word	0x20000b58
 8002e5c:	20000b44 	.word	0x20000b44
 8002e60:	20000b60 	.word	0x20000b60

08002e64 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == LeftWheelEncoderChannelA_Pin)
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	2b80      	cmp	r3, #128	; 0x80
 8002e72:	d165      	bne.n	8002f40 <HAL_GPIO_EXTI_Callback+0xdc>
	{
		if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelA_GPIO_Port, LeftWheelEncoderChannelA_Pin) == 1)
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	4867      	ldr	r0, [pc, #412]	; (8003014 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002e78:	f002 f8d0 	bl	800501c <HAL_GPIO_ReadPin>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d026      	beq.n	8002eda <HAL_GPIO_EXTI_Callback+0x76>
		{
			if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 1) leftenc++;
 8002e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e90:	4860      	ldr	r0, [pc, #384]	; (8003014 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002e92:	f002 f8c3 	bl	800501c <HAL_GPIO_ReadPin>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_GPIO_EXTI_Callback+0x4e>
 8002ea6:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	4a5a      	ldr	r2, [pc, #360]	; (8003018 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	e0a8      	b.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 0) leftenc--;
 8002eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eb6:	4857      	ldr	r0, [pc, #348]	; (8003014 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002eb8:	f002 f8b0 	bl	800501c <HAL_GPIO_ReadPin>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 809b 	beq.w	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
 8002ece:	4b52      	ldr	r3, [pc, #328]	; (8003018 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	e094      	b.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
		else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelA_GPIO_Port, LeftWheelEncoderChannelA_Pin) == 0)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	484d      	ldr	r0, [pc, #308]	; (8003014 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002ede:	f002 f89d 	bl	800501c <HAL_GPIO_ReadPin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8088 	beq.w	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
		{
			if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 0) leftenc++;
 8002ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ef8:	4846      	ldr	r0, [pc, #280]	; (8003014 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002efa:	f002 f88f 	bl	800501c <HAL_GPIO_ReadPin>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_GPIO_EXTI_Callback+0xb6>
 8002f0e:	4b42      	ldr	r3, [pc, #264]	; (8003018 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a40      	ldr	r2, [pc, #256]	; (8003018 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e074      	b.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 1) leftenc--;
 8002f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f1e:	483d      	ldr	r0, [pc, #244]	; (8003014 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002f20:	f002 f87c 	bl	800501c <HAL_GPIO_ReadPin>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d067      	beq.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	4a37      	ldr	r2, [pc, #220]	; (8003018 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e061      	b.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
	}
	else if(GPIO_PIN == RightWheelEncoderChannelA_Pin)
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d15e      	bne.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
	{
		if(HAL_GPIO_ReadPin(RightWheelEncoderChannelA_GPIO_Port, RightWheelEncoderChannelA_Pin) == 1)
 8002f46:	2140      	movs	r1, #64	; 0x40
 8002f48:	4834      	ldr	r0, [pc, #208]	; (800301c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002f4a:	f002 f867 	bl	800501c <HAL_GPIO_ReadPin>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d023      	beq.n	8002fa6 <HAL_GPIO_EXTI_Callback+0x142>
		{
			if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 0) rightenc++;
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	482e      	ldr	r0, [pc, #184]	; (800301c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002f62:	f002 f85b 	bl	800501c <HAL_GPIO_ReadPin>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_GPIO_EXTI_Callback+0x11e>
 8002f76:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	4a28      	ldr	r2, [pc, #160]	; (8003020 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e040      	b.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 1) rightenc--;
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	4825      	ldr	r0, [pc, #148]	; (800301c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002f86:	f002 f849 	bl	800501c <HAL_GPIO_ReadPin>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d034      	beq.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
 8002f9a:	4b21      	ldr	r3, [pc, #132]	; (8003020 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	e02e      	b.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
		else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelA_GPIO_Port, RightWheelEncoderChannelA_Pin) == 0)
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	481c      	ldr	r0, [pc, #112]	; (800301c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002faa:	f002 f837 	bl	800501c <HAL_GPIO_ReadPin>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d022      	beq.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
		{
			if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 1) rightenc++;
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	4816      	ldr	r0, [pc, #88]	; (800301c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002fc2:	f002 f82b 	bl	800501c <HAL_GPIO_ReadPin>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_GPIO_EXTI_Callback+0x17e>
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	4a10      	ldr	r2, [pc, #64]	; (8003020 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	e010      	b.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 0) rightenc--;
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	480d      	ldr	r0, [pc, #52]	; (800301c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002fe6:	f002 f819 	bl	800501c <HAL_GPIO_ReadPin>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_GPIO_EXTI_Callback+0x1a0>
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	4a07      	ldr	r2, [pc, #28]	; (8003020 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003002:	6013      	str	r3, [r2, #0]
		}
	}
	flag = 1;
 8003004:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	200001d0 	.word	0x200001d0
 800301c:	40020400 	.word	0x40020400
 8003020:	200001d8 	.word	0x200001d8
 8003024:	200001cc 	.word	0x200001cc

08003028 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

	rpm_right = (int)((rightenc - rightenco) * 0.6);
 8003030:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa1e 	bl	800047c <__aeabi_i2d>
 8003040:	a343      	add	r3, pc, #268	; (adr r3, 8003150 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	f7fd fa83 	bl	8000550 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fc8f 	bl	8000974 <__aeabi_d2iz>
 8003056:	4603      	mov	r3, r0
 8003058:	4a43      	ldr	r2, [pc, #268]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800305a:	6013      	str	r3, [r2, #0]
	rpm_left = (int)((leftenc - leftenco) * 0.6);
 800305c:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fa08 	bl	800047c <__aeabi_i2d>
 800306c:	a338      	add	r3, pc, #224	; (adr r3, 8003150 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	f7fd fa6d 	bl	8000550 <__aeabi_dmul>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fc79 	bl	8000974 <__aeabi_d2iz>
 8003082:	4603      	mov	r3, r0
 8003084:	4a3b      	ldr	r2, [pc, #236]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003086:	6013      	str	r3, [r2, #0]
	rightvel = (int)((rpm_right * 6.28 * 7.5)/(60));
 8003088:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd f9f5 	bl	800047c <__aeabi_i2d>
 8003092:	a331      	add	r3, pc, #196	; (adr r3, 8003158 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f7fd fa5a 	bl	8000550 <__aeabi_dmul>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	4b33      	ldr	r3, [pc, #204]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80030aa:	f7fd fa51 	bl	8000550 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	4b30      	ldr	r3, [pc, #192]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80030bc:	f7fd fb72 	bl	80007a4 <__aeabi_ddiv>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7fd fc54 	bl	8000974 <__aeabi_d2iz>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80030d0:	6013      	str	r3, [r2, #0]
	leftvel = (int)((rpm_left * 6.28 * 7.5)/(60));
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd f9d0 	bl	800047c <__aeabi_i2d>
 80030dc:	a31e      	add	r3, pc, #120	; (adr r3, 8003158 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	f7fd fa35 	bl	8000550 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80030f4:	f7fd fa2c 	bl	8000550 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003106:	f7fd fb4d 	bl	80007a4 <__aeabi_ddiv>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f7fd fc2f 	bl	8000974 <__aeabi_d2iz>
 8003116:	4603      	mov	r3, r0
 8003118:	4a1a      	ldr	r2, [pc, #104]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800311a:	6013      	str	r3, [r2, #0]
	rightenco = rightenc;
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a10      	ldr	r2, [pc, #64]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003122:	6013      	str	r3, [r2, #0]
	leftenco = leftenc;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a11      	ldr	r2, [pc, #68]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800312a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800312c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003130:	4815      	ldr	r0, [pc, #84]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003132:	f001 ffa4 	bl	800507e <HAL_GPIO_TogglePin>
	pos_act_left = leftenc;
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a14      	ldr	r2, [pc, #80]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800313c:	6013      	str	r3, [r2, #0]
	pos_act_right = rightenc;
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a13      	ldr	r2, [pc, #76]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003144:	6013      	str	r3, [r2, #0]

}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	33333333 	.word	0x33333333
 8003154:	3fe33333 	.word	0x3fe33333
 8003158:	51eb851f 	.word	0x51eb851f
 800315c:	40191eb8 	.word	0x40191eb8
 8003160:	200001d8 	.word	0x200001d8
 8003164:	200001dc 	.word	0x200001dc
 8003168:	200001f0 	.word	0x200001f0
 800316c:	200001d0 	.word	0x200001d0
 8003170:	200001d4 	.word	0x200001d4
 8003174:	200001f4 	.word	0x200001f4
 8003178:	401e0000 	.word	0x401e0000
 800317c:	404e0000 	.word	0x404e0000
 8003180:	200001e8 	.word	0x200001e8
 8003184:	200001ec 	.word	0x200001ec
 8003188:	40020c00 	.word	0x40020c00
 800318c:	200001e0 	.word	0x200001e0
 8003190:	200001e4 	.word	0x200001e4

08003194 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800319c:	4805      	ldr	r0, [pc, #20]	; (80031b4 <HAL_UART_TxCpltCallback+0x20>)
 800319e:	f000 f8c1 	bl	8003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe feaf 	bl	8001f08 <_ZN13STM32Hardware5flushEv>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000200 	.word	0x20000200

080031b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80031c0:	4805      	ldr	r0, [pc, #20]	; (80031d8 <HAL_UART_RxCpltCallback+0x20>)
 80031c2:	f000 f8af 	bl	8003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe fe5e 	bl	8001e8a <_ZN13STM32Hardware10reset_rbufEv>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000200 	.word	0x20000200

080031dc <setup>:

void setup()
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
	nh.initNode();
 80031e0:	4808      	ldr	r0, [pc, #32]	; (8003204 <setup+0x28>)
 80031e2:	f000 f8ab 	bl	800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_wheel_pub);
 80031e6:	4908      	ldr	r1, [pc, #32]	; (8003208 <setup+0x2c>)
 80031e8:	4806      	ldr	r0, [pc, #24]	; (8003204 <setup+0x28>)
 80031ea:	f000 f8c4 	bl	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_wheel_pub);
 80031ee:	4907      	ldr	r1, [pc, #28]	; (800320c <setup+0x30>)
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <setup+0x28>)
 80031f2:	f000 f8c0 	bl	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub);
 80031f6:	4906      	ldr	r1, [pc, #24]	; (8003210 <setup+0x34>)
 80031f8:	4802      	ldr	r0, [pc, #8]	; (8003204 <setup+0x28>)
 80031fa:	f000 f8ec 	bl	80033d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000200 	.word	0x20000200
 8003208:	20000b44 	.word	0x20000b44
 800320c:	20000b60 	.word	0x20000b60
 8003210:	20000b78 	.word	0x20000b78

08003214 <loop>:

void loop()
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	publishPos();
 8003218:	f7ff fe02 	bl	8002e20 <_Z10publishPosv>
	nh.spinOnce();
 800321c:	4803      	ldr	r0, [pc, #12]	; (800322c <loop+0x18>)
 800321e:	f000 f905 	bl	800342c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(150);
 8003222:	2096      	movs	r0, #150	; 0x96
 8003224:	f001 f826 	bl	8004274 <HAL_Delay>
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000200 	.word	0x20000200

08003230 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e00c      	b.n	800325a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	fa22 f103 	lsr.w	r1, r2, r3
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	b2ca      	uxtb	r2, r1
 8003252:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d9ef      	bls.n	8003240 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e010      	b.n	80032a6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	440a      	add	r2, r1
 800328e:	7812      	ldrb	r2, [r2, #0]
 8003290:	4611      	mov	r1, r2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	00d2      	lsls	r2, r2, #3
 8003296:	fa01 f202 	lsl.w	r2, r1, r2
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d9eb      	bls.n	8003284 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	08007c64 	.word	0x08007c64

080032dc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ffe5 	bl	80032bc <_ZN3ros11Subscriber_C1Ev>
 80032f2:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3310      	adds	r3, #16
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fbdf 	bl	8002ac0 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	609a      	str	r2, [r3, #8]
  };
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	08007bf0 	.word	0x08007bf0

08003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
  }
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fd93 	bl	8001e74 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e01d      	b.n	80033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d111      	bne.n	80033bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	60da      	str	r2, [r3, #12]
        return true;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e006      	b.n	80033ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b18      	cmp	r3, #24
 80033c6:	ddde      	ble.n	8003386 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80033c8:	2300      	movs	r3, #0
  }
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e018      	b.n	8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	605a      	str	r2, [r3, #4]
        return true;
 800340e:	2301      	movs	r3, #1
 8003410:	e006      	b.n	8003420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b18      	cmp	r3, #24
 800341c:	dde3      	ble.n	80033e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800341e:	2300      	movs	r3, #0
  }
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fe1f 	bl	800207c <_ZN13STM32Hardware4timeEv>
 800343e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800344e:	4293      	cmp	r3, r2
 8003450:	d903      	bls.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	429a      	cmp	r2, r3
 800346e:	d903      	bls.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800347e:	2b00      	cmp	r3, #0
 8003480:	d014      	beq.n	80034ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fdf8 	bl	800207c <_ZN13STM32Hardware4timeEv>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad2      	subs	r2, r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003498:	429a      	cmp	r2, r3
 800349a:	bf8c      	ite	hi
 800349c:	2301      	movhi	r3, #1
 800349e:	2300      	movls	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80034a6:	f06f 0301 	mvn.w	r3, #1
 80034aa:	e194      	b.n	80037d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fcfb 	bl	8001eac <_ZN13STM32Hardware4readEv>
 80034b6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f2c0 8174 	blt.w	80037a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	441a      	add	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	d11e      	bne.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80034e0:	1c59      	adds	r1, r3, #1
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	b2d1      	uxtb	r1, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	460a      	mov	r2, r1
 80034f2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1b4      	bne.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2208      	movs	r2, #8
 8003512:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003516:	e7af      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800351e:	2b00      	cmp	r3, #0
 8003520:	d128      	bne.n	8003574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2bff      	cmp	r3, #255	; 0xff
 8003526:	d10d      	bne.n	8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f103 0214 	add.w	r2, r3, #20
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003542:	e799      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fd97 	bl	800207c <_ZN13STM32Hardware4timeEv>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	bf8c      	ite	hi
 800355c:	2301      	movhi	r3, #1
 800355e:	2300      	movls	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d088      	beq.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800356e:	f06f 0301 	mvn.w	r3, #1
 8003572:	e130      	b.n	80037d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800357a:	2b01      	cmp	r3, #1
 800357c:	d118      	bne.n	80035b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2bfe      	cmp	r3, #254	; 0xfe
 8003582:	d107      	bne.n	8003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003592:	e771      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f47f af68 	bne.w	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f918 	bl	80037de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80035ae:	e763      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d113      	bne.n	80035e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80035e0:	e74a      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d110      	bne.n	800360e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	441a      	add	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800360c:	e734      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003614:	2b04      	cmp	r3, #4
 8003616:	d116      	bne.n	8003646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800361e:	425a      	negs	r2, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	bf58      	it	pl
 8003626:	4253      	negpl	r3, r2
 8003628:	2bff      	cmp	r3, #255	; 0xff
 800362a:	d107      	bne.n	800363c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800363a:	e71d      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003644:	e718      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800364c:	2b05      	cmp	r3, #5
 800364e:	d10f      	bne.n	8003670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800366e:	e703      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003676:	2b06      	cmp	r3, #6
 8003678:	d117      	bne.n	80036aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	441a      	add	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2207      	movs	r2, #7
 8003690:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800369a:	2b00      	cmp	r3, #0
 800369c:	f47f aeec 	bne.w	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2208      	movs	r2, #8
 80036a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036a8:	e6e6      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	f47f aee1 	bne.w	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80036c4:	425a      	negs	r2, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	bf58      	it	pl
 80036cc:	4253      	negpl	r3, r2
 80036ce:	2bff      	cmp	r3, #255	; 0xff
 80036d0:	f47f aed2 	bne.w	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d110      	bne.n	8003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f87d 	bl	80037de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f898 	bl	800381a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	e06a      	b.n	80037d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003706:	2b0a      	cmp	r3, #10
 8003708:	d107      	bne.n	800371a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f960 	bl	80039d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003718:	e6ae      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003720:	2b06      	cmp	r3, #6
 8003722:	d10e      	bne.n	8003742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f7fe f9ab 	bl	8001a8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003740:	e69a      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003748:	2b0b      	cmp	r3, #11
 800374a:	d104      	bne.n	8003756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003754:	e690      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800375c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f43f ae84 	beq.w	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003776:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003780:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800378a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80037a2:	4611      	mov	r1, r2
 80037a4:	4798      	blx	r3
    while (true)
 80037a6:	e667      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80037a8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00f      	beq.n	80037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d906      	bls.n	80037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f809 	bl	80037de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80037d4:	2300      	movs	r3, #0
  }
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80037e6:	f107 030c 	add.w	r3, r7, #12
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fcac 	bl	8001148 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f107 020c 	add.w	r2, r7, #12
 80037fa:	210a      	movs	r1, #10
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
    rt_time = hardware_.time();
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fc39 	bl	800207c <_ZN13STM32Hardware4timeEv>
 800380a:	4602      	mov	r2, r0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800381a:	b590      	push	{r4, r7, lr}
 800381c:	b08b      	sub	sp, #44	; 0x2c
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fd7e 	bl	8001328 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	e062      	b.n	80038f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d056      	beq.n	80038f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	b29b      	uxth	r3, r3
 8003856:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4608      	mov	r0, r1
 8003892:	4798      	blx	r3
 8003894:	4603      	mov	r3, r0
 8003896:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4608      	mov	r0, r1
 80038c0:	4798      	blx	r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80038c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ca:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681c      	ldr	r4, [r3, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fa8c 	bl	8001dfe <_ZN3ros9Publisher15getEndpointTypeEv>
 80038e6:	4601      	mov	r1, r0
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	461a      	mov	r2, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	3301      	adds	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	2b18      	cmp	r3, #24
 80038fc:	dd99      	ble.n	8003832 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	e05e      	b.n	80039c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003908:	f202 2222 	addw	r2, r2, #546	; 0x222
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d053      	beq.n	80039bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	f202 2222 	addw	r2, r2, #546	; 0x222
 800391c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	b29b      	uxth	r3, r3
 8003924:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800392e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800393e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003946:	f202 2222 	addw	r2, r2, #546	; 0x222
 800394a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3308      	adds	r3, #8
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4608      	mov	r0, r1
 8003956:	4798      	blx	r3
 8003958:	4603      	mov	r3, r0
 800395a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4608      	mov	r0, r1
 800397c:	4798      	blx	r3
 800397e:	4603      	mov	r3, r0
 8003980:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003986:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681c      	ldr	r4, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003992:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003996:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3304      	adds	r3, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4798      	blx	r3
 80039b0:	4601      	mov	r1, r0
 80039b2:	f107 030c 	add.w	r3, r7, #12
 80039b6:	461a      	mov	r2, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	3301      	adds	r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	2b18      	cmp	r3, #24
 80039c6:	dd9d      	ble.n	8003904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80039d0:	bf00      	nop
 80039d2:	372c      	adds	r7, #44	; 0x2c
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd90      	pop	{r4, r7, pc}

080039d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd fbae 	bl	8001148 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe fb43 	bl	800207c <_ZN13STM32Hardware4timeEv>
 80039f6:	4602      	mov	r2, r0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	6839      	ldr	r1, [r7, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fd fc0d 	bl	8001228 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4915      	ldr	r1, [pc, #84]	; (8003a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a14:	fba1 1303 	umull	r1, r3, r1, r3
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003a1e:	6939      	ldr	r1, [r7, #16]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a24:	fba3 0302 	umull	r0, r3, r3, r2
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a2e:	fb00 f303 	mul.w	r3, r0, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f8a6 	bl	8003b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fb13 	bl	800207c <_ZN13STM32Hardware4timeEv>
 8003a56:	4602      	mov	r2, r0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	10624dd3 	.word	0x10624dd3
 8003a6c:	000f4240 	.word	0x000f4240

08003a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b63      	cmp	r3, #99	; 0x63
 8003a80:	dd09      	ble.n	8003a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003a88:	f083 0301 	eor.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e079      	b.n	8003b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003aa2:	3207      	adds	r2, #7
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
 8003aaa:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	22ff      	movs	r2, #255	; 0xff
 8003ab0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	22fe      	movs	r2, #254	; 0xfe
 8003ab8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003ae2:	4413      	add	r3, r2
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	b21b      	sxth	r3, r3
 8003afe:	121b      	asrs	r3, r3, #8
 8003b00:	b21b      	sxth	r3, r3
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b0e:	2305      	movs	r3, #5
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e00c      	b.n	8003b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	3306      	adds	r3, #6
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	dded      	ble.n	8003b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3307      	adds	r3, #7
 8003b3c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	425a      	negs	r2, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	bf58      	it	pl
 8003b48:	4253      	negpl	r3, r2
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1c59      	adds	r1, r3, #1
 8003b50:	6179      	str	r1, [r7, #20]
 8003b52:	43d2      	mvns	r2, r2
 8003b54:	b2d1      	uxtb	r1, r2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b66:	dc0a      	bgt.n	8003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1d18      	adds	r0, r3, #4
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f7fe fa3b 	bl	8001ff0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	e005      	b.n	8003b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003b7e:	4905      	ldr	r1, [pc, #20]	; (8003b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f849 	bl	8003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	08007b78 	.word	0x08007b78

08003b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fa68 	bl	800207c <_ZN13STM32Hardware4timeEv>
 8003bac:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4915      	ldr	r1, [pc, #84]	; (8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003bb6:	fba1 1303 	umull	r1, r3, r1, r3
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	1e5a      	subs	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003bce:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bd8:	fb00 f303 	mul.w	r3, r0, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	1aca      	subs	r2, r1, r3
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003be8:	4413      	add	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f000 fa70 	bl	80040e4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	10624dd3 	.word	0x10624dd3
 8003c10:	000f4240 	.word	0x000f4240
 8003c14:	3b9aca00 	.word	0x3b9aca00

08003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	2103      	movs	r1, #3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f804 	bl	8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd fd32 	bl	80016b0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
 8003c4e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f107 0214 	add.w	r2, r7, #20
 8003c5e:	2107      	movs	r1, #7
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	4798      	blx	r3
  }
 8003c64:	bf00      	nop
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_Z41__static_initialization_and_destruction_0ii>:
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d11f      	bne.n	8003cbc <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d11a      	bne.n	8003cbc <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003c86:	480f      	ldr	r0, [pc, #60]	; (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003c88:	f7ff f852 	bl	8002d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 left_wheel_msg;
 8003c8c:	480e      	ldr	r0, [pc, #56]	; (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003c8e:	f7fe ff9b 	bl	8002bc8 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher left_wheel_pub("lwheel", &left_wheel_msg);
 8003c92:	2300      	movs	r3, #0
 8003c94:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003c96:	490d      	ldr	r1, [pc, #52]	; (8003ccc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003c98:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003c9a:	f7fe f885 	bl	8001da8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int16 right_wheel_msg;
 8003c9e:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003ca0:	f7fe ff92 	bl	8002bc8 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003ca8:	490b      	ldr	r1, [pc, #44]	; (8003cd8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003caa:	480c      	ldr	r0, [pc, #48]	; (8003cdc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003cac:	f7fe f87c 	bl	8001da8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003cb4:	490b      	ldr	r1, [pc, #44]	; (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003cb6:	480c      	ldr	r0, [pc, #48]	; (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003cb8:	f7ff fb10 	bl	80032dc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000200 	.word	0x20000200
 8003cc8:	20000b3c 	.word	0x20000b3c
 8003ccc:	08007bb4 	.word	0x08007bb4
 8003cd0:	20000b44 	.word	0x20000b44
 8003cd4:	20000b58 	.word	0x20000b58
 8003cd8:	08007bbc 	.word	0x08007bbc
 8003cdc:	20000b60 	.word	0x20000b60
 8003ce0:	08002cd1 	.word	0x08002cd1
 8003ce4:	08007bc4 	.word	0x08007bc4
 8003ce8:	20000b78 	.word	0x20000b78

08003cec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3310      	adds	r3, #16
 8003cfa:	6839      	ldr	r1, [r7, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe ff21 	bl	8002b44 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	3210      	adds	r2, #16
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4798      	blx	r3
  }
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3310      	adds	r3, #16
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe ff28 	bl	8002b90 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003d40:	4603      	mov	r3, r0
  }
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3310      	adds	r3, #16
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe ff28 	bl	8002bac <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003d5c:	4603      	mov	r3, r0
  }
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
    return configured_;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_GLOBAL__sub_I_flag>:
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f7ff ff6f 	bl	8003c6c <_Z41__static_initialization_and_destruction_0ii>
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_MspInit+0x4c>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	4a0f      	ldr	r2, [pc, #60]	; (8003ddc <HAL_MspInit+0x4c>)
 8003da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da4:	6453      	str	r3, [r2, #68]	; 0x44
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_MspInit+0x4c>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dae:	607b      	str	r3, [r7, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_MspInit+0x4c>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_MspInit+0x4c>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_MspInit+0x4c>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003dce:	2007      	movs	r0, #7
 8003dd0:	f000 fb44 	bl	800445c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d115      	bne.n	8003e1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <HAL_TIM_Base_MspInit+0x48>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <HAL_TIM_Base_MspInit+0x48>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_TIM_Base_MspInit+0x48>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2100      	movs	r1, #0
 8003e12:	201c      	movs	r0, #28
 8003e14:	f000 fb2d 	bl	8004472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e18:	201c      	movs	r0, #28
 8003e1a:	f000 fb46 	bl	80044aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a4d      	ldr	r2, [pc, #308]	; (8003f80 <HAL_UART_MspInit+0x154>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	f040 8093 	bne.w	8003f76 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <HAL_UART_MspInit+0x158>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4a4a      	ldr	r2, [pc, #296]	; (8003f84 <HAL_UART_MspInit+0x158>)
 8003e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e60:	4b48      	ldr	r3, [pc, #288]	; (8003f84 <HAL_UART_MspInit+0x158>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	4b44      	ldr	r3, [pc, #272]	; (8003f84 <HAL_UART_MspInit+0x158>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	4a43      	ldr	r2, [pc, #268]	; (8003f84 <HAL_UART_MspInit+0x158>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7c:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_UART_MspInit+0x158>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e88:	230c      	movs	r3, #12
 8003e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e94:	2303      	movs	r3, #3
 8003e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e98:	2307      	movs	r3, #7
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4839      	ldr	r0, [pc, #228]	; (8003f88 <HAL_UART_MspInit+0x15c>)
 8003ea4:	f000 ff1e 	bl	8004ce4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003ea8:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003eaa:	4a39      	ldr	r2, [pc, #228]	; (8003f90 <HAL_UART_MspInit+0x164>)
 8003eac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003eae:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003eb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003eb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eb6:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ebc:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ec2:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ec8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eca:	4b30      	ldr	r3, [pc, #192]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003ed6:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003edc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003ede:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003ee0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ee4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ee6:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003eec:	4827      	ldr	r0, [pc, #156]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003eee:	f000 faf7 	bl	80044e0 <HAL_DMA_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003ef8:	f7fd f900 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a23      	ldr	r2, [pc, #140]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
 8003f02:	4a22      	ldr	r2, [pc, #136]	; (8003f8c <HAL_UART_MspInit+0x160>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003f08:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f0a:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <HAL_UART_MspInit+0x16c>)
 8003f0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003f0e:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f14:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f16:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f18:	2240      	movs	r2, #64	; 0x40
 8003f1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f22:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f28:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f42:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f4a:	4812      	ldr	r0, [pc, #72]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f4c:	f000 fac8 	bl	80044e0 <HAL_DMA_Init>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003f56:	f7fd f8d1 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f5e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f60:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <HAL_UART_MspInit+0x168>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f66:	2200      	movs	r2, #0
 8003f68:	2100      	movs	r1, #0
 8003f6a:	2026      	movs	r0, #38	; 0x26
 8003f6c:	f000 fa81 	bl	8004472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f70:	2026      	movs	r0, #38	; 0x26
 8003f72:	f000 fa9a 	bl	80044aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f76:	bf00      	nop
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40004400 	.word	0x40004400
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	20000108 	.word	0x20000108
 8003f90:	40026088 	.word	0x40026088
 8003f94:	20000168 	.word	0x20000168
 8003f98:	400260a0 	.word	0x400260a0

08003f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fa0:	e7fe      	b.n	8003fa0 <NMI_Handler+0x4>

08003fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fa6:	e7fe      	b.n	8003fa6 <HardFault_Handler+0x4>

08003fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fac:	e7fe      	b.n	8003fac <MemManage_Handler+0x4>

08003fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fb2:	e7fe      	b.n	8003fb2 <BusFault_Handler+0x4>

08003fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fb8:	e7fe      	b.n	8003fb8 <UsageFault_Handler+0x4>

08003fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fe8:	f000 f924 	bl	8004234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ff4:	4802      	ldr	r0, [pc, #8]	; (8004000 <DMA1_Stream5_IRQHandler+0x10>)
 8003ff6:	f000 fc0b 	bl	8004810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000108 	.word	0x20000108

08004004 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004008:	4802      	ldr	r0, [pc, #8]	; (8004014 <DMA1_Stream6_IRQHandler+0x10>)
 800400a:	f000 fc01 	bl	8004810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000168 	.word	0x20000168

08004018 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RightWheelEncoderChannelA_Pin);
 800401c:	2040      	movs	r0, #64	; 0x40
 800401e:	f001 f849 	bl	80050b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LeftWheelEncoderChannelA_Pin);
 8004022:	2080      	movs	r0, #128	; 0x80
 8004024:	f001 f846 	bl	80050b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}

0800402c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <TIM2_IRQHandler+0x10>)
 8004032:	f001 fdaf 	bl	8005b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	2000007c 	.word	0x2000007c

08004040 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004044:	4802      	ldr	r0, [pc, #8]	; (8004050 <USART2_IRQHandler+0x10>)
 8004046:	f002 fa63 	bl	8006510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200000c4 	.word	0x200000c4

08004054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800405c:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <_sbrk+0x5c>)
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <_sbrk+0x60>)
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <_sbrk+0x64>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <_sbrk+0x64>)
 8004072:	4a12      	ldr	r2, [pc, #72]	; (80040bc <_sbrk+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <_sbrk+0x64>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d207      	bcs.n	8004094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004084:	f003 fb64 	bl	8007750 <__errno>
 8004088:	4603      	mov	r3, r0
 800408a:	220c      	movs	r2, #12
 800408c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	e009      	b.n	80040a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004094:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <_sbrk+0x64>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <_sbrk+0x64>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	4a05      	ldr	r2, [pc, #20]	; (80040b8 <_sbrk+0x64>)
 80040a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040a6:	68fb      	ldr	r3, [r7, #12]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20020000 	.word	0x20020000
 80040b4:	00000400 	.word	0x00000400
 80040b8:	20000bd8 	.word	0x20000bd8
 80040bc:	20000d28 	.word	0x20000d28

080040c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <SystemInit+0x20>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <SystemInit+0x20>)
 80040cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	0a5a      	lsrs	r2, r3, #9
 80040f4:	490f      	ldr	r1, [pc, #60]	; (8004134 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80040f6:	fba1 1202 	umull	r1, r2, r1, r2
 80040fa:	09d2      	lsrs	r2, r2, #7
 80040fc:	490e      	ldr	r1, [pc, #56]	; (8004138 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80040fe:	fb01 f202 	mul.w	r2, r1, r2
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0a5b      	lsrs	r3, r3, #9
 800410c:	4a09      	ldr	r2, [pc, #36]	; (8004134 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	09db      	lsrs	r3, r3, #7
 8004114:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	441a      	add	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	00044b83 	.word	0x00044b83
 8004138:	3b9aca00 	.word	0x3b9aca00

0800413c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800413c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004140:	480d      	ldr	r0, [pc, #52]	; (8004178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004142:	490e      	ldr	r1, [pc, #56]	; (800417c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004144:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004148:	e002      	b.n	8004150 <LoopCopyDataInit>

0800414a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800414a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800414c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800414e:	3304      	adds	r3, #4

08004150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004154:	d3f9      	bcc.n	800414a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004156:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004158:	4c0b      	ldr	r4, [pc, #44]	; (8004188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800415a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800415c:	e001      	b.n	8004162 <LoopFillZerobss>

0800415e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800415e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004160:	3204      	adds	r2, #4

08004162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004164:	d3fb      	bcc.n	800415e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004166:	f7ff ffab 	bl	80040c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800416a:	f003 faf7 	bl	800775c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800416e:	f7fc fdf7 	bl	8000d60 <main>
  bx  lr    
 8004172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800417c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004180:	08007d34 	.word	0x08007d34
  ldr r2, =_sbss
 8004184:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004188:	20000d28 	.word	0x20000d28

0800418c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800418c:	e7fe      	b.n	800418c <ADC_IRQHandler>
	...

08004190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <HAL_Init+0x40>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0d      	ldr	r2, [pc, #52]	; (80041d0 <HAL_Init+0x40>)
 800419a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800419e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_Init+0x40>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <HAL_Init+0x40>)
 80041a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_Init+0x40>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <HAL_Init+0x40>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b8:	2003      	movs	r0, #3
 80041ba:	f000 f94f 	bl	800445c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041be:	2000      	movs	r0, #0
 80041c0:	f000 f808 	bl	80041d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041c4:	f7ff fde4 	bl	8003d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023c00 	.word	0x40023c00

080041d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_InitTick+0x54>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_InitTick+0x58>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	4619      	mov	r1, r3
 80041e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f967 	bl	80044c6 <HAL_SYSTICK_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e00e      	b.n	8004220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b0f      	cmp	r3, #15
 8004206:	d80a      	bhi.n	800421e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004208:	2200      	movs	r2, #0
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	f000 f92f 	bl	8004472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004214:	4a06      	ldr	r2, [pc, #24]	; (8004230 <HAL_InitTick+0x5c>)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000000 	.word	0x20000000
 800422c:	20000008 	.word	0x20000008
 8004230:	20000004 	.word	0x20000004

08004234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_IncTick+0x20>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_IncTick+0x24>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4413      	add	r3, r2
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <HAL_IncTick+0x24>)
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000008 	.word	0x20000008
 8004258:	20000bdc 	.word	0x20000bdc

0800425c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return uwTick;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_GetTick+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000bdc 	.word	0x20000bdc

08004274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7ff ffee 	bl	800425c <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d005      	beq.n	800429a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <HAL_Delay+0x44>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800429a:	bf00      	nop
 800429c:	f7ff ffde 	bl	800425c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d8f7      	bhi.n	800429c <HAL_Delay+0x28>
  {
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000008 	.word	0x20000008

080042bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042d8:	4013      	ands	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ee:	4a04      	ldr	r2, [pc, #16]	; (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	60d3      	str	r3, [r2, #12]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <__NVIC_GetPriorityGrouping+0x18>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	f003 0307 	and.w	r3, r3, #7
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	db0b      	blt.n	800434a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	4907      	ldr	r1, [pc, #28]	; (8004358 <__NVIC_EnableIRQ+0x38>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2001      	movs	r0, #1
 8004342:	fa00 f202 	lsl.w	r2, r0, r2
 8004346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000e100 	.word	0xe000e100

0800435c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436c:	2b00      	cmp	r3, #0
 800436e:	db0a      	blt.n	8004386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	490c      	ldr	r1, [pc, #48]	; (80043a8 <__NVIC_SetPriority+0x4c>)
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	0112      	lsls	r2, r2, #4
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	440b      	add	r3, r1
 8004380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004384:	e00a      	b.n	800439c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	4908      	ldr	r1, [pc, #32]	; (80043ac <__NVIC_SetPriority+0x50>)
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	3b04      	subs	r3, #4
 8004394:	0112      	lsls	r2, r2, #4
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	440b      	add	r3, r1
 800439a:	761a      	strb	r2, [r3, #24]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000e100 	.word	0xe000e100
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	; 0x24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f1c3 0307 	rsb	r3, r3, #7
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	bf28      	it	cs
 80043ce:	2304      	movcs	r3, #4
 80043d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d902      	bls.n	80043e0 <NVIC_EncodePriority+0x30>
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3b03      	subs	r3, #3
 80043de:	e000      	b.n	80043e2 <NVIC_EncodePriority+0x32>
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43da      	mvns	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	401a      	ands	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	43d9      	mvns	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004408:	4313      	orrs	r3, r2
         );
}
 800440a:	4618      	mov	r0, r3
 800440c:	3724      	adds	r7, #36	; 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004428:	d301      	bcc.n	800442e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800442a:	2301      	movs	r3, #1
 800442c:	e00f      	b.n	800444e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <SysTick_Config+0x40>)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3b01      	subs	r3, #1
 8004434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004436:	210f      	movs	r1, #15
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	f7ff ff8e 	bl	800435c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <SysTick_Config+0x40>)
 8004442:	2200      	movs	r2, #0
 8004444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004446:	4b04      	ldr	r3, [pc, #16]	; (8004458 <SysTick_Config+0x40>)
 8004448:	2207      	movs	r2, #7
 800444a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	e000e010 	.word	0xe000e010

0800445c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ff29 	bl	80042bc <__NVIC_SetPriorityGrouping>
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af00      	add	r7, sp, #0
 8004478:	4603      	mov	r3, r0
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004484:	f7ff ff3e 	bl	8004304 <__NVIC_GetPriorityGrouping>
 8004488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	6978      	ldr	r0, [r7, #20]
 8004490:	f7ff ff8e 	bl	80043b0 <NVIC_EncodePriority>
 8004494:	4602      	mov	r2, r0
 8004496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ff5d 	bl	800435c <__NVIC_SetPriority>
}
 80044a2:	bf00      	nop
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	4603      	mov	r3, r0
 80044b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ff31 	bl	8004320 <__NVIC_EnableIRQ>
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ffa2 	bl	8004418 <SysTick_Config>
 80044d4:	4603      	mov	r3, r0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044ec:	f7ff feb6 	bl	800425c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e099      	b.n	8004630 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800451c:	e00f      	b.n	800453e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800451e:	f7ff fe9d 	bl	800425c <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b05      	cmp	r3, #5
 800452a:	d908      	bls.n	800453e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2203      	movs	r2, #3
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e078      	b.n	8004630 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e8      	bne.n	800451e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4b38      	ldr	r3, [pc, #224]	; (8004638 <HAL_DMA_Init+0x158>)
 8004558:	4013      	ands	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2b04      	cmp	r3, #4
 8004596:	d107      	bne.n	80045a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4313      	orrs	r3, r2
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d117      	bne.n	8004602 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00e      	beq.n	8004602 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fb01 	bl	8004bec <DMA_CheckFifoParam>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2240      	movs	r2, #64	; 0x40
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045fe:	2301      	movs	r3, #1
 8004600:	e016      	b.n	8004630 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fab8 	bl	8004b80 <DMA_CalcBaseAndBitshift>
 8004610:	4603      	mov	r3, r0
 8004612:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	223f      	movs	r2, #63	; 0x3f
 800461a:	409a      	lsls	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	f010803f 	.word	0xf010803f

0800463c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_DMA_Start_IT+0x26>
 800465e:	2302      	movs	r3, #2
 8004660:	e040      	b.n	80046e4 <HAL_DMA_Start_IT+0xa8>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b01      	cmp	r3, #1
 8004674:	d12f      	bne.n	80046d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fa4a 	bl	8004b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	223f      	movs	r2, #63	; 0x3f
 8004696:	409a      	lsls	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0216 	orr.w	r2, r2, #22
 80046aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0208 	orr.w	r2, r2, #8
 80046c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e005      	b.n	80046e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046de:	2302      	movs	r3, #2
 80046e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046fa:	f7ff fdaf 	bl	800425c <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d008      	beq.n	800471e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2280      	movs	r2, #128	; 0x80
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e052      	b.n	80047c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0216 	bic.w	r2, r2, #22
 800472c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <HAL_DMA_Abort+0x62>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0208 	bic.w	r2, r2, #8
 800475c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800476e:	e013      	b.n	8004798 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004770:	f7ff fd74 	bl	800425c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b05      	cmp	r3, #5
 800477c:	d90c      	bls.n	8004798 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e015      	b.n	80047c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e4      	bne.n	8004770 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047aa:	223f      	movs	r2, #63	; 0x3f
 80047ac:	409a      	lsls	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d004      	beq.n	80047ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2280      	movs	r2, #128	; 0x80
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00c      	b.n	8004804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2205      	movs	r2, #5
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800481c:	4b8e      	ldr	r3, [pc, #568]	; (8004a58 <HAL_DMA_IRQHandler+0x248>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a8e      	ldr	r2, [pc, #568]	; (8004a5c <HAL_DMA_IRQHandler+0x24c>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	2208      	movs	r2, #8
 800483c:	409a      	lsls	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01a      	beq.n	800487c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0204 	bic.w	r2, r2, #4
 8004862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	2208      	movs	r2, #8
 800486a:	409a      	lsls	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	2201      	movs	r2, #1
 80048a0:	409a      	lsls	r2, r3
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f043 0202 	orr.w	r2, r3, #2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	2204      	movs	r2, #4
 80048b8:	409a      	lsls	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	2204      	movs	r2, #4
 80048d6:	409a      	lsls	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	f043 0204 	orr.w	r2, r3, #4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	2210      	movs	r2, #16
 80048ee:	409a      	lsls	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d043      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d03c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	2210      	movs	r2, #16
 800490c:	409a      	lsls	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d024      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
 800493e:	e01f      	b.n	8004980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	e016      	b.n	8004980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d107      	bne.n	8004970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0208 	bic.w	r2, r2, #8
 800496e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	2220      	movs	r2, #32
 8004986:	409a      	lsls	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 808f 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8087 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	2220      	movs	r2, #32
 80049a8:	409a      	lsls	r2, r3
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d136      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0216 	bic.w	r2, r2, #22
 80049c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_DMA_IRQHandler+0x1da>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0208 	bic.w	r2, r2, #8
 80049f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fe:	223f      	movs	r2, #63	; 0x3f
 8004a00:	409a      	lsls	r2, r3
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d07e      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
        }
        return;
 8004a26:	e079      	b.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01d      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d031      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e02c      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
 8004a56:	bf00      	nop
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d023      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
 8004a70:	e01e      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10f      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0210 	bic.w	r2, r2, #16
 8004a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d032      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d307      	bcc.n	8004af8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f2      	bne.n	8004adc <HAL_DMA_IRQHandler+0x2cc>
 8004af6:	e000      	b.n	8004afa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004af8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	e000      	b.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b1c:	bf00      	nop
    }
  }
}
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d108      	bne.n	8004b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b62:	e007      	b.n	8004b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	3b10      	subs	r3, #16
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <DMA_CalcBaseAndBitshift+0x64>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b9a:	4a13      	ldr	r2, [pc, #76]	; (8004be8 <DMA_CalcBaseAndBitshift+0x68>)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d909      	bls.n	8004bc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bb6:	f023 0303 	bic.w	r3, r3, #3
 8004bba:	1d1a      	adds	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	659a      	str	r2, [r3, #88]	; 0x58
 8004bc0:	e007      	b.n	8004bd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	aaaaaaab 	.word	0xaaaaaaab
 8004be8:	08007d18 	.word	0x08007d18

08004bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11f      	bne.n	8004c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d856      	bhi.n	8004cba <DMA_CheckFifoParam+0xce>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <DMA_CheckFifoParam+0x28>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c25 	.word	0x08004c25
 8004c18:	08004c37 	.word	0x08004c37
 8004c1c:	08004c25 	.word	0x08004c25
 8004c20:	08004cbb 	.word	0x08004cbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d046      	beq.n	8004cbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e043      	b.n	8004cbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c3e:	d140      	bne.n	8004cc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c44:	e03d      	b.n	8004cc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4e:	d121      	bne.n	8004c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d837      	bhi.n	8004cc6 <DMA_CheckFifoParam+0xda>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <DMA_CheckFifoParam+0x70>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c73 	.word	0x08004c73
 8004c64:	08004c6d 	.word	0x08004c6d
 8004c68:	08004c85 	.word	0x08004c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c70:	e030      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d025      	beq.n	8004cca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c82:	e022      	b.n	8004cca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c8c:	d11f      	bne.n	8004cce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c92:	e01c      	b.n	8004cce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d903      	bls.n	8004ca2 <DMA_CheckFifoParam+0xb6>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d003      	beq.n	8004ca8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ca0:	e018      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca6:	e015      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00e      	beq.n	8004cd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb8:	e00b      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e00a      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e008      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e006      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e004      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cd2:	bf00      	nop
    }
  } 
  
  return status; 
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop

08004ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	; 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e16b      	b.n	8004fd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d00:	2201      	movs	r2, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f040 815a 	bne.w	8004fd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d005      	beq.n	8004d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d130      	bne.n	8004d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	2203      	movs	r2, #3
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 0201 	and.w	r2, r3, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d017      	beq.n	8004dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d123      	bne.n	8004e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	08da      	lsrs	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3208      	adds	r2, #8
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0203 	and.w	r2, r3, #3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80b4 	beq.w	8004fd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b60      	ldr	r3, [pc, #384]	; (8004ff0 <HAL_GPIO_Init+0x30c>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	4a5f      	ldr	r2, [pc, #380]	; (8004ff0 <HAL_GPIO_Init+0x30c>)
 8004e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e78:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7a:	4b5d      	ldr	r3, [pc, #372]	; (8004ff0 <HAL_GPIO_Init+0x30c>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e86:	4a5b      	ldr	r2, [pc, #364]	; (8004ff4 <HAL_GPIO_Init+0x310>)
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a52      	ldr	r2, [pc, #328]	; (8004ff8 <HAL_GPIO_Init+0x314>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02b      	beq.n	8004f0a <HAL_GPIO_Init+0x226>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a51      	ldr	r2, [pc, #324]	; (8004ffc <HAL_GPIO_Init+0x318>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d025      	beq.n	8004f06 <HAL_GPIO_Init+0x222>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a50      	ldr	r2, [pc, #320]	; (8005000 <HAL_GPIO_Init+0x31c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <HAL_GPIO_Init+0x21e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4f      	ldr	r2, [pc, #316]	; (8005004 <HAL_GPIO_Init+0x320>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d019      	beq.n	8004efe <HAL_GPIO_Init+0x21a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4e      	ldr	r2, [pc, #312]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_GPIO_Init+0x216>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4d      	ldr	r2, [pc, #308]	; (800500c <HAL_GPIO_Init+0x328>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_GPIO_Init+0x212>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a4c      	ldr	r2, [pc, #304]	; (8005010 <HAL_GPIO_Init+0x32c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d007      	beq.n	8004ef2 <HAL_GPIO_Init+0x20e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a4b      	ldr	r2, [pc, #300]	; (8005014 <HAL_GPIO_Init+0x330>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <HAL_GPIO_Init+0x20a>
 8004eea:	2307      	movs	r3, #7
 8004eec:	e00e      	b.n	8004f0c <HAL_GPIO_Init+0x228>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	e00c      	b.n	8004f0c <HAL_GPIO_Init+0x228>
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	e00a      	b.n	8004f0c <HAL_GPIO_Init+0x228>
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	e008      	b.n	8004f0c <HAL_GPIO_Init+0x228>
 8004efa:	2304      	movs	r3, #4
 8004efc:	e006      	b.n	8004f0c <HAL_GPIO_Init+0x228>
 8004efe:	2303      	movs	r3, #3
 8004f00:	e004      	b.n	8004f0c <HAL_GPIO_Init+0x228>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e002      	b.n	8004f0c <HAL_GPIO_Init+0x228>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_GPIO_Init+0x228>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	f002 0203 	and.w	r2, r2, #3
 8004f12:	0092      	lsls	r2, r2, #2
 8004f14:	4093      	lsls	r3, r2
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f1c:	4935      	ldr	r1, [pc, #212]	; (8004ff4 <HAL_GPIO_Init+0x310>)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	3302      	adds	r3, #2
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f2a:	4b3b      	ldr	r3, [pc, #236]	; (8005018 <HAL_GPIO_Init+0x334>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f4e:	4a32      	ldr	r2, [pc, #200]	; (8005018 <HAL_GPIO_Init+0x334>)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <HAL_GPIO_Init+0x334>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f78:	4a27      	ldr	r2, [pc, #156]	; (8005018 <HAL_GPIO_Init+0x334>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f7e:	4b26      	ldr	r3, [pc, #152]	; (8005018 <HAL_GPIO_Init+0x334>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fa2:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <HAL_GPIO_Init+0x334>)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_GPIO_Init+0x334>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fcc:	4a12      	ldr	r2, [pc, #72]	; (8005018 <HAL_GPIO_Init+0x334>)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2b0f      	cmp	r3, #15
 8004fdc:	f67f ae90 	bls.w	8004d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40013800 	.word	0x40013800
 8004ff8:	40020000 	.word	0x40020000
 8004ffc:	40020400 	.word	0x40020400
 8005000:	40020800 	.word	0x40020800
 8005004:	40020c00 	.word	0x40020c00
 8005008:	40021000 	.word	0x40021000
 800500c:	40021400 	.word	0x40021400
 8005010:	40021800 	.word	0x40021800
 8005014:	40021c00 	.word	0x40021c00
 8005018:	40013c00 	.word	0x40013c00

0800501c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	887b      	ldrh	r3, [r7, #2]
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
 8005038:	e001      	b.n	800503e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	807b      	strh	r3, [r7, #2]
 8005058:	4613      	mov	r3, r2
 800505a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800505c:	787b      	ldrb	r3, [r7, #1]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005062:	887a      	ldrh	r2, [r7, #2]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005068:	e003      	b.n	8005072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	041a      	lsls	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	619a      	str	r2, [r3, #24]
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005090:	887a      	ldrh	r2, [r7, #2]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	041a      	lsls	r2, r3, #16
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	43d9      	mvns	r1, r3
 800509c:	887b      	ldrh	r3, [r7, #2]
 800509e:	400b      	ands	r3, r1
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	619a      	str	r2, [r3, #24]
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d006      	beq.n	80050d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050ca:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd fec6 	bl	8002e64 <HAL_GPIO_EXTI_Callback>
  }
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40013c00 	.word	0x40013c00

080050e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e267      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d075      	beq.n	80051ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005102:	4b88      	ldr	r3, [pc, #544]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b04      	cmp	r3, #4
 800510c:	d00c      	beq.n	8005128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800510e:	4b85      	ldr	r3, [pc, #532]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005116:	2b08      	cmp	r3, #8
 8005118:	d112      	bne.n	8005140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800511a:	4b82      	ldr	r3, [pc, #520]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005126:	d10b      	bne.n	8005140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005128:	4b7e      	ldr	r3, [pc, #504]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d05b      	beq.n	80051ec <HAL_RCC_OscConfig+0x108>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d157      	bne.n	80051ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e242      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005148:	d106      	bne.n	8005158 <HAL_RCC_OscConfig+0x74>
 800514a:	4b76      	ldr	r3, [pc, #472]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a75      	ldr	r2, [pc, #468]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	e01d      	b.n	8005194 <HAL_RCC_OscConfig+0xb0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x98>
 8005162:	4b70      	ldr	r3, [pc, #448]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a6f      	ldr	r2, [pc, #444]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4b6d      	ldr	r3, [pc, #436]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a6c      	ldr	r2, [pc, #432]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e00b      	b.n	8005194 <HAL_RCC_OscConfig+0xb0>
 800517c:	4b69      	ldr	r3, [pc, #420]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a68      	ldr	r2, [pc, #416]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b66      	ldr	r3, [pc, #408]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a65      	ldr	r2, [pc, #404]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 800518e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d013      	beq.n	80051c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519c:	f7ff f85e 	bl	800425c <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a4:	f7ff f85a 	bl	800425c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e207      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	4b5b      	ldr	r3, [pc, #364]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0xc0>
 80051c2:	e014      	b.n	80051ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7ff f84a 	bl	800425c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051cc:	f7ff f846 	bl	800425c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	; 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e1f3      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051de:	4b51      	ldr	r3, [pc, #324]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0xe8>
 80051ea:	e000      	b.n	80051ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d063      	beq.n	80052c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051fa:	4b4a      	ldr	r3, [pc, #296]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005206:	4b47      	ldr	r3, [pc, #284]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800520e:	2b08      	cmp	r3, #8
 8005210:	d11c      	bne.n	800524c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005212:	4b44      	ldr	r3, [pc, #272]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d116      	bne.n	800524c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521e:	4b41      	ldr	r3, [pc, #260]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_RCC_OscConfig+0x152>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d001      	beq.n	8005236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e1c7      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005236:	4b3b      	ldr	r3, [pc, #236]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4937      	ldr	r1, [pc, #220]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005246:	4313      	orrs	r3, r2
 8005248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524a:	e03a      	b.n	80052c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d020      	beq.n	8005296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005254:	4b34      	ldr	r3, [pc, #208]	; (8005328 <HAL_RCC_OscConfig+0x244>)
 8005256:	2201      	movs	r2, #1
 8005258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525a:	f7fe ffff 	bl	800425c <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005262:	f7fe fffb 	bl	800425c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e1a8      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005274:	4b2b      	ldr	r3, [pc, #172]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	4925      	ldr	r1, [pc, #148]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
 8005294:	e015      	b.n	80052c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_RCC_OscConfig+0x244>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fe ffde 	bl	800425c <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a4:	f7fe ffda 	bl	800425c <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e187      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b6:	4b1b      	ldr	r3, [pc, #108]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d036      	beq.n	800533c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d6:	4b15      	ldr	r3, [pc, #84]	; (800532c <HAL_RCC_OscConfig+0x248>)
 80052d8:	2201      	movs	r2, #1
 80052da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052dc:	f7fe ffbe 	bl	800425c <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e4:	f7fe ffba 	bl	800425c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e167      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_RCC_OscConfig+0x240>)
 80052f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0x200>
 8005302:	e01b      	b.n	800533c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCC_OscConfig+0x248>)
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530a:	f7fe ffa7 	bl	800425c <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005310:	e00e      	b.n	8005330 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005312:	f7fe ffa3 	bl	800425c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d907      	bls.n	8005330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e150      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
 8005324:	40023800 	.word	0x40023800
 8005328:	42470000 	.word	0x42470000
 800532c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005330:	4b88      	ldr	r3, [pc, #544]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1ea      	bne.n	8005312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8097 	beq.w	8005478 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800534a:	2300      	movs	r3, #0
 800534c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800534e:	4b81      	ldr	r3, [pc, #516]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10f      	bne.n	800537a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	4b7d      	ldr	r3, [pc, #500]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	4a7c      	ldr	r2, [pc, #496]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 8005364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005368:	6413      	str	r3, [r2, #64]	; 0x40
 800536a:	4b7a      	ldr	r3, [pc, #488]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005376:	2301      	movs	r3, #1
 8005378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537a:	4b77      	ldr	r3, [pc, #476]	; (8005558 <HAL_RCC_OscConfig+0x474>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d118      	bne.n	80053b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005386:	4b74      	ldr	r3, [pc, #464]	; (8005558 <HAL_RCC_OscConfig+0x474>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a73      	ldr	r2, [pc, #460]	; (8005558 <HAL_RCC_OscConfig+0x474>)
 800538c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005392:	f7fe ff63 	bl	800425c <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539a:	f7fe ff5f 	bl	800425c <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e10c      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ac:	4b6a      	ldr	r3, [pc, #424]	; (8005558 <HAL_RCC_OscConfig+0x474>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d106      	bne.n	80053ce <HAL_RCC_OscConfig+0x2ea>
 80053c0:	4b64      	ldr	r3, [pc, #400]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	4a63      	ldr	r2, [pc, #396]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6713      	str	r3, [r2, #112]	; 0x70
 80053cc:	e01c      	b.n	8005408 <HAL_RCC_OscConfig+0x324>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x30c>
 80053d6:	4b5f      	ldr	r3, [pc, #380]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	4a5e      	ldr	r2, [pc, #376]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053dc:	f043 0304 	orr.w	r3, r3, #4
 80053e0:	6713      	str	r3, [r2, #112]	; 0x70
 80053e2:	4b5c      	ldr	r3, [pc, #368]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	4a5b      	ldr	r2, [pc, #364]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	6713      	str	r3, [r2, #112]	; 0x70
 80053ee:	e00b      	b.n	8005408 <HAL_RCC_OscConfig+0x324>
 80053f0:	4b58      	ldr	r3, [pc, #352]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f4:	4a57      	ldr	r2, [pc, #348]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	6713      	str	r3, [r2, #112]	; 0x70
 80053fc:	4b55      	ldr	r3, [pc, #340]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	4a54      	ldr	r2, [pc, #336]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 8005402:	f023 0304 	bic.w	r3, r3, #4
 8005406:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d015      	beq.n	800543c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fe ff24 	bl	800425c <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005416:	e00a      	b.n	800542e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005418:	f7fe ff20 	bl	800425c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e0cb      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542e:	4b49      	ldr	r3, [pc, #292]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0ee      	beq.n	8005418 <HAL_RCC_OscConfig+0x334>
 800543a:	e014      	b.n	8005466 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543c:	f7fe ff0e 	bl	800425c <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005442:	e00a      	b.n	800545a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fe ff0a 	bl	800425c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0b5      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800545a:	4b3e      	ldr	r3, [pc, #248]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1ee      	bne.n	8005444 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d105      	bne.n	8005478 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800546c:	4b39      	ldr	r3, [pc, #228]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	4a38      	ldr	r2, [pc, #224]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 8005472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005476:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a1 	beq.w	80055c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005482:	4b34      	ldr	r3, [pc, #208]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b08      	cmp	r3, #8
 800548c:	d05c      	beq.n	8005548 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d141      	bne.n	800551a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005496:	4b31      	ldr	r3, [pc, #196]	; (800555c <HAL_RCC_OscConfig+0x478>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fe fede 	bl	800425c <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a4:	f7fe feda 	bl	800425c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e087      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	019b      	lsls	r3, r3, #6
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	3b01      	subs	r3, #1
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	061b      	lsls	r3, r3, #24
 80054e6:	491b      	ldr	r1, [pc, #108]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ec:	4b1b      	ldr	r3, [pc, #108]	; (800555c <HAL_RCC_OscConfig+0x478>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f2:	f7fe feb3 	bl	800425c <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054fa:	f7fe feaf 	bl	800425c <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e05c      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x416>
 8005518:	e054      	b.n	80055c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551a:	4b10      	ldr	r3, [pc, #64]	; (800555c <HAL_RCC_OscConfig+0x478>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fe fe9c 	bl	800425c <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005528:	f7fe fe98 	bl	800425c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e045      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_RCC_OscConfig+0x470>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x444>
 8005546:	e03d      	b.n	80055c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d107      	bne.n	8005560 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e038      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
 8005554:	40023800 	.word	0x40023800
 8005558:	40007000 	.word	0x40007000
 800555c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005560:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <HAL_RCC_OscConfig+0x4ec>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d028      	beq.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d121      	bne.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d11a      	bne.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005590:	4013      	ands	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005598:	4293      	cmp	r3, r2
 800559a:	d111      	bne.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	3b01      	subs	r3, #1
 80055aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800

080055d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0cc      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b68      	ldr	r3, [pc, #416]	; (800578c <HAL_RCC_ClockConfig+0x1b8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d90c      	bls.n	8005610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b65      	ldr	r3, [pc, #404]	; (800578c <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fe:	4b63      	ldr	r3, [pc, #396]	; (800578c <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d001      	beq.n	8005610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0b8      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d020      	beq.n	800565e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005628:	4b59      	ldr	r3, [pc, #356]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a58      	ldr	r2, [pc, #352]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005640:	4b53      	ldr	r3, [pc, #332]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4a52      	ldr	r2, [pc, #328]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800564a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800564c:	4b50      	ldr	r3, [pc, #320]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	494d      	ldr	r1, [pc, #308]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	4313      	orrs	r3, r2
 800565c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d044      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005672:	4b47      	ldr	r3, [pc, #284]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d119      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e07f      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d003      	beq.n	8005692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568e:	2b03      	cmp	r3, #3
 8005690:	d107      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005692:	4b3f      	ldr	r3, [pc, #252]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e06f      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a2:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e067      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b2:	4b37      	ldr	r3, [pc, #220]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f023 0203 	bic.w	r2, r3, #3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	4934      	ldr	r1, [pc, #208]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c4:	f7fe fdca 	bl	800425c <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056cc:	f7fe fdc6 	bl	800425c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e04f      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e2:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 020c 	and.w	r2, r3, #12
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d1eb      	bne.n	80056cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f4:	4b25      	ldr	r3, [pc, #148]	; (800578c <HAL_RCC_ClockConfig+0x1b8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d20c      	bcs.n	800571c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b22      	ldr	r3, [pc, #136]	; (800578c <HAL_RCC_ClockConfig+0x1b8>)
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570a:	4b20      	ldr	r3, [pc, #128]	; (800578c <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d001      	beq.n	800571c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e032      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005728:	4b19      	ldr	r3, [pc, #100]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4916      	ldr	r1, [pc, #88]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	490e      	ldr	r1, [pc, #56]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	4313      	orrs	r3, r2
 8005758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800575a:	f000 f821 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 800575e:	4602      	mov	r2, r0
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	490a      	ldr	r1, [pc, #40]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 800576c:	5ccb      	ldrb	r3, [r1, r3]
 800576e:	fa22 f303 	lsr.w	r3, r2, r3
 8005772:	4a09      	ldr	r2, [pc, #36]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <HAL_RCC_ClockConfig+0x1c8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe fd2a 	bl	80041d4 <HAL_InitTick>

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40023c00 	.word	0x40023c00
 8005790:	40023800 	.word	0x40023800
 8005794:	08007d00 	.word	0x08007d00
 8005798:	20000000 	.word	0x20000000
 800579c:	20000004 	.word	0x20000004

080057a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a4:	b094      	sub	sp, #80	; 0x50
 80057a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	647b      	str	r3, [r7, #68]	; 0x44
 80057ac:	2300      	movs	r3, #0
 80057ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b0:	2300      	movs	r3, #0
 80057b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057b8:	4b79      	ldr	r3, [pc, #484]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 030c 	and.w	r3, r3, #12
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d00d      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0x40>
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	f200 80e1 	bhi.w	800598c <HAL_RCC_GetSysClockFreq+0x1ec>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x34>
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d003      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x3a>
 80057d2:	e0db      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d4:	4b73      	ldr	r3, [pc, #460]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80057d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057d8:	e0db      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057da:	4b73      	ldr	r3, [pc, #460]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80057dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057de:	e0d8      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e0:	4b6f      	ldr	r3, [pc, #444]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ea:	4b6d      	ldr	r3, [pc, #436]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d063      	beq.n	80058be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f6:	4b6a      	ldr	r3, [pc, #424]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	099b      	lsrs	r3, r3, #6
 80057fc:	2200      	movs	r2, #0
 80057fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005800:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005808:	633b      	str	r3, [r7, #48]	; 0x30
 800580a:	2300      	movs	r3, #0
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005812:	4622      	mov	r2, r4
 8005814:	462b      	mov	r3, r5
 8005816:	f04f 0000 	mov.w	r0, #0
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	0159      	lsls	r1, r3, #5
 8005820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005824:	0150      	lsls	r0, r2, #5
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4621      	mov	r1, r4
 800582c:	1a51      	subs	r1, r2, r1
 800582e:	6139      	str	r1, [r7, #16]
 8005830:	4629      	mov	r1, r5
 8005832:	eb63 0301 	sbc.w	r3, r3, r1
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005844:	4659      	mov	r1, fp
 8005846:	018b      	lsls	r3, r1, #6
 8005848:	4651      	mov	r1, sl
 800584a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800584e:	4651      	mov	r1, sl
 8005850:	018a      	lsls	r2, r1, #6
 8005852:	4651      	mov	r1, sl
 8005854:	ebb2 0801 	subs.w	r8, r2, r1
 8005858:	4659      	mov	r1, fp
 800585a:	eb63 0901 	sbc.w	r9, r3, r1
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800586a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800586e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005872:	4690      	mov	r8, r2
 8005874:	4699      	mov	r9, r3
 8005876:	4623      	mov	r3, r4
 8005878:	eb18 0303 	adds.w	r3, r8, r3
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	462b      	mov	r3, r5
 8005880:	eb49 0303 	adc.w	r3, r9, r3
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005892:	4629      	mov	r1, r5
 8005894:	024b      	lsls	r3, r1, #9
 8005896:	4621      	mov	r1, r4
 8005898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800589c:	4621      	mov	r1, r4
 800589e:	024a      	lsls	r2, r1, #9
 80058a0:	4610      	mov	r0, r2
 80058a2:	4619      	mov	r1, r3
 80058a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a6:	2200      	movs	r2, #0
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058b0:	f7fb f8d8 	bl	8000a64 <__aeabi_uldivmod>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4613      	mov	r3, r2
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058bc:	e058      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058be:	4b38      	ldr	r3, [pc, #224]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	099b      	lsrs	r3, r3, #6
 80058c4:	2200      	movs	r2, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	4611      	mov	r1, r2
 80058ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
 80058d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058d8:	4642      	mov	r2, r8
 80058da:	464b      	mov	r3, r9
 80058dc:	f04f 0000 	mov.w	r0, #0
 80058e0:	f04f 0100 	mov.w	r1, #0
 80058e4:	0159      	lsls	r1, r3, #5
 80058e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ea:	0150      	lsls	r0, r2, #5
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4641      	mov	r1, r8
 80058f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80058f6:	4649      	mov	r1, r9
 80058f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800590c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005910:	ebb2 040a 	subs.w	r4, r2, sl
 8005914:	eb63 050b 	sbc.w	r5, r3, fp
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	00eb      	lsls	r3, r5, #3
 8005922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005926:	00e2      	lsls	r2, r4, #3
 8005928:	4614      	mov	r4, r2
 800592a:	461d      	mov	r5, r3
 800592c:	4643      	mov	r3, r8
 800592e:	18e3      	adds	r3, r4, r3
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	464b      	mov	r3, r9
 8005934:	eb45 0303 	adc.w	r3, r5, r3
 8005938:	607b      	str	r3, [r7, #4]
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005946:	4629      	mov	r1, r5
 8005948:	028b      	lsls	r3, r1, #10
 800594a:	4621      	mov	r1, r4
 800594c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005950:	4621      	mov	r1, r4
 8005952:	028a      	lsls	r2, r1, #10
 8005954:	4610      	mov	r0, r2
 8005956:	4619      	mov	r1, r3
 8005958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595a:	2200      	movs	r2, #0
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	61fa      	str	r2, [r7, #28]
 8005960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005964:	f7fb f87e 	bl	8000a64 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4613      	mov	r3, r2
 800596e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	3301      	adds	r3, #1
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800598a:	e002      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005994:	4618      	mov	r0, r3
 8005996:	3750      	adds	r7, #80	; 0x50
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599e:	bf00      	nop
 80059a0:	40023800 	.word	0x40023800
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	007a1200 	.word	0x007a1200

080059ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b2:	681b      	ldr	r3, [r3, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000000 	.word	0x20000000

080059c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059c8:	f7ff fff0 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0a9b      	lsrs	r3, r3, #10
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4903      	ldr	r1, [pc, #12]	; (80059e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	08007d10 	.word	0x08007d10

080059ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059f0:	f7ff ffdc 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059f4:	4602      	mov	r2, r0
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	0b5b      	lsrs	r3, r3, #13
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	4903      	ldr	r1, [pc, #12]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a02:	5ccb      	ldrb	r3, [r1, r3]
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	08007d10 	.word	0x08007d10

08005a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e041      	b.n	8005aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fe f9d0 	bl	8003de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f000 fa96 	bl	8005f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d001      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e04e      	b.n	8005b6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <HAL_TIM_Base_Start_IT+0xc4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d022      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d01d      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <HAL_TIM_Base_Start_IT+0xc8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d018      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00e      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1b      	ldr	r2, [pc, #108]	; (8005b88 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d009      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <HAL_TIM_Base_Start_IT+0xd8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d004      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d111      	bne.n	8005b58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d010      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0201 	orr.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	e007      	b.n	8005b68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40010400 	.word	0x40010400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40001800 	.word	0x40001800

08005b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d122      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d11b      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0202 	mvn.w	r2, #2
 8005bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f9b5 	bl	8005f46 <HAL_TIM_IC_CaptureCallback>
 8005bdc:	e005      	b.n	8005bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f9a7 	bl	8005f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f9b8 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d122      	bne.n	8005c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d11b      	bne.n	8005c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0204 	mvn.w	r2, #4
 8005c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f98b 	bl	8005f46 <HAL_TIM_IC_CaptureCallback>
 8005c30:	e005      	b.n	8005c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f97d 	bl	8005f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f98e 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d122      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d11b      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0208 	mvn.w	r2, #8
 8005c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f961 	bl	8005f46 <HAL_TIM_IC_CaptureCallback>
 8005c84:	e005      	b.n	8005c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f953 	bl	8005f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f964 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d122      	bne.n	8005cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d11b      	bne.n	8005cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0210 	mvn.w	r2, #16
 8005cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f937 	bl	8005f46 <HAL_TIM_IC_CaptureCallback>
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f929 	bl	8005f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f93a 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d10e      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d107      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0201 	mvn.w	r2, #1
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fd f988 	bl	8003028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	2b80      	cmp	r3, #128	; 0x80
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b80      	cmp	r3, #128	; 0x80
 8005d32:	d107      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fae0 	bl	8006304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b40      	cmp	r3, #64	; 0x40
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f8ff 	bl	8005f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0220 	mvn.w	r2, #32
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 faaa 	bl	80062f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e0b4      	b.n	8005f2a <HAL_TIM_ConfigClockSource+0x186>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df8:	d03e      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0xd4>
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	f200 8087 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e06:	f000 8086 	beq.w	8005f16 <HAL_TIM_ConfigClockSource+0x172>
 8005e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0e:	d87f      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e10:	2b70      	cmp	r3, #112	; 0x70
 8005e12:	d01a      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0xa6>
 8005e14:	2b70      	cmp	r3, #112	; 0x70
 8005e16:	d87b      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e18:	2b60      	cmp	r3, #96	; 0x60
 8005e1a:	d050      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x11a>
 8005e1c:	2b60      	cmp	r3, #96	; 0x60
 8005e1e:	d877      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e20:	2b50      	cmp	r3, #80	; 0x50
 8005e22:	d03c      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0xfa>
 8005e24:	2b50      	cmp	r3, #80	; 0x50
 8005e26:	d873      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d058      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x13a>
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d86f      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e30:	2b30      	cmp	r3, #48	; 0x30
 8005e32:	d064      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15a>
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d86b      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d060      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15a>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d867      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05c      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15a>
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d05a      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15a>
 8005e48:	e062      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6899      	ldr	r1, [r3, #8]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f000 f9ad 	bl	80061b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	609a      	str	r2, [r3, #8]
      break;
 8005e76:	e04f      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6899      	ldr	r1, [r3, #8]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f000 f996 	bl	80061b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e9a:	609a      	str	r2, [r3, #8]
      break;
 8005e9c:	e03c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6859      	ldr	r1, [r3, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f000 f90a 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2150      	movs	r1, #80	; 0x50
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f963 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005ebc:	e02c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f000 f929 	bl	8006122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2160      	movs	r1, #96	; 0x60
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f953 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005edc:	e01c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 f8ea 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2140      	movs	r1, #64	; 0x40
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f943 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005efc:	e00c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f000 f93a 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005f0e:	e003      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	e000      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a40      	ldr	r2, [pc, #256]	; (8006098 <TIM_Base_SetConfig+0x114>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa2:	d00f      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a3d      	ldr	r2, [pc, #244]	; (800609c <TIM_Base_SetConfig+0x118>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00b      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a3c      	ldr	r2, [pc, #240]	; (80060a0 <TIM_Base_SetConfig+0x11c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d007      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a3b      	ldr	r2, [pc, #236]	; (80060a4 <TIM_Base_SetConfig+0x120>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3a      	ldr	r2, [pc, #232]	; (80060a8 <TIM_Base_SetConfig+0x124>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d108      	bne.n	8005fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a2f      	ldr	r2, [pc, #188]	; (8006098 <TIM_Base_SetConfig+0x114>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d02b      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe4:	d027      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a2c      	ldr	r2, [pc, #176]	; (800609c <TIM_Base_SetConfig+0x118>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d023      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2b      	ldr	r2, [pc, #172]	; (80060a0 <TIM_Base_SetConfig+0x11c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01f      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <TIM_Base_SetConfig+0x120>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01b      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <TIM_Base_SetConfig+0x124>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d017      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a28      	ldr	r2, [pc, #160]	; (80060ac <TIM_Base_SetConfig+0x128>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a27      	ldr	r2, [pc, #156]	; (80060b0 <TIM_Base_SetConfig+0x12c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00f      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <TIM_Base_SetConfig+0x130>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a25      	ldr	r2, [pc, #148]	; (80060b8 <TIM_Base_SetConfig+0x134>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a24      	ldr	r2, [pc, #144]	; (80060bc <TIM_Base_SetConfig+0x138>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a23      	ldr	r2, [pc, #140]	; (80060c0 <TIM_Base_SetConfig+0x13c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d108      	bne.n	8006048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a0a      	ldr	r2, [pc, #40]	; (8006098 <TIM_Base_SetConfig+0x114>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0xf8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <TIM_Base_SetConfig+0x124>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d103      	bne.n	8006084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	615a      	str	r2, [r3, #20]
}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40010000 	.word	0x40010000
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	40010400 	.word	0x40010400
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40014400 	.word	0x40014400
 80060b4:	40014800 	.word	0x40014800
 80060b8:	40001800 	.word	0x40001800
 80060bc:	40001c00 	.word	0x40001c00
 80060c0:	40002000 	.word	0x40002000

080060c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0201 	bic.w	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f023 030a 	bic.w	r3, r3, #10
 8006100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006122:	b480      	push	{r7}
 8006124:	b087      	sub	sp, #28
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0210 	bic.w	r2, r3, #16
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f043 0307 	orr.w	r3, r3, #7
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	431a      	orrs	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800620c:	2302      	movs	r3, #2
 800620e:	e05a      	b.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625c:	d01d      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1b      	ldr	r2, [pc, #108]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1a      	ldr	r2, [pc, #104]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a15      	ldr	r2, [pc, #84]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d10c      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40010400 	.word	0x40010400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40001800 	.word	0x40001800

080062f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e03f      	b.n	80063aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fd fd74 	bl	8003e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2224      	movs	r2, #36	; 0x24
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 ff43 	bl	80071e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	; 0x30
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d165      	bne.n	800649a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_UART_Transmit_DMA+0x26>
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e05e      	b.n	800649c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_UART_Transmit_DMA+0x38>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e057      	b.n	800649c <HAL_UART_Transmit_DMA+0xe8>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2221      	movs	r2, #33	; 0x21
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <HAL_UART_Transmit_DMA+0xf0>)
 800641a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <HAL_UART_Transmit_DMA+0xf4>)
 8006422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	4a20      	ldr	r2, [pc, #128]	; (80064ac <HAL_UART_Transmit_DMA+0xf8>)
 800642a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	2200      	movs	r2, #0
 8006432:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006434:	f107 0308 	add.w	r3, r7, #8
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	6819      	ldr	r1, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3304      	adds	r3, #4
 8006448:	461a      	mov	r2, r3
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	f7fe f8f6 	bl	800463c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006458:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	617b      	str	r3, [r7, #20]
   return(result);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3314      	adds	r3, #20
 8006480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006482:	627a      	str	r2, [r7, #36]	; 0x24
 8006484:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6a39      	ldr	r1, [r7, #32]
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e5      	bne.n	8006462 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3730      	adds	r7, #48	; 0x30
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	08006a81 	.word	0x08006a81
 80064a8:	08006b1b 	.word	0x08006b1b
 80064ac:	08006c93 	.word	0x08006c93

080064b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d11d      	bne.n	8006506 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_UART_Receive_DMA+0x26>
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e016      	b.n	8006508 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_UART_Receive_DMA+0x38>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e00f      	b.n	8006508 <HAL_UART_Receive_DMA+0x58>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	461a      	mov	r2, r3
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fc13 	bl	8006d28 <UART_Start_Receive_DMA>
 8006502:	4603      	mov	r3, r0
 8006504:	e000      	b.n	8006508 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006506:	2302      	movs	r3, #2
  }
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b0ba      	sub	sp, #232	; 0xe8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006536:	2300      	movs	r3, #0
 8006538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800653c:	2300      	movs	r3, #0
 800653e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800654e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10f      	bne.n	8006576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_UART_IRQHandler+0x66>
 8006562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fd7f 	bl	8007072 <UART_Receive_IT>
      return;
 8006574:	e256      	b.n	8006a24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 80de 	beq.w	800673c <HAL_UART_IRQHandler+0x22c>
 8006580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800658c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006590:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 80d1 	beq.w	800673c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <HAL_UART_IRQHandler+0xae>
 80065a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f043 0201 	orr.w	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <HAL_UART_IRQHandler+0xd2>
 80065ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f043 0202 	orr.w	r2, r3, #2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <HAL_UART_IRQHandler+0xf6>
 80065ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d011      	beq.n	8006636 <HAL_UART_IRQHandler+0x126>
 8006612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006616:	f003 0320 	and.w	r3, r3, #32
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800661e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f043 0208 	orr.w	r2, r3, #8
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 81ed 	beq.w	8006a1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <HAL_UART_IRQHandler+0x14e>
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fd0a 	bl	8007072 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	bf0c      	ite	eq
 800666c:	2301      	moveq	r3, #1
 800666e:	2300      	movne	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <HAL_UART_IRQHandler+0x17a>
 8006682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d04f      	beq.n	800672a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fc12 	bl	8006eb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d141      	bne.n	8006722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3314      	adds	r3, #20
 80066a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3314      	adds	r3, #20
 80066c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1d9      	bne.n	800669e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d013      	beq.n	800671a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	4a7d      	ldr	r2, [pc, #500]	; (80068ec <HAL_UART_IRQHandler+0x3dc>)
 80066f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe f864 	bl	80047cc <HAL_DMA_Abort_IT>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d016      	beq.n	8006738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006718:	e00e      	b.n	8006738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f99a 	bl	8006a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	e00a      	b.n	8006738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f996 	bl	8006a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006728:	e006      	b.n	8006738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f992 	bl	8006a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006736:	e170      	b.n	8006a1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	bf00      	nop
    return;
 800673a:	e16e      	b.n	8006a1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	2b01      	cmp	r3, #1
 8006742:	f040 814a 	bne.w	80069da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8143 	beq.w	80069da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 813c 	beq.w	80069da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006762:	2300      	movs	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	60bb      	str	r3, [r7, #8]
 8006776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	f040 80b4 	bne.w	80068f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8140 	beq.w	8006a1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067a6:	429a      	cmp	r2, r3
 80067a8:	f080 8139 	bcs.w	8006a1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067be:	f000 8088 	beq.w	80068d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1d9      	bne.n	80067c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800681e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006820:	f023 0301 	bic.w	r3, r3, #1
 8006824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3314      	adds	r3, #20
 800682e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006832:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006836:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800683a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e1      	bne.n	800680e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3314      	adds	r3, #20
 8006850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800685a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800685c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3314      	adds	r3, #20
 800686a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800686e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800687c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e3      	bne.n	800684a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	330c      	adds	r3, #12
 8006896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068a2:	f023 0310 	bic.w	r3, r3, #16
 80068a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	330c      	adds	r3, #12
 80068b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80068b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e3      	bne.n	8006890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fd ff0d 	bl	80046ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068da:	b29b      	uxth	r3, r3
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	b29b      	uxth	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f8c0 	bl	8006a68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068e8:	e099      	b.n	8006a1e <HAL_UART_IRQHandler+0x50e>
 80068ea:	bf00      	nop
 80068ec:	08006f7b 	.word	0x08006f7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 808b 	beq.w	8006a22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800690c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8086 	beq.w	8006a22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	330c      	adds	r3, #12
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800692c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800693a:	647a      	str	r2, [r7, #68]	; 0x44
 800693c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e3      	bne.n	8006916 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3314      	adds	r3, #20
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	623b      	str	r3, [r7, #32]
   return(result);
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3314      	adds	r3, #20
 800696e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006972:	633a      	str	r2, [r7, #48]	; 0x30
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e3      	bne.n	800694e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0310 	bic.w	r3, r3, #16
 80069aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	330c      	adds	r3, #12
 80069b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069b8:	61fa      	str	r2, [r7, #28]
 80069ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	69b9      	ldr	r1, [r7, #24]
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	617b      	str	r3, [r7, #20]
   return(result);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e3      	bne.n	8006994 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f848 	bl	8006a68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069d8:	e023      	b.n	8006a22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d009      	beq.n	80069fa <HAL_UART_IRQHandler+0x4ea>
 80069e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fad5 	bl	8006fa2 <UART_Transmit_IT>
    return;
 80069f8:	e014      	b.n	8006a24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00e      	beq.n	8006a24 <HAL_UART_IRQHandler+0x514>
 8006a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fb15 	bl	8007042 <UART_EndTransmit_IT>
    return;
 8006a18:	e004      	b.n	8006a24 <HAL_UART_IRQHandler+0x514>
    return;
 8006a1a:	bf00      	nop
 8006a1c:	e002      	b.n	8006a24 <HAL_UART_IRQHandler+0x514>
      return;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <HAL_UART_IRQHandler+0x514>
      return;
 8006a22:	bf00      	nop
  }
}
 8006a24:	37e8      	adds	r7, #232	; 0xe8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b090      	sub	sp, #64	; 0x40
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d137      	bne.n	8006b0c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3314      	adds	r3, #20
 8006ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006af6:	61fa      	str	r2, [r7, #28]
 8006af8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	69b9      	ldr	r1, [r7, #24]
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	617b      	str	r3, [r7, #20]
   return(result);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b0a:	e002      	b.n	8006b12 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b0e:	f7fc fb41 	bl	8003194 <HAL_UART_TxCpltCallback>
}
 8006b12:	bf00      	nop
 8006b14:	3740      	adds	r7, #64	; 0x40
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff ff7f 	bl	8006a2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b09c      	sub	sp, #112	; 0x70
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d172      	bne.n	8006c38 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b54:	2200      	movs	r2, #0
 8006b56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b78:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3314      	adds	r3, #20
 8006b92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3314      	adds	r3, #20
 8006baa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006bac:	647a      	str	r2, [r7, #68]	; 0x44
 8006bae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3314      	adds	r3, #20
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006be0:	633a      	str	r2, [r7, #48]	; 0x30
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e5      	bne.n	8006bc0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d119      	bne.n	8006c38 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0310 	bic.w	r3, r3, #16
 8006c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	330c      	adds	r3, #12
 8006c22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c24:	61fa      	str	r2, [r7, #28]
 8006c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	617b      	str	r3, [r7, #20]
   return(result);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e5      	bne.n	8006c04 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d106      	bne.n	8006c4e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c44:	4619      	mov	r1, r3
 8006c46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c48:	f7ff ff0e 	bl	8006a68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c4c:	e002      	b.n	8006c54 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006c4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c50:	f7fc fab2 	bl	80031b8 <HAL_UART_RxCpltCallback>
}
 8006c54:	bf00      	nop
 8006c56:	3770      	adds	r7, #112	; 0x70
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d108      	bne.n	8006c84 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7ff fef3 	bl	8006a68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c82:	e002      	b.n	8006c8a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff fedb 	bl	8006a40 <HAL_UART_RxHalfCpltCallback>
}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b80      	cmp	r3, #128	; 0x80
 8006cb0:	bf0c      	ite	eq
 8006cb2:	2301      	moveq	r3, #1
 8006cb4:	2300      	movne	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b21      	cmp	r3, #33	; 0x21
 8006cc4:	d108      	bne.n	8006cd8 <UART_DMAError+0x46>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006cd2:	68b8      	ldr	r0, [r7, #8]
 8006cd4:	f000 f8c6 	bl	8006e64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	bf0c      	ite	eq
 8006ce6:	2301      	moveq	r3, #1
 8006ce8:	2300      	movne	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b22      	cmp	r3, #34	; 0x22
 8006cf8:	d108      	bne.n	8006d0c <UART_DMAError+0x7a>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d06:	68b8      	ldr	r0, [r7, #8]
 8006d08:	f000 f8d4 	bl	8006eb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f043 0210 	orr.w	r2, r3, #16
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d18:	68b8      	ldr	r0, [r7, #8]
 8006d1a:	f7ff fe9b 	bl	8006a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1e:	bf00      	nop
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b098      	sub	sp, #96	; 0x60
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2222      	movs	r2, #34	; 0x22
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	4a40      	ldr	r2, [pc, #256]	; (8006e58 <UART_Start_Receive_DMA+0x130>)
 8006d56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	4a3f      	ldr	r2, [pc, #252]	; (8006e5c <UART_Start_Receive_DMA+0x134>)
 8006d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	4a3e      	ldr	r2, [pc, #248]	; (8006e60 <UART_Start_Receive_DMA+0x138>)
 8006d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006d70:	f107 0308 	add.w	r3, r7, #8
 8006d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	f7fd fc58 	bl	800463c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d019      	beq.n	8006de6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dd2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3314      	adds	r3, #20
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	f043 0301 	orr.w	r3, r3, #1
 8006dfc:	657b      	str	r3, [r7, #84]	; 0x54
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3314      	adds	r3, #20
 8006e04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e06:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e5      	bne.n	8006de6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3314      	adds	r3, #20
 8006e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e30:	653b      	str	r3, [r7, #80]	; 0x50
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3314      	adds	r3, #20
 8006e38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6a39      	ldr	r1, [r7, #32]
 8006e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e5      	bne.n	8006e1a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3760      	adds	r7, #96	; 0x60
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	08006b37 	.word	0x08006b37
 8006e5c:	08006c5d 	.word	0x08006c5d
 8006e60:	08006c93 	.word	0x08006c93

08006e64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b089      	sub	sp, #36	; 0x24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e82:	61fb      	str	r3, [r7, #28]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	61ba      	str	r2, [r7, #24]
 8006e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	6979      	ldr	r1, [r7, #20]
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	613b      	str	r3, [r7, #16]
   return(result);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e5      	bne.n	8006e6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006ea8:	bf00      	nop
 8006eaa:	3724      	adds	r7, #36	; 0x24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b095      	sub	sp, #84	; 0x54
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006edc:	643a      	str	r2, [r7, #64]	; 0x40
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3314      	adds	r3, #20
 8006ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e5      	bne.n	8006ef0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d119      	bne.n	8006f60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	647b      	str	r3, [r7, #68]	; 0x44
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f4c:	61ba      	str	r2, [r7, #24]
 8006f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	6979      	ldr	r1, [r7, #20]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	e841 2300 	strex	r3, r2, [r1]
 8006f58:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e5      	bne.n	8006f2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f6e:	bf00      	nop
 8006f70:	3754      	adds	r7, #84	; 0x54
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff fd5d 	bl	8006a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b21      	cmp	r3, #33	; 0x21
 8006fb4:	d13e      	bne.n	8007034 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbe:	d114      	bne.n	8006fea <UART_Transmit_IT+0x48>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d110      	bne.n	8006fea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fdc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	1c9a      	adds	r2, r3, #2
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	621a      	str	r2, [r3, #32]
 8006fe8:	e008      	b.n	8006ffc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	1c59      	adds	r1, r3, #1
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6211      	str	r1, [r2, #32]
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29b      	uxth	r3, r3
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	4619      	mov	r1, r3
 800700a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10f      	bne.n	8007030 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800701e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800702e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	e000      	b.n	8007036 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007034:	2302      	movs	r3, #2
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007058:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fc f896 	bl	8003194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b08c      	sub	sp, #48	; 0x30
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b22      	cmp	r3, #34	; 0x22
 8007084:	f040 80ab 	bne.w	80071de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007090:	d117      	bne.n	80070c2 <UART_Receive_IT+0x50>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d113      	bne.n	80070c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	1c9a      	adds	r2, r3, #2
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	629a      	str	r2, [r3, #40]	; 0x28
 80070c0:	e026      	b.n	8007110 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d4:	d007      	beq.n	80070e6 <UART_Receive_IT+0x74>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <UART_Receive_IT+0x82>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e008      	b.n	8007106 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007100:	b2da      	uxtb	r2, r3
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29b      	uxth	r3, r3
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	4619      	mov	r1, r3
 800711e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007120:	2b00      	cmp	r3, #0
 8007122:	d15a      	bne.n	80071da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0220 	bic.w	r2, r2, #32
 8007132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007142:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695a      	ldr	r2, [r3, #20]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0201 	bic.w	r2, r2, #1
 8007152:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	2b01      	cmp	r3, #1
 8007162:	d135      	bne.n	80071d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	330c      	adds	r3, #12
 8007170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	613b      	str	r3, [r7, #16]
   return(result);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f023 0310 	bic.w	r3, r3, #16
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	330c      	adds	r3, #12
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	623a      	str	r2, [r7, #32]
 800718c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	69f9      	ldr	r1, [r7, #28]
 8007190:	6a3a      	ldr	r2, [r7, #32]
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	61bb      	str	r3, [r7, #24]
   return(result);
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e5      	bne.n	800716a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b10      	cmp	r3, #16
 80071aa:	d10a      	bne.n	80071c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff fc4d 	bl	8006a68 <HAL_UARTEx_RxEventCallback>
 80071ce:	e002      	b.n	80071d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fb fff1 	bl	80031b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e002      	b.n	80071e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80071de:	2302      	movs	r3, #2
  }
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3730      	adds	r7, #48	; 0x30
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071ec:	b0c0      	sub	sp, #256	; 0x100
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007204:	68d9      	ldr	r1, [r3, #12]
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	ea40 0301 	orr.w	r3, r0, r1
 8007210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	431a      	orrs	r2, r3
 8007220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	431a      	orrs	r2, r3
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	4313      	orrs	r3, r2
 8007230:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007240:	f021 010c 	bic.w	r1, r1, #12
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800724e:	430b      	orrs	r3, r1
 8007250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800725e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007262:	6999      	ldr	r1, [r3, #24]
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	ea40 0301 	orr.w	r3, r0, r1
 800726e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4b8f      	ldr	r3, [pc, #572]	; (80074b4 <UART_SetConfig+0x2cc>)
 8007278:	429a      	cmp	r2, r3
 800727a:	d005      	beq.n	8007288 <UART_SetConfig+0xa0>
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b8d      	ldr	r3, [pc, #564]	; (80074b8 <UART_SetConfig+0x2d0>)
 8007284:	429a      	cmp	r2, r3
 8007286:	d104      	bne.n	8007292 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007288:	f7fe fbb0 	bl	80059ec <HAL_RCC_GetPCLK2Freq>
 800728c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007290:	e003      	b.n	800729a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007292:	f7fe fb97 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 8007296:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800729a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a4:	f040 810c 	bne.w	80074c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072ba:	4622      	mov	r2, r4
 80072bc:	462b      	mov	r3, r5
 80072be:	1891      	adds	r1, r2, r2
 80072c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80072c2:	415b      	adcs	r3, r3
 80072c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072ca:	4621      	mov	r1, r4
 80072cc:	eb12 0801 	adds.w	r8, r2, r1
 80072d0:	4629      	mov	r1, r5
 80072d2:	eb43 0901 	adc.w	r9, r3, r1
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072ea:	4690      	mov	r8, r2
 80072ec:	4699      	mov	r9, r3
 80072ee:	4623      	mov	r3, r4
 80072f0:	eb18 0303 	adds.w	r3, r8, r3
 80072f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072f8:	462b      	mov	r3, r5
 80072fa:	eb49 0303 	adc.w	r3, r9, r3
 80072fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800730e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007312:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007316:	460b      	mov	r3, r1
 8007318:	18db      	adds	r3, r3, r3
 800731a:	653b      	str	r3, [r7, #80]	; 0x50
 800731c:	4613      	mov	r3, r2
 800731e:	eb42 0303 	adc.w	r3, r2, r3
 8007322:	657b      	str	r3, [r7, #84]	; 0x54
 8007324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800732c:	f7f9 fb9a 	bl	8000a64 <__aeabi_uldivmod>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4b61      	ldr	r3, [pc, #388]	; (80074bc <UART_SetConfig+0x2d4>)
 8007336:	fba3 2302 	umull	r2, r3, r3, r2
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	011c      	lsls	r4, r3, #4
 800733e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007342:	2200      	movs	r2, #0
 8007344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007348:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800734c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	1891      	adds	r1, r2, r2
 8007356:	64b9      	str	r1, [r7, #72]	; 0x48
 8007358:	415b      	adcs	r3, r3
 800735a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800735c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007360:	4641      	mov	r1, r8
 8007362:	eb12 0a01 	adds.w	sl, r2, r1
 8007366:	4649      	mov	r1, r9
 8007368:	eb43 0b01 	adc.w	fp, r3, r1
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007378:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800737c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007380:	4692      	mov	sl, r2
 8007382:	469b      	mov	fp, r3
 8007384:	4643      	mov	r3, r8
 8007386:	eb1a 0303 	adds.w	r3, sl, r3
 800738a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800738e:	464b      	mov	r3, r9
 8007390:	eb4b 0303 	adc.w	r3, fp, r3
 8007394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073ac:	460b      	mov	r3, r1
 80073ae:	18db      	adds	r3, r3, r3
 80073b0:	643b      	str	r3, [r7, #64]	; 0x40
 80073b2:	4613      	mov	r3, r2
 80073b4:	eb42 0303 	adc.w	r3, r2, r3
 80073b8:	647b      	str	r3, [r7, #68]	; 0x44
 80073ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073c2:	f7f9 fb4f 	bl	8000a64 <__aeabi_uldivmod>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4611      	mov	r1, r2
 80073cc:	4b3b      	ldr	r3, [pc, #236]	; (80074bc <UART_SetConfig+0x2d4>)
 80073ce:	fba3 2301 	umull	r2, r3, r3, r1
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	2264      	movs	r2, #100	; 0x64
 80073d6:	fb02 f303 	mul.w	r3, r2, r3
 80073da:	1acb      	subs	r3, r1, r3
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073e2:	4b36      	ldr	r3, [pc, #216]	; (80074bc <UART_SetConfig+0x2d4>)
 80073e4:	fba3 2302 	umull	r2, r3, r3, r2
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073f0:	441c      	add	r4, r3
 80073f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007400:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007404:	4642      	mov	r2, r8
 8007406:	464b      	mov	r3, r9
 8007408:	1891      	adds	r1, r2, r2
 800740a:	63b9      	str	r1, [r7, #56]	; 0x38
 800740c:	415b      	adcs	r3, r3
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007414:	4641      	mov	r1, r8
 8007416:	1851      	adds	r1, r2, r1
 8007418:	6339      	str	r1, [r7, #48]	; 0x30
 800741a:	4649      	mov	r1, r9
 800741c:	414b      	adcs	r3, r1
 800741e:	637b      	str	r3, [r7, #52]	; 0x34
 8007420:	f04f 0200 	mov.w	r2, #0
 8007424:	f04f 0300 	mov.w	r3, #0
 8007428:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800742c:	4659      	mov	r1, fp
 800742e:	00cb      	lsls	r3, r1, #3
 8007430:	4651      	mov	r1, sl
 8007432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007436:	4651      	mov	r1, sl
 8007438:	00ca      	lsls	r2, r1, #3
 800743a:	4610      	mov	r0, r2
 800743c:	4619      	mov	r1, r3
 800743e:	4603      	mov	r3, r0
 8007440:	4642      	mov	r2, r8
 8007442:	189b      	adds	r3, r3, r2
 8007444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007448:	464b      	mov	r3, r9
 800744a:	460a      	mov	r2, r1
 800744c:	eb42 0303 	adc.w	r3, r2, r3
 8007450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007460:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007464:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007468:	460b      	mov	r3, r1
 800746a:	18db      	adds	r3, r3, r3
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28
 800746e:	4613      	mov	r3, r2
 8007470:	eb42 0303 	adc.w	r3, r2, r3
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800747a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800747e:	f7f9 faf1 	bl	8000a64 <__aeabi_uldivmod>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <UART_SetConfig+0x2d4>)
 8007488:	fba3 1302 	umull	r1, r3, r3, r2
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	2164      	movs	r1, #100	; 0x64
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	3332      	adds	r3, #50	; 0x32
 800749a:	4a08      	ldr	r2, [pc, #32]	; (80074bc <UART_SetConfig+0x2d4>)
 800749c:	fba2 2303 	umull	r2, r3, r2, r3
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	f003 0207 	and.w	r2, r3, #7
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4422      	add	r2, r4
 80074ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074b0:	e106      	b.n	80076c0 <UART_SetConfig+0x4d8>
 80074b2:	bf00      	nop
 80074b4:	40011000 	.word	0x40011000
 80074b8:	40011400 	.word	0x40011400
 80074bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074d2:	4642      	mov	r2, r8
 80074d4:	464b      	mov	r3, r9
 80074d6:	1891      	adds	r1, r2, r2
 80074d8:	6239      	str	r1, [r7, #32]
 80074da:	415b      	adcs	r3, r3
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
 80074de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074e2:	4641      	mov	r1, r8
 80074e4:	1854      	adds	r4, r2, r1
 80074e6:	4649      	mov	r1, r9
 80074e8:	eb43 0501 	adc.w	r5, r3, r1
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	00eb      	lsls	r3, r5, #3
 80074f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074fa:	00e2      	lsls	r2, r4, #3
 80074fc:	4614      	mov	r4, r2
 80074fe:	461d      	mov	r5, r3
 8007500:	4643      	mov	r3, r8
 8007502:	18e3      	adds	r3, r4, r3
 8007504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007508:	464b      	mov	r3, r9
 800750a:	eb45 0303 	adc.w	r3, r5, r3
 800750e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800751e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007522:	f04f 0200 	mov.w	r2, #0
 8007526:	f04f 0300 	mov.w	r3, #0
 800752a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800752e:	4629      	mov	r1, r5
 8007530:	008b      	lsls	r3, r1, #2
 8007532:	4621      	mov	r1, r4
 8007534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007538:	4621      	mov	r1, r4
 800753a:	008a      	lsls	r2, r1, #2
 800753c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007540:	f7f9 fa90 	bl	8000a64 <__aeabi_uldivmod>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4b60      	ldr	r3, [pc, #384]	; (80076cc <UART_SetConfig+0x4e4>)
 800754a:	fba3 2302 	umull	r2, r3, r3, r2
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	011c      	lsls	r4, r3, #4
 8007552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007556:	2200      	movs	r2, #0
 8007558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800755c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007560:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	1891      	adds	r1, r2, r2
 800756a:	61b9      	str	r1, [r7, #24]
 800756c:	415b      	adcs	r3, r3
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007574:	4641      	mov	r1, r8
 8007576:	1851      	adds	r1, r2, r1
 8007578:	6139      	str	r1, [r7, #16]
 800757a:	4649      	mov	r1, r9
 800757c:	414b      	adcs	r3, r1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800758c:	4659      	mov	r1, fp
 800758e:	00cb      	lsls	r3, r1, #3
 8007590:	4651      	mov	r1, sl
 8007592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007596:	4651      	mov	r1, sl
 8007598:	00ca      	lsls	r2, r1, #3
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	4642      	mov	r2, r8
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075a8:	464b      	mov	r3, r9
 80075aa:	460a      	mov	r2, r1
 80075ac:	eb42 0303 	adc.w	r3, r2, r3
 80075b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80075be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075cc:	4649      	mov	r1, r9
 80075ce:	008b      	lsls	r3, r1, #2
 80075d0:	4641      	mov	r1, r8
 80075d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d6:	4641      	mov	r1, r8
 80075d8:	008a      	lsls	r2, r1, #2
 80075da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075de:	f7f9 fa41 	bl	8000a64 <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	4b38      	ldr	r3, [pc, #224]	; (80076cc <UART_SetConfig+0x4e4>)
 80075ea:	fba3 2301 	umull	r2, r3, r3, r1
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	2264      	movs	r2, #100	; 0x64
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	1acb      	subs	r3, r1, r3
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	3332      	adds	r3, #50	; 0x32
 80075fc:	4a33      	ldr	r2, [pc, #204]	; (80076cc <UART_SetConfig+0x4e4>)
 80075fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007608:	441c      	add	r4, r3
 800760a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800760e:	2200      	movs	r2, #0
 8007610:	673b      	str	r3, [r7, #112]	; 0x70
 8007612:	677a      	str	r2, [r7, #116]	; 0x74
 8007614:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007618:	4642      	mov	r2, r8
 800761a:	464b      	mov	r3, r9
 800761c:	1891      	adds	r1, r2, r2
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	415b      	adcs	r3, r3
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007628:	4641      	mov	r1, r8
 800762a:	1851      	adds	r1, r2, r1
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	4649      	mov	r1, r9
 8007630:	414b      	adcs	r3, r1
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007640:	4659      	mov	r1, fp
 8007642:	00cb      	lsls	r3, r1, #3
 8007644:	4651      	mov	r1, sl
 8007646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800764a:	4651      	mov	r1, sl
 800764c:	00ca      	lsls	r2, r1, #3
 800764e:	4610      	mov	r0, r2
 8007650:	4619      	mov	r1, r3
 8007652:	4603      	mov	r3, r0
 8007654:	4642      	mov	r2, r8
 8007656:	189b      	adds	r3, r3, r2
 8007658:	66bb      	str	r3, [r7, #104]	; 0x68
 800765a:	464b      	mov	r3, r9
 800765c:	460a      	mov	r2, r1
 800765e:	eb42 0303 	adc.w	r3, r2, r3
 8007662:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	663b      	str	r3, [r7, #96]	; 0x60
 800766e:	667a      	str	r2, [r7, #100]	; 0x64
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800767c:	4649      	mov	r1, r9
 800767e:	008b      	lsls	r3, r1, #2
 8007680:	4641      	mov	r1, r8
 8007682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007686:	4641      	mov	r1, r8
 8007688:	008a      	lsls	r2, r1, #2
 800768a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800768e:	f7f9 f9e9 	bl	8000a64 <__aeabi_uldivmod>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <UART_SetConfig+0x4e4>)
 8007698:	fba3 1302 	umull	r1, r3, r3, r2
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	2164      	movs	r1, #100	; 0x64
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	3332      	adds	r3, #50	; 0x32
 80076aa:	4a08      	ldr	r2, [pc, #32]	; (80076cc <UART_SetConfig+0x4e4>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4422      	add	r2, r4
 80076be:	609a      	str	r2, [r3, #8]
}
 80076c0:	bf00      	nop
 80076c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076c6:	46bd      	mov	sp, r7
 80076c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076cc:	51eb851f 	.word	0x51eb851f

080076d0 <realloc>:
 80076d0:	4b02      	ldr	r3, [pc, #8]	; (80076dc <realloc+0xc>)
 80076d2:	460a      	mov	r2, r1
 80076d4:	4601      	mov	r1, r0
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	f000 b802 	b.w	80076e0 <_realloc_r>
 80076dc:	20000058 	.word	0x20000058

080076e0 <_realloc_r>:
 80076e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e4:	4680      	mov	r8, r0
 80076e6:	4614      	mov	r4, r2
 80076e8:	460e      	mov	r6, r1
 80076ea:	b921      	cbnz	r1, 80076f6 <_realloc_r+0x16>
 80076ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076f0:	4611      	mov	r1, r2
 80076f2:	f000 b8d3 	b.w	800789c <_malloc_r>
 80076f6:	b92a      	cbnz	r2, 8007704 <_realloc_r+0x24>
 80076f8:	f000 f864 	bl	80077c4 <_free_r>
 80076fc:	4625      	mov	r5, r4
 80076fe:	4628      	mov	r0, r5
 8007700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007704:	f000 f956 	bl	80079b4 <_malloc_usable_size_r>
 8007708:	4284      	cmp	r4, r0
 800770a:	4607      	mov	r7, r0
 800770c:	d802      	bhi.n	8007714 <_realloc_r+0x34>
 800770e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007712:	d812      	bhi.n	800773a <_realloc_r+0x5a>
 8007714:	4621      	mov	r1, r4
 8007716:	4640      	mov	r0, r8
 8007718:	f000 f8c0 	bl	800789c <_malloc_r>
 800771c:	4605      	mov	r5, r0
 800771e:	2800      	cmp	r0, #0
 8007720:	d0ed      	beq.n	80076fe <_realloc_r+0x1e>
 8007722:	42bc      	cmp	r4, r7
 8007724:	4622      	mov	r2, r4
 8007726:	4631      	mov	r1, r6
 8007728:	bf28      	it	cs
 800772a:	463a      	movcs	r2, r7
 800772c:	f000 f83c 	bl	80077a8 <memcpy>
 8007730:	4631      	mov	r1, r6
 8007732:	4640      	mov	r0, r8
 8007734:	f000 f846 	bl	80077c4 <_free_r>
 8007738:	e7e1      	b.n	80076fe <_realloc_r+0x1e>
 800773a:	4635      	mov	r5, r6
 800773c:	e7df      	b.n	80076fe <_realloc_r+0x1e>

0800773e <memset>:
 800773e:	4402      	add	r2, r0
 8007740:	4603      	mov	r3, r0
 8007742:	4293      	cmp	r3, r2
 8007744:	d100      	bne.n	8007748 <memset+0xa>
 8007746:	4770      	bx	lr
 8007748:	f803 1b01 	strb.w	r1, [r3], #1
 800774c:	e7f9      	b.n	8007742 <memset+0x4>
	...

08007750 <__errno>:
 8007750:	4b01      	ldr	r3, [pc, #4]	; (8007758 <__errno+0x8>)
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	20000058 	.word	0x20000058

0800775c <__libc_init_array>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	4d0d      	ldr	r5, [pc, #52]	; (8007794 <__libc_init_array+0x38>)
 8007760:	4c0d      	ldr	r4, [pc, #52]	; (8007798 <__libc_init_array+0x3c>)
 8007762:	1b64      	subs	r4, r4, r5
 8007764:	10a4      	asrs	r4, r4, #2
 8007766:	2600      	movs	r6, #0
 8007768:	42a6      	cmp	r6, r4
 800776a:	d109      	bne.n	8007780 <__libc_init_array+0x24>
 800776c:	4d0b      	ldr	r5, [pc, #44]	; (800779c <__libc_init_array+0x40>)
 800776e:	4c0c      	ldr	r4, [pc, #48]	; (80077a0 <__libc_init_array+0x44>)
 8007770:	f000 f938 	bl	80079e4 <_init>
 8007774:	1b64      	subs	r4, r4, r5
 8007776:	10a4      	asrs	r4, r4, #2
 8007778:	2600      	movs	r6, #0
 800777a:	42a6      	cmp	r6, r4
 800777c:	d105      	bne.n	800778a <__libc_init_array+0x2e>
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	f855 3b04 	ldr.w	r3, [r5], #4
 8007784:	4798      	blx	r3
 8007786:	3601      	adds	r6, #1
 8007788:	e7ee      	b.n	8007768 <__libc_init_array+0xc>
 800778a:	f855 3b04 	ldr.w	r3, [r5], #4
 800778e:	4798      	blx	r3
 8007790:	3601      	adds	r6, #1
 8007792:	e7f2      	b.n	800777a <__libc_init_array+0x1e>
 8007794:	08007d28 	.word	0x08007d28
 8007798:	08007d28 	.word	0x08007d28
 800779c:	08007d28 	.word	0x08007d28
 80077a0:	08007d30 	.word	0x08007d30

080077a4 <__retarget_lock_acquire_recursive>:
 80077a4:	4770      	bx	lr

080077a6 <__retarget_lock_release_recursive>:
 80077a6:	4770      	bx	lr

080077a8 <memcpy>:
 80077a8:	440a      	add	r2, r1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b0:	d100      	bne.n	80077b4 <memcpy+0xc>
 80077b2:	4770      	bx	lr
 80077b4:	b510      	push	{r4, lr}
 80077b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077be:	4291      	cmp	r1, r2
 80077c0:	d1f9      	bne.n	80077b6 <memcpy+0xe>
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <_free_r>:
 80077c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d044      	beq.n	8007854 <_free_r+0x90>
 80077ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ce:	9001      	str	r0, [sp, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f1a1 0404 	sub.w	r4, r1, #4
 80077d6:	bfb8      	it	lt
 80077d8:	18e4      	addlt	r4, r4, r3
 80077da:	f000 f8df 	bl	800799c <__malloc_lock>
 80077de:	4a1e      	ldr	r2, [pc, #120]	; (8007858 <_free_r+0x94>)
 80077e0:	9801      	ldr	r0, [sp, #4]
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	b933      	cbnz	r3, 80077f4 <_free_r+0x30>
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	6014      	str	r4, [r2, #0]
 80077ea:	b003      	add	sp, #12
 80077ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077f0:	f000 b8da 	b.w	80079a8 <__malloc_unlock>
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	d908      	bls.n	800780a <_free_r+0x46>
 80077f8:	6825      	ldr	r5, [r4, #0]
 80077fa:	1961      	adds	r1, r4, r5
 80077fc:	428b      	cmp	r3, r1
 80077fe:	bf01      	itttt	eq
 8007800:	6819      	ldreq	r1, [r3, #0]
 8007802:	685b      	ldreq	r3, [r3, #4]
 8007804:	1949      	addeq	r1, r1, r5
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	e7ed      	b.n	80077e6 <_free_r+0x22>
 800780a:	461a      	mov	r2, r3
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b10b      	cbz	r3, 8007814 <_free_r+0x50>
 8007810:	42a3      	cmp	r3, r4
 8007812:	d9fa      	bls.n	800780a <_free_r+0x46>
 8007814:	6811      	ldr	r1, [r2, #0]
 8007816:	1855      	adds	r5, r2, r1
 8007818:	42a5      	cmp	r5, r4
 800781a:	d10b      	bne.n	8007834 <_free_r+0x70>
 800781c:	6824      	ldr	r4, [r4, #0]
 800781e:	4421      	add	r1, r4
 8007820:	1854      	adds	r4, r2, r1
 8007822:	42a3      	cmp	r3, r4
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	d1e0      	bne.n	80077ea <_free_r+0x26>
 8007828:	681c      	ldr	r4, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	6053      	str	r3, [r2, #4]
 800782e:	440c      	add	r4, r1
 8007830:	6014      	str	r4, [r2, #0]
 8007832:	e7da      	b.n	80077ea <_free_r+0x26>
 8007834:	d902      	bls.n	800783c <_free_r+0x78>
 8007836:	230c      	movs	r3, #12
 8007838:	6003      	str	r3, [r0, #0]
 800783a:	e7d6      	b.n	80077ea <_free_r+0x26>
 800783c:	6825      	ldr	r5, [r4, #0]
 800783e:	1961      	adds	r1, r4, r5
 8007840:	428b      	cmp	r3, r1
 8007842:	bf04      	itt	eq
 8007844:	6819      	ldreq	r1, [r3, #0]
 8007846:	685b      	ldreq	r3, [r3, #4]
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	bf04      	itt	eq
 800784c:	1949      	addeq	r1, r1, r5
 800784e:	6021      	streq	r1, [r4, #0]
 8007850:	6054      	str	r4, [r2, #4]
 8007852:	e7ca      	b.n	80077ea <_free_r+0x26>
 8007854:	b003      	add	sp, #12
 8007856:	bd30      	pop	{r4, r5, pc}
 8007858:	20000d20 	.word	0x20000d20

0800785c <sbrk_aligned>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	4e0e      	ldr	r6, [pc, #56]	; (8007898 <sbrk_aligned+0x3c>)
 8007860:	460c      	mov	r4, r1
 8007862:	6831      	ldr	r1, [r6, #0]
 8007864:	4605      	mov	r5, r0
 8007866:	b911      	cbnz	r1, 800786e <sbrk_aligned+0x12>
 8007868:	f000 f8ac 	bl	80079c4 <_sbrk_r>
 800786c:	6030      	str	r0, [r6, #0]
 800786e:	4621      	mov	r1, r4
 8007870:	4628      	mov	r0, r5
 8007872:	f000 f8a7 	bl	80079c4 <_sbrk_r>
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	d00a      	beq.n	8007890 <sbrk_aligned+0x34>
 800787a:	1cc4      	adds	r4, r0, #3
 800787c:	f024 0403 	bic.w	r4, r4, #3
 8007880:	42a0      	cmp	r0, r4
 8007882:	d007      	beq.n	8007894 <sbrk_aligned+0x38>
 8007884:	1a21      	subs	r1, r4, r0
 8007886:	4628      	mov	r0, r5
 8007888:	f000 f89c 	bl	80079c4 <_sbrk_r>
 800788c:	3001      	adds	r0, #1
 800788e:	d101      	bne.n	8007894 <sbrk_aligned+0x38>
 8007890:	f04f 34ff 	mov.w	r4, #4294967295
 8007894:	4620      	mov	r0, r4
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	20000d24 	.word	0x20000d24

0800789c <_malloc_r>:
 800789c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	1ccd      	adds	r5, r1, #3
 80078a2:	f025 0503 	bic.w	r5, r5, #3
 80078a6:	3508      	adds	r5, #8
 80078a8:	2d0c      	cmp	r5, #12
 80078aa:	bf38      	it	cc
 80078ac:	250c      	movcc	r5, #12
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	4607      	mov	r7, r0
 80078b2:	db01      	blt.n	80078b8 <_malloc_r+0x1c>
 80078b4:	42a9      	cmp	r1, r5
 80078b6:	d905      	bls.n	80078c4 <_malloc_r+0x28>
 80078b8:	230c      	movs	r3, #12
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	2600      	movs	r6, #0
 80078be:	4630      	mov	r0, r6
 80078c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007998 <_malloc_r+0xfc>
 80078c8:	f000 f868 	bl	800799c <__malloc_lock>
 80078cc:	f8d8 3000 	ldr.w	r3, [r8]
 80078d0:	461c      	mov	r4, r3
 80078d2:	bb5c      	cbnz	r4, 800792c <_malloc_r+0x90>
 80078d4:	4629      	mov	r1, r5
 80078d6:	4638      	mov	r0, r7
 80078d8:	f7ff ffc0 	bl	800785c <sbrk_aligned>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	4604      	mov	r4, r0
 80078e0:	d155      	bne.n	800798e <_malloc_r+0xf2>
 80078e2:	f8d8 4000 	ldr.w	r4, [r8]
 80078e6:	4626      	mov	r6, r4
 80078e8:	2e00      	cmp	r6, #0
 80078ea:	d145      	bne.n	8007978 <_malloc_r+0xdc>
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	d048      	beq.n	8007982 <_malloc_r+0xe6>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	4631      	mov	r1, r6
 80078f4:	4638      	mov	r0, r7
 80078f6:	eb04 0903 	add.w	r9, r4, r3
 80078fa:	f000 f863 	bl	80079c4 <_sbrk_r>
 80078fe:	4581      	cmp	r9, r0
 8007900:	d13f      	bne.n	8007982 <_malloc_r+0xe6>
 8007902:	6821      	ldr	r1, [r4, #0]
 8007904:	1a6d      	subs	r5, r5, r1
 8007906:	4629      	mov	r1, r5
 8007908:	4638      	mov	r0, r7
 800790a:	f7ff ffa7 	bl	800785c <sbrk_aligned>
 800790e:	3001      	adds	r0, #1
 8007910:	d037      	beq.n	8007982 <_malloc_r+0xe6>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	442b      	add	r3, r5
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	f8d8 3000 	ldr.w	r3, [r8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d038      	beq.n	8007992 <_malloc_r+0xf6>
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	42a2      	cmp	r2, r4
 8007924:	d12b      	bne.n	800797e <_malloc_r+0xe2>
 8007926:	2200      	movs	r2, #0
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	e00f      	b.n	800794c <_malloc_r+0xb0>
 800792c:	6822      	ldr	r2, [r4, #0]
 800792e:	1b52      	subs	r2, r2, r5
 8007930:	d41f      	bmi.n	8007972 <_malloc_r+0xd6>
 8007932:	2a0b      	cmp	r2, #11
 8007934:	d917      	bls.n	8007966 <_malloc_r+0xca>
 8007936:	1961      	adds	r1, r4, r5
 8007938:	42a3      	cmp	r3, r4
 800793a:	6025      	str	r5, [r4, #0]
 800793c:	bf18      	it	ne
 800793e:	6059      	strne	r1, [r3, #4]
 8007940:	6863      	ldr	r3, [r4, #4]
 8007942:	bf08      	it	eq
 8007944:	f8c8 1000 	streq.w	r1, [r8]
 8007948:	5162      	str	r2, [r4, r5]
 800794a:	604b      	str	r3, [r1, #4]
 800794c:	4638      	mov	r0, r7
 800794e:	f104 060b 	add.w	r6, r4, #11
 8007952:	f000 f829 	bl	80079a8 <__malloc_unlock>
 8007956:	f026 0607 	bic.w	r6, r6, #7
 800795a:	1d23      	adds	r3, r4, #4
 800795c:	1af2      	subs	r2, r6, r3
 800795e:	d0ae      	beq.n	80078be <_malloc_r+0x22>
 8007960:	1b9b      	subs	r3, r3, r6
 8007962:	50a3      	str	r3, [r4, r2]
 8007964:	e7ab      	b.n	80078be <_malloc_r+0x22>
 8007966:	42a3      	cmp	r3, r4
 8007968:	6862      	ldr	r2, [r4, #4]
 800796a:	d1dd      	bne.n	8007928 <_malloc_r+0x8c>
 800796c:	f8c8 2000 	str.w	r2, [r8]
 8007970:	e7ec      	b.n	800794c <_malloc_r+0xb0>
 8007972:	4623      	mov	r3, r4
 8007974:	6864      	ldr	r4, [r4, #4]
 8007976:	e7ac      	b.n	80078d2 <_malloc_r+0x36>
 8007978:	4634      	mov	r4, r6
 800797a:	6876      	ldr	r6, [r6, #4]
 800797c:	e7b4      	b.n	80078e8 <_malloc_r+0x4c>
 800797e:	4613      	mov	r3, r2
 8007980:	e7cc      	b.n	800791c <_malloc_r+0x80>
 8007982:	230c      	movs	r3, #12
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	4638      	mov	r0, r7
 8007988:	f000 f80e 	bl	80079a8 <__malloc_unlock>
 800798c:	e797      	b.n	80078be <_malloc_r+0x22>
 800798e:	6025      	str	r5, [r4, #0]
 8007990:	e7dc      	b.n	800794c <_malloc_r+0xb0>
 8007992:	605b      	str	r3, [r3, #4]
 8007994:	deff      	udf	#255	; 0xff
 8007996:	bf00      	nop
 8007998:	20000d20 	.word	0x20000d20

0800799c <__malloc_lock>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__malloc_lock+0x8>)
 800799e:	f7ff bf01 	b.w	80077a4 <__retarget_lock_acquire_recursive>
 80079a2:	bf00      	nop
 80079a4:	20000d1c 	.word	0x20000d1c

080079a8 <__malloc_unlock>:
 80079a8:	4801      	ldr	r0, [pc, #4]	; (80079b0 <__malloc_unlock+0x8>)
 80079aa:	f7ff befc 	b.w	80077a6 <__retarget_lock_release_recursive>
 80079ae:	bf00      	nop
 80079b0:	20000d1c 	.word	0x20000d1c

080079b4 <_malloc_usable_size_r>:
 80079b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b8:	1f18      	subs	r0, r3, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfbc      	itt	lt
 80079be:	580b      	ldrlt	r3, [r1, r0]
 80079c0:	18c0      	addlt	r0, r0, r3
 80079c2:	4770      	bx	lr

080079c4 <_sbrk_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4d06      	ldr	r5, [pc, #24]	; (80079e0 <_sbrk_r+0x1c>)
 80079c8:	2300      	movs	r3, #0
 80079ca:	4604      	mov	r4, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	602b      	str	r3, [r5, #0]
 80079d0:	f7fc fb40 	bl	8004054 <_sbrk>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_sbrk_r+0x1a>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	b103      	cbz	r3, 80079de <_sbrk_r+0x1a>
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	20000d18 	.word	0x20000d18

080079e4 <_init>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	bf00      	nop
 80079e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ea:	bc08      	pop	{r3}
 80079ec:	469e      	mov	lr, r3
 80079ee:	4770      	bx	lr

080079f0 <_fini>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr
