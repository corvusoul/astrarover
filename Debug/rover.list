
rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008588  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a34  08008a34  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a34  08008a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a3c  08008a3c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000d70  20000060  20000060  00020060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000dd0  20000dd0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015073  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002904  00000000  00000000  00035142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f40  00000000  00000000  00037a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bfa  00000000  00000000  00038988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002242a  00000000  00000000  00039582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011d37  00000000  00000000  0005b9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d19e2  00000000  00000000  0006d6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000045e4  00000000  00000000  0013f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  001436ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080086f8 	.word	0x080086f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	080086f8 	.word	0x080086f8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b970 	b.w	8000d5c <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	460f      	mov	r7, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d14a      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0xe2>
 8000aaa:	fab2 f382 	clz	r3, r2
 8000aae:	b143      	cbz	r3, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab4:	f1c3 0220 	rsb	r2, r3, #32
 8000ab8:	409f      	lsls	r7, r3
 8000aba:	fa20 f202 	lsr.w	r2, r0, r2
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	409c      	lsls	r4, r3
 8000ac2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ac6:	fa1f f58c 	uxth.w	r5, ip
 8000aca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ace:	0c22      	lsrs	r2, r4, #16
 8000ad0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ad4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad8:	fb01 f005 	mul.w	r0, r1, r5
 8000adc:	4290      	cmp	r0, r2
 8000ade:	d90a      	bls.n	8000af6 <__udivmoddi4+0x62>
 8000ae0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae8:	f080 811c 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000aec:	4290      	cmp	r0, r2
 8000aee:	f240 8119 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000af2:	3902      	subs	r1, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a12      	subs	r2, r2, r0
 8000af8:	b2a4      	uxth	r4, r4
 8000afa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000afe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b06:	fb00 f505 	mul.w	r5, r0, r5
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	d90a      	bls.n	8000b24 <__udivmoddi4+0x90>
 8000b0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b16:	f080 8107 	bcs.w	8000d28 <__udivmoddi4+0x294>
 8000b1a:	42a5      	cmp	r5, r4
 8000b1c:	f240 8104 	bls.w	8000d28 <__udivmoddi4+0x294>
 8000b20:	4464      	add	r4, ip
 8000b22:	3802      	subs	r0, #2
 8000b24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b28:	1b64      	subs	r4, r4, r5
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	b11e      	cbz	r6, 8000b36 <__udivmoddi4+0xa2>
 8000b2e:	40dc      	lsrs	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	e9c6 4300 	strd	r4, r3, [r6]
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0xbc>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80ed 	beq.w	8000d1e <__udivmoddi4+0x28a>
 8000b44:	2100      	movs	r1, #0
 8000b46:	e9c6 0500 	strd	r0, r5, [r6]
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b50:	fab3 f183 	clz	r1, r3
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d149      	bne.n	8000bec <__udivmoddi4+0x158>
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	d302      	bcc.n	8000b62 <__udivmoddi4+0xce>
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	f200 80f8 	bhi.w	8000d52 <__udivmoddi4+0x2be>
 8000b62:	1a84      	subs	r4, r0, r2
 8000b64:	eb65 0203 	sbc.w	r2, r5, r3
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4617      	mov	r7, r2
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d0e2      	beq.n	8000b36 <__udivmoddi4+0xa2>
 8000b70:	e9c6 4700 	strd	r4, r7, [r6]
 8000b74:	e7df      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xe6>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f382 	clz	r3, r2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8090 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b84:	1a8a      	subs	r2, r1, r2
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b94:	fb07 2015 	mls	r0, r7, r5, r2
 8000b98:	0c22      	lsrs	r2, r4, #16
 8000b9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba6:	eb1c 0202 	adds.w	r2, ip, r2
 8000baa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4290      	cmp	r0, r2
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2b8>
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	1a12      	subs	r2, r2, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x14e>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x14c>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2c2>
 8000be0:	4610      	mov	r0, r2
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bea:	e79f      	b.n	8000b2c <__udivmoddi4+0x98>
 8000bec:	f1c1 0720 	rsb	r7, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000c02:	40fd      	lsrs	r5, r7
 8000c04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c08:	4323      	orrs	r3, r4
 8000c0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c0e:	fa1f fe8c 	uxth.w	lr, ip
 8000c12:	fb09 5518 	mls	r5, r9, r8, r5
 8000c16:	0c1c      	lsrs	r4, r3, #16
 8000c18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	fa00 f001 	lsl.w	r0, r0, r1
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2b4>
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2b4>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4464      	add	r4, ip
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	b29d      	uxth	r5, r3
 8000c48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2ac>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2ac>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	4464      	add	r4, ip
 8000c6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c72:	fba3 9502 	umull	r9, r5, r3, r2
 8000c76:	eba4 040e 	sub.w	r4, r4, lr
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46ae      	mov	lr, r5
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x29c>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x298>
 8000c84:	b156      	cbz	r6, 8000c9c <__udivmoddi4+0x208>
 8000c86:	ebb0 0208 	subs.w	r2, r0, r8
 8000c8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c92:	40ca      	lsrs	r2, r1
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	4317      	orrs	r7, r2
 8000c98:	e9c6 7400 	strd	r7, r4, [r6]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	f1c3 0120 	rsb	r1, r3, #32
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cb4:	409d      	lsls	r5, r3
 8000cb6:	432a      	orrs	r2, r5
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cce:	fb00 f50e 	mul.w	r5, r0, lr
 8000cd2:	428d      	cmp	r5, r1
 8000cd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x258>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b0>
 8000ce4:	428d      	cmp	r5, r1
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b0>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1b49      	subs	r1, r1, r5
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cf4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000d00:	4291      	cmp	r1, r2
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x282>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2a8>
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2a8>
 8000d12:	3d02      	subs	r5, #2
 8000d14:	4462      	add	r2, ip
 8000d16:	1a52      	subs	r2, r2, r1
 8000d18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0xfc>
 8000d1e:	4631      	mov	r1, r6
 8000d20:	4630      	mov	r0, r6
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000d24:	4639      	mov	r1, r7
 8000d26:	e6e6      	b.n	8000af6 <__udivmoddi4+0x62>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	e6fb      	b.n	8000b24 <__udivmoddi4+0x90>
 8000d2c:	4548      	cmp	r0, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3c:	4645      	mov	r5, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x282>
 8000d40:	462b      	mov	r3, r5
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x258>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4c:	3d02      	subs	r5, #2
 8000d4e:	4462      	add	r2, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d52:	4608      	mov	r0, r1
 8000d54:	e70a      	b.n	8000b6c <__udivmoddi4+0xd8>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x14e>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f003 fc7c 	bl	8004660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f840 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f000 fa2c 	bl	80011c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d70:	f000 fa02 	bl	8001178 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d74:	f000 f8a4 	bl	8000ec0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d78:	f000 f9d4 	bl	8001124 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d7c:	f000 f8ec 	bl	8000f58 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d80:	f000 f982 	bl	8001088 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000d84:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <main+0x78>)
 8000d86:	f005 f8fd 	bl	8005f84 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <main+0x7c>)
 8000d8c:	f005 f8fa 	bl	8005f84 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d90:	2100      	movs	r1, #0
 8000d92:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <main+0x78>)
 8000d94:	f005 fa28 	bl	80061e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d98:	2104      	movs	r1, #4
 8000d9a:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <main+0x78>)
 8000d9c:	f005 fa24 	bl	80061e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000da0:	2108      	movs	r1, #8
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <main+0x78>)
 8000da4:	f005 fa20 	bl	80061e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000da8:	210c      	movs	r1, #12
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <main+0x78>)
 8000dac:	f005 fa1c 	bl	80061e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <main+0x80>)
 8000db2:	f005 f94f 	bl	8006054 <HAL_TIM_Base_Start_IT>

  //char uart_buf[100];
  //int uart_buf_len;
  setup();
 8000db6:	f002 fb45 	bl	8003444 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <main+0x84>)
 8000dbe:	f004 fb95 	bl	80054ec <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d104      	bne.n	8000dd2 <main+0x72>
	  {
		  nowVal = thc_milliseconds();
 8000dc8:	f000 faba 	bl	8001340 <thc_milliseconds>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <main+0x88>)
 8000dd0:	6013      	str	r3, [r2, #0]

	  }
	  	  loop();
 8000dd2:	f002 fb53 	bl	800347c <loop>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 8000dd6:	e7f0      	b.n	8000dba <main+0x5a>
 8000dd8:	200000c4 	.word	0x200000c4
 8000ddc:	2000010c 	.word	0x2000010c
 8000de0:	2000007c 	.word	0x2000007c
 8000de4:	40020000 	.word	0x40020000
 8000de8:	20000258 	.word	0x20000258

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	2230      	movs	r2, #48	; 0x30
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f007 fb29 	bl	8008452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e52:	2302      	movs	r3, #2
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000e60:	235a      	movs	r3, #90	; 0x5a
 8000e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fb9f 	bl	80055b4 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e7c:	f000 fa70 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2302      	movs	r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 fe00 	bl	8005aa4 <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eaa:	f000 fa59 	bl	8001360 <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3750      	adds	r7, #80	; 0x50
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30000;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000ee6:	f247 5230 	movw	r2, #30000	; 0x7530
 8000eea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000ef4:	2296      	movs	r2, #150	; 0x96
 8000ef6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000f06:	f004 ffed 	bl	8005ee4 <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f10:	f000 fa26 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000f22:	f005 fbf3 	bl	800670c <HAL_TIM_ConfigClockSource>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f000 fa18 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_TIM2_Init+0x94>)
 8000f3e:	f005 ffe5 	bl	8006f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f48:	f000 fa0a 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000007c 	.word	0x2000007c

08000f58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	; 0x38
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f88:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <MX_TIM3_Init+0x128>)
 8000f8a:	4a3e      	ldr	r2, [pc, #248]	; (8001084 <MX_TIM3_Init+0x12c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 450;
 8000f8e:	4b3c      	ldr	r3, [pc, #240]	; (8001080 <MX_TIM3_Init+0x128>)
 8000f90:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000f94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <MX_TIM3_Init+0x128>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000f9c:	4b38      	ldr	r3, [pc, #224]	; (8001080 <MX_TIM3_Init+0x128>)
 8000f9e:	2264      	movs	r2, #100	; 0x64
 8000fa0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <MX_TIM3_Init+0x128>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b35      	ldr	r3, [pc, #212]	; (8001080 <MX_TIM3_Init+0x128>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fae:	4834      	ldr	r0, [pc, #208]	; (8001080 <MX_TIM3_Init+0x128>)
 8000fb0:	f004 ff98 	bl	8005ee4 <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fba:	f000 f9d1 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	482d      	ldr	r0, [pc, #180]	; (8001080 <MX_TIM3_Init+0x128>)
 8000fcc:	f005 fb9e 	bl	800670c <HAL_TIM_ConfigClockSource>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fd6:	f000 f9c3 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fda:	4829      	ldr	r0, [pc, #164]	; (8001080 <MX_TIM3_Init+0x128>)
 8000fdc:	f005 f8aa 	bl	8006134 <HAL_TIM_PWM_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fe6:	f000 f9bb 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4821      	ldr	r0, [pc, #132]	; (8001080 <MX_TIM3_Init+0x128>)
 8000ffa:	f005 ff87 	bl	8006f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001004:	f000 f9ac 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001008:	2360      	movs	r3, #96	; 0x60
 800100a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <MX_TIM3_Init+0x128>)
 8001020:	f005 fab2 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800102a:	f000 f999 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2204      	movs	r2, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <MX_TIM3_Init+0x128>)
 8001036:	f005 faa7 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001040:	f000 f98e 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2208      	movs	r2, #8
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM3_Init+0x128>)
 800104c:	f005 fa9c 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001056:	f000 f983 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	220c      	movs	r2, #12
 800105e:	4619      	mov	r1, r3
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <MX_TIM3_Init+0x128>)
 8001062:	f005 fa91 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800106c:	f000 f978 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <MX_TIM3_Init+0x128>)
 8001072:	f003 f8e9 	bl	8004248 <HAL_TIM_MspPostInit>

}
 8001076:	bf00      	nop
 8001078:	3738      	adds	r7, #56	; 0x38
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000c4 	.word	0x200000c4
 8001084:	40000400 	.word	0x40000400

08001088 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_TIM5_Init+0x94>)
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <MX_TIM5_Init+0x98>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_TIM5_Init+0x94>)
 80010ac:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80010b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_TIM5_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_TIM5_Init+0x94>)
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_TIM5_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_TIM5_Init+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <MX_TIM5_Init+0x94>)
 80010ce:	f004 ff09 	bl	8005ee4 <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80010d8:	f000 f942 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_TIM5_Init+0x94>)
 80010ea:	f005 fb0f 	bl	800670c <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80010f4:	f000 f934 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_TIM5_Init+0x94>)
 8001106:	f005 ff01 	bl	8006f0c <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001110:	f000 f926 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000010c 	.word	0x2000010c
 8001120:	40000c00 	.word	0x40000c00

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_USART2_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001130:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800115c:	f005 ff66 	bl	800702c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 f8fb 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000154 	.word	0x20000154
 8001174:	40004400 	.word	0x40004400

08001178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_DMA_Init+0x4c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <MX_DMA_Init+0x4c>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <MX_DMA_Init+0x4c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2010      	movs	r0, #16
 80011a0:	f003 fbcf 	bl	8004942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011a4:	2010      	movs	r0, #16
 80011a6:	f003 fbe8 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2011      	movs	r0, #17
 80011b0:	f003 fbc7 	bl	8004942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011b4:	2011      	movs	r0, #17
 80011b6:	f003 fbe0 	bl	800497a <HAL_NVIC_EnableIRQ>

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b52      	ldr	r3, [pc, #328]	; (800132c <MX_GPIO_Init+0x164>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a51      	ldr	r2, [pc, #324]	; (800132c <MX_GPIO_Init+0x164>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b4f      	ldr	r3, [pc, #316]	; (800132c <MX_GPIO_Init+0x164>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b4b      	ldr	r3, [pc, #300]	; (800132c <MX_GPIO_Init+0x164>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a4a      	ldr	r2, [pc, #296]	; (800132c <MX_GPIO_Init+0x164>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <MX_GPIO_Init+0x164>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b44      	ldr	r3, [pc, #272]	; (800132c <MX_GPIO_Init+0x164>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a43      	ldr	r2, [pc, #268]	; (800132c <MX_GPIO_Init+0x164>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <MX_GPIO_Init+0x164>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <MX_GPIO_Init+0x164>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a3c      	ldr	r2, [pc, #240]	; (800132c <MX_GPIO_Init+0x164>)
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <MX_GPIO_Init+0x164>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <MX_GPIO_Init+0x164>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a35      	ldr	r2, [pc, #212]	; (800132c <MX_GPIO_Init+0x164>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <MX_GPIO_Init+0x164>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001270:	482f      	ldr	r0, [pc, #188]	; (8001330 <MX_GPIO_Init+0x168>)
 8001272:	f004 f953 	bl	800551c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Push_Button_Pin */
  GPIO_InitStruct.Pin = Push_Button_Pin;
 8001276:	2301      	movs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	482a      	ldr	r0, [pc, #168]	; (8001334 <MX_GPIO_Init+0x16c>)
 800128a:	f003 ff93 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftWheelEncoderChannelA_Pin */
  GPIO_InitStruct.Pin = LeftWheelEncoderChannelA_Pin;
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001292:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftWheelEncoderChannelA_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4825      	ldr	r0, [pc, #148]	; (8001338 <MX_GPIO_Init+0x170>)
 80012a4:	f003 ff86 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftWheelEncoderChannelB_Pin */
  GPIO_InitStruct.Pin = LeftWheelEncoderChannelB_Pin;
 80012a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftWheelEncoderChannelB_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	481e      	ldr	r0, [pc, #120]	; (8001338 <MX_GPIO_Init+0x170>)
 80012be:	f003 ff79 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenLED_Pin OrangeLED_Pin RedLED_Pin BlueLED_Pin */
  GPIO_InitStruct.Pin = GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin;
 80012c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4815      	ldr	r0, [pc, #84]	; (8001330 <MX_GPIO_Init+0x168>)
 80012dc:	f003 ff6a 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightWheelEncoderChannelA_Pin */
  GPIO_InitStruct.Pin = RightWheelEncoderChannelA_Pin;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012e4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightWheelEncoderChannelA_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <MX_GPIO_Init+0x174>)
 80012f6:	f003 ff5d 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightWheelEncoderChannelB_Pin */
  GPIO_InitStruct.Pin = RightWheelEncoderChannelB_Pin;
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightWheelEncoderChannelB_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <MX_GPIO_Init+0x174>)
 800130e:	f003 ff51 	bl	80051b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2017      	movs	r0, #23
 8001318:	f003 fb13 	bl	8004942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800131c:	2017      	movs	r0, #23
 800131e:	f003 fb2c 	bl	800497a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40020000 	.word	0x40020000
 8001338:	40021000 	.word	0x40021000
 800133c:	40020400 	.word	0x40020400

08001340 <thc_milliseconds>:

/* USER CODE BEGIN 4 */
int thc_milliseconds()
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
	int timenow = __HAL_TIM_GET_COUNTER(&htim5);
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <thc_milliseconds+0x1c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	607b      	str	r3, [r7, #4]
	return timenow;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	2000010c 	.word	0x2000010c

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	e7fe      	b.n	8001368 <Error_Handler+0x8>

0800136a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	08008a04 	.word	0x08008a04

080013ac <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
      data()
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ffe8 	bl	800138c <_ZN3ros3MsgC1Ev>
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ffcf 	bl	800136a <_ZN3ros4TimeC1Ev>
    {
    }
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	080089ec 	.word	0x080089ec

080013dc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2ca      	uxtb	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	0a19      	lsrs	r1, r3, #8
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3301      	adds	r3, #1
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4413      	add	r3, r2
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	0c19      	lsrs	r1, r3, #16
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3302      	adds	r3, #2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	b2ca      	uxtb	r2, r1
 800141a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	0e19      	lsrs	r1, r3, #24
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3303      	adds	r3, #3
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	4413      	add	r3, r2
 800142a:	b2ca      	uxtb	r2, r1
 800142c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3304      	adds	r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6899      	ldr	r1, [r3, #8]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	4413      	add	r3, r2
 800143e:	b2ca      	uxtb	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	0a19      	lsrs	r1, r3, #8
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	b2ca      	uxtb	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	0c19      	lsrs	r1, r3, #16
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3302      	adds	r3, #2
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	b2ca      	uxtb	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	0e19      	lsrs	r1, r3, #24
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3303      	adds	r3, #3
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	4413      	add	r3, r2
 8001474:	b2ca      	uxtb	r2, r1
 8001476:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3304      	adds	r3, #4
 800147c:	60fb      	str	r3, [r7, #12]
      return offset;
 800147e:	68fb      	ldr	r3, [r7, #12]
    }
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	440b      	add	r3, r1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3302      	adds	r3, #2
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	440b      	add	r3, r1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	041b      	lsls	r3, r3, #16
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3303      	adds	r3, #3
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	440b      	add	r3, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	061b      	lsls	r3, r3, #24
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3304      	adds	r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3301      	adds	r3, #1
 8001506:	6839      	ldr	r1, [r7, #0]
 8001508:	440b      	add	r3, r1
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3302      	adds	r3, #2
 800151c:	6839      	ldr	r1, [r7, #0]
 800151e:	440b      	add	r3, r1
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3303      	adds	r3, #3
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	440b      	add	r3, r1
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3304      	adds	r3, #4
 8001544:	60fb      	str	r3, [r7, #12]
     return offset;
 8001546:	68fb      	ldr	r3, [r7, #12]
    }
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	08008710 	.word	0x08008710

08001570 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	08008720 	.word	0x08008720

0800158c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fef8 	bl	800138c <_ZN3ros3MsgC1Ev>
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015ac:	609a      	str	r2, [r3, #8]
      message_type(""),
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015b2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015b8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
    {
    }
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	080089d4 	.word	0x080089d4
 80015d0:	08008744 	.word	0x08008744

080015d4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	8899      	ldrh	r1, [r3, #4]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	b2ca      	uxtb	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	b299      	uxth	r1, r3
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	3301      	adds	r3, #1
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	b2ca      	uxtb	r2, r1
 8001602:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	3302      	adds	r3, #2
 8001608:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fdda 	bl	80001c8 <strlen>
 8001614:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	4413      	add	r3, r2
 800161c:	69b9      	ldr	r1, [r7, #24]
 800161e:	4618      	mov	r0, r3
 8001620:	f001 ffe8 	bl	80035f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3304      	adds	r3, #4
 8001628:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	18d0      	adds	r0, r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4619      	mov	r1, r3
 8001638:	f006 ff40 	bl	80084bc <memcpy>
      offset += length_topic_name;
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4413      	add	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fdbd 	bl	80001c8 <strlen>
 800164e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	4413      	add	r3, r2
 8001656:	6979      	ldr	r1, [r7, #20]
 8001658:	4618      	mov	r0, r3
 800165a:	f001 ffcb 	bl	80035f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4619      	mov	r1, r3
 8001672:	f006 ff23 	bl	80084bc <memcpy>
      offset += length_message_type;
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	4413      	add	r3, r2
 800167c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fda0 	bl	80001c8 <strlen>
 8001688:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	4413      	add	r3, r2
 8001690:	6939      	ldr	r1, [r7, #16]
 8001692:	4618      	mov	r0, r3
 8001694:	f001 ffae 	bl	80035f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	3304      	adds	r3, #4
 800169c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	18d0      	adds	r0, r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4619      	mov	r1, r3
 80016ac:	f006 ff06 	bl	80084bc <memcpy>
      offset += length_md5sum;
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4413      	add	r3, r2
 80016b6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80016be:	68f9      	ldr	r1, [r7, #12]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	b2ca      	uxtb	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	0a19      	lsrs	r1, r3, #8
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3301      	adds	r3, #1
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	b2ca      	uxtb	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	0c19      	lsrs	r1, r3, #16
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3302      	adds	r3, #2
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0e19      	lsrs	r1, r3, #24
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3303      	adds	r3, #3
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]
      return offset;
 8001700:	69fb      	ldr	r3, [r7, #28]
    }
 8001702:	4618      	mov	r0, r3
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800170a:	b580      	push	{r7, lr}
 800170c:	b08a      	sub	sp, #40	; 0x28
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b29a      	uxth	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	889b      	ldrh	r3, [r3, #4]
 800172a:	b21a      	sxth	r2, r3
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	3301      	adds	r3, #1
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	440b      	add	r3, r1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b21b      	sxth	r3, r3
 800173e:	b29a      	uxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	3302      	adds	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	441a      	add	r2, r3
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f001 ff6b 	bl	8003632 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	3304      	adds	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
 8001766:	e00b      	b.n	8001780 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	441a      	add	r2, r3
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	3b01      	subs	r3, #1
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	440b      	add	r3, r1
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	3301      	adds	r3, #1
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001788:	429a      	cmp	r2, r3
 800178a:	d3ed      	bcc.n	8001768 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	4413      	add	r3, r2
 8001792:	3b01      	subs	r3, #1
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	3b01      	subs	r3, #1
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	441a      	add	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4413      	add	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	441a      	add	r2, r3
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 ff38 	bl	8003632 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	3304      	adds	r3, #4
 80017c6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	e00b      	b.n	80017e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	441a      	add	r2, r3
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	440b      	add	r3, r1
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	3301      	adds	r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4413      	add	r3, r2
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3ed      	bcc.n	80017ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4413      	add	r3, r2
 80017f8:	3b01      	subs	r3, #1
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	3b01      	subs	r3, #1
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	441a      	add	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	441a      	add	r2, r3
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f001 ff05 	bl	8003632 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	3304      	adds	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	e00b      	b.n	800184c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	441a      	add	r2, r3
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b01      	subs	r3, #1
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	440b      	add	r3, r1
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4413      	add	r3, r2
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	429a      	cmp	r2, r3
 8001856:	d3ed      	bcc.n	8001834 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	3b01      	subs	r3, #1
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	4413      	add	r3, r2
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	3b01      	subs	r3, #1
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	441a      	add	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	440a      	add	r2, r1
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	3301      	adds	r3, #1
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	440b      	add	r3, r1
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	4313      	orrs	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	3302      	adds	r3, #2
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	440b      	add	r3, r1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	3303      	adds	r3, #3
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	440b      	add	r3, r1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	061b      	lsls	r3, r3, #24
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	3304      	adds	r3, #4
 80018ce:	61bb      	str	r3, [r7, #24]
     return offset;
 80018d0:	69bb      	ldr	r3, [r7, #24]
    }
 80018d2:	4618      	mov	r0, r3
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	08008748 	.word	0x08008748

080018f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	08008764 	.word	0x08008764

08001914 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fd34 	bl	800138c <_ZN3ros3MsgC1Ev>
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]
      level(0),
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	711a      	strb	r2, [r3, #4]
      msg("")
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001934:	609a      	str	r2, [r3, #8]
    {
    }
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	080089bc 	.word	0x080089bc
 8001944:	08008744 	.word	0x08008744

08001948 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	7912      	ldrb	r2, [r2, #4]
 8001960:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3301      	adds	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fc2b 	bl	80001c8 <strlen>
 8001972:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fe39 	bl	80035f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	18d0      	adds	r0, r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4619      	mov	r1, r3
 8001996:	f006 fd91 	bl	80084bc <memcpy>
      offset += length_msg;
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80019a2:	68fb      	ldr	r3, [r7, #12]
    }
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3301      	adds	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	441a      	add	r2, r3
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 fe2a 	bl	8003632 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3304      	adds	r3, #4
 80019e2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00b      	b.n	8001a02 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	441a      	add	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	440b      	add	r3, r1
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d3ed      	bcc.n	80019ea <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	3b01      	subs	r3, #1
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	441a      	add	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
     return offset;
 8001a32:	693b      	ldr	r3, [r7, #16]
    }
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	08008788 	.word	0x08008788

08001a58 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	0800879c 	.word	0x0800879c

08001a74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc84 	bl	800138c <_ZN3ros3MsgC1Ev>
 8001a84:	4a11      	ldr	r2, [pc, #68]	; (8001acc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	080089a4 	.word	0x080089a4

08001ad0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0a19      	lsrs	r1, r3, #8
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	b2ca      	uxtb	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0c19      	lsrs	r1, r3, #16
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	3302      	adds	r3, #2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0e19      	lsrs	r1, r3, #24
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3303      	adds	r3, #3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	3304      	adds	r3, #4
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	e02a      	b.n	8001b84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001b3c:	6939      	ldr	r1, [r7, #16]
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	b2ca      	uxtb	r2, r1
 8001b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	0a19      	lsrs	r1, r3, #8
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	3301      	adds	r3, #1
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	0c19      	lsrs	r1, r3, #16
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	3302      	adds	r3, #2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	b2ca      	uxtb	r2, r1
 8001b66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	0e19      	lsrs	r1, r3, #24
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	3303      	adds	r3, #3
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	b2ca      	uxtb	r2, r1
 8001b76:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	3301      	adds	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	6a3a      	ldr	r2, [r7, #32]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d3cf      	bcc.n	8001b2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6919      	ldr	r1, [r3, #16]
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	0a19      	lsrs	r1, r3, #8
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	0c19      	lsrs	r1, r3, #16
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	0e19      	lsrs	r1, r3, #24
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	3303      	adds	r3, #3
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	e02a      	b.n	8001c34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b2ca      	uxtb	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	0a19      	lsrs	r1, r3, #8
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3301      	adds	r3, #1
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	b2ca      	uxtb	r2, r1
 8001c06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	0c19      	lsrs	r1, r3, #16
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3302      	adds	r3, #2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	b2ca      	uxtb	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	0e19      	lsrs	r1, r3, #24
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	3303      	adds	r3, #3
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3301      	adds	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3cf      	bcc.n	8001bde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69d9      	ldr	r1, [r3, #28]
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	b2ca      	uxtb	r2, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	0a19      	lsrs	r1, r3, #8
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	3301      	adds	r3, #1
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	4413      	add	r3, r2
 8001c5a:	b2ca      	uxtb	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	0c19      	lsrs	r1, r3, #16
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	3302      	adds	r3, #2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b2ca      	uxtb	r2, r1
 8001c6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	0e19      	lsrs	r1, r3, #24
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	3303      	adds	r3, #3
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b2ca      	uxtb	r2, r1
 8001c80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	3304      	adds	r3, #4
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	e027      	b.n	8001cde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fa94 	bl	80001c8 <strlen>
 8001ca0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	6979      	ldr	r1, [r7, #20]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f001 fca2 	bl	80035f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	18d0      	adds	r0, r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f006 fbf6 	bl	80084bc <memcpy>
      offset += length_stringsi;
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d3d2      	bcc.n	8001c8e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001cea:	4618      	mov	r0, r3
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b08e      	sub	sp, #56	; 0x38
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	6a3a      	ldr	r2, [r7, #32]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1e:	3302      	adds	r3, #2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	6a3a      	ldr	r2, [r7, #32]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	3303      	adds	r3, #3
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	6a3a      	ldr	r2, [r7, #32]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	3304      	adds	r3, #4
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	6a3a      	ldr	r2, [r7, #32]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d90a      	bls.n	8001d66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f006 fb42 	bl	80083e4 <realloc>
 8001d60:	4602      	mov	r2, r0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a3a      	ldr	r2, [r7, #32]
 8001d6a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d70:	e035      	b.n	8001dde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d7a:	6839      	ldr	r1, [r7, #0]
 8001d7c:	440a      	add	r2, r1
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	3301      	adds	r3, #1
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	440b      	add	r3, r1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	440b      	add	r3, r1
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	3303      	adds	r3, #3
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	440b      	add	r3, r1
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	3301      	adds	r3, #1
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d3c4      	bcc.n	8001d72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df4:	3301      	adds	r3, #1
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	3302      	adds	r3, #2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	3303      	adds	r3, #3
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d90a      	bls.n	8001e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f006 face 	bl	80083e4 <realloc>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e58:	e035      	b.n	8001ec6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	440a      	add	r2, r1
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	3301      	adds	r3, #1
 8001e72:	6839      	ldr	r1, [r7, #0]
 8001e74:	440b      	add	r3, r1
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	3302      	adds	r3, #2
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	440b      	add	r3, r1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	041b      	lsls	r3, r3, #16
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	3303      	adds	r3, #3
 8001e96:	6839      	ldr	r1, [r7, #0]
 8001e98:	440b      	add	r3, r1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	3304      	adds	r3, #4
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	3214      	adds	r2, #20
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3c4      	bcc.n	8001e5a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	3301      	adds	r3, #1
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	3302      	adds	r3, #2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	3303      	adds	r3, #3
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	3304      	adds	r3, #4
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d90a      	bls.n	8001f36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f006 fa5a 	bl	80083e4 <realloc>
 8001f30:	4602      	mov	r2, r0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f40:	e03e      	b.n	8001fc0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	441a      	add	r2, r3
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 fb6f 	bl	8003632 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	3304      	adds	r3, #4
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	e00b      	b.n	8001f78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	441a      	add	r2, r3
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	3301      	adds	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d3ed      	bcc.n	8001f60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f96:	3b01      	subs	r3, #1
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	3220      	adds	r2, #32
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3bb      	bcc.n	8001f42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3738      	adds	r7, #56	; 0x38
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	080088e0 	.word	0x080088e0

08001ff0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	080087c0 	.word	0x080087c0

0800200c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	611a      	str	r2, [r3, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68d8      	ldr	r0, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6891      	ldr	r1, [r2, #8]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4798      	blx	r3
 8002058:	4603      	mov	r3, r0
  };
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
  }
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <_ZN13STM32HardwareC1Ev+0x34>)
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	20000154 	.word	0x20000154

080020d8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f804 	bl	80020ee <_ZN13STM32Hardware10reset_rbufEv>
    }
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002102:	4619      	mov	r1, r3
 8002104:	f005 f85e 	bl	80071c4 <HAL_UART_Receive_DMA>
    }
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
 800211c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffa8 	bl	800207a <_ZN13STM32Hardware10getRdmaIndEv>
 800212a:	4603      	mov	r3, r0
 800212c:	429c      	cmp	r4, r3
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002140:	1c59      	adds	r1, r3, #1
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002160:	68fb      	ldr	r3, [r7, #12]
    }
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
	...

0800216c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b20      	cmp	r3, #32
 8002180:	d108      	bne.n	8002194 <_ZN13STM32Hardware5flushEv+0x28>
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <_ZN13STM32Hardware5flushEv+0x28>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <_ZN13STM32Hardware5flushEv+0x2a>
 8002194:	2300      	movs	r3, #0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d055      	beq.n	8002246 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <_ZN13STM32Hardware5flushEv+0xe4>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d047      	beq.n	8002240 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d217      	bcs.n	80021f4 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	89fa      	ldrh	r2, [r7, #14]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f004 ff6b 	bl	80070c8 <HAL_UART_Transmit_DMA>
 80021f2:	e01f      	b.n	8002234 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002200:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800220c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	4413      	add	r3, r2
 8002214:	89fa      	ldrh	r2, [r7, #14]
 8002216:	4619      	mov	r1, r3
 8002218:	f004 ff56 	bl	80070c8 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800222c:	b29b      	uxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	f004 ff4a 	bl	80070c8 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
      }
    }
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000025c 	.word	0x2000025c

08002254 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226a:	bfa8      	it	ge
 800226c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002270:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002278:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4293      	cmp	r3, r2
 8002280:	bf28      	it	cs
 8002282:	4613      	movcs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800228c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	4618      	mov	r0, r3
 800229a:	f006 f90f 	bl	80084bc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4413      	add	r3, r2
 80022a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d00b      	beq.n	80022d2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	18d1      	adds	r1, r2, r3
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	f006 f8f5 	bl	80084bc <memcpy>
      }

      flush();
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff ff4a 	bl	800216c <_ZN13STM32Hardware5flushEv>
    }
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	f002 fa20 	bl	800472c <HAL_GetTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f842 	bl	800138c <_ZN3ros3MsgC1Ev>
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
      x(0),
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	08008960 	.word	0x08008960

08002348 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002348:	b480      	push	{r7}
 800234a:	b08b      	sub	sp, #44	; 0x2c
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800235c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002366:	6838      	ldr	r0, [r7, #0]
 8002368:	4401      	add	r1, r0
 800236a:	b2d3      	uxtb	r3, r2
 800236c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800236e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	0a02      	lsrs	r2, r0, #8
 800237c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002380:	0a0b      	lsrs	r3, r1, #8
 8002382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002384:	3101      	adds	r1, #1
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	4401      	add	r1, r0
 800238a:	b2d3      	uxtb	r3, r2
 800238c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800238e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	0c02      	lsrs	r2, r0, #16
 800239c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023a0:	0c0b      	lsrs	r3, r1, #16
 80023a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a4:	3102      	adds	r1, #2
 80023a6:	6838      	ldr	r0, [r7, #0]
 80023a8:	4401      	add	r1, r0
 80023aa:	b2d3      	uxtb	r3, r2
 80023ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80023ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	0e02      	lsrs	r2, r0, #24
 80023bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023c0:	0e0b      	lsrs	r3, r1, #24
 80023c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c4:	3103      	adds	r1, #3
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	4401      	add	r1, r0
 80023ca:	b2d3      	uxtb	r3, r2
 80023cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80023ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	000a      	movs	r2, r1
 80023dc:	2300      	movs	r3, #0
 80023de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e0:	3104      	adds	r1, #4
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	4401      	add	r1, r0
 80023e6:	b2d3      	uxtb	r3, r2
 80023e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80023ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	0a0a      	lsrs	r2, r1, #8
 80023f8:	2300      	movs	r3, #0
 80023fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fc:	3105      	adds	r1, #5
 80023fe:	6838      	ldr	r0, [r7, #0]
 8002400:	4401      	add	r1, r0
 8002402:	b2d3      	uxtb	r3, r2
 8002404:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002406:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	0c0a      	lsrs	r2, r1, #16
 8002414:	2300      	movs	r3, #0
 8002416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002418:	3106      	adds	r1, #6
 800241a:	6838      	ldr	r0, [r7, #0]
 800241c:	4401      	add	r1, r0
 800241e:	b2d3      	uxtb	r3, r2
 8002420:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002422:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	0e0a      	lsrs	r2, r1, #24
 8002430:	2300      	movs	r3, #0
 8002432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002434:	3107      	adds	r1, #7
 8002436:	6838      	ldr	r0, [r7, #0]
 8002438:	4401      	add	r1, r0
 800243a:	b2d3      	uxtb	r3, r2
 800243c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	3308      	adds	r3, #8
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800244a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800244e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	4401      	add	r1, r0
 8002458:	b2d3      	uxtb	r3, r2
 800245a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800245c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	0a02      	lsrs	r2, r0, #8
 800246a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800246e:	0a0b      	lsrs	r3, r1, #8
 8002470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002472:	3101      	adds	r1, #1
 8002474:	6838      	ldr	r0, [r7, #0]
 8002476:	4401      	add	r1, r0
 8002478:	b2d3      	uxtb	r3, r2
 800247a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800247c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	0c02      	lsrs	r2, r0, #16
 800248a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800248e:	0c0b      	lsrs	r3, r1, #16
 8002490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002492:	3102      	adds	r1, #2
 8002494:	6838      	ldr	r0, [r7, #0]
 8002496:	4401      	add	r1, r0
 8002498:	b2d3      	uxtb	r3, r2
 800249a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800249c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	0e02      	lsrs	r2, r0, #24
 80024aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024ae:	0e0b      	lsrs	r3, r1, #24
 80024b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b2:	3103      	adds	r1, #3
 80024b4:	6838      	ldr	r0, [r7, #0]
 80024b6:	4401      	add	r1, r0
 80024b8:	b2d3      	uxtb	r3, r2
 80024ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80024bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	000a      	movs	r2, r1
 80024ca:	2300      	movs	r3, #0
 80024cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ce:	3104      	adds	r1, #4
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	4401      	add	r1, r0
 80024d4:	b2d3      	uxtb	r3, r2
 80024d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80024d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	0a0a      	lsrs	r2, r1, #8
 80024e6:	2300      	movs	r3, #0
 80024e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ea:	3105      	adds	r1, #5
 80024ec:	6838      	ldr	r0, [r7, #0]
 80024ee:	4401      	add	r1, r0
 80024f0:	b2d3      	uxtb	r3, r2
 80024f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80024f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	0c0a      	lsrs	r2, r1, #16
 8002502:	2300      	movs	r3, #0
 8002504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002506:	3106      	adds	r1, #6
 8002508:	6838      	ldr	r0, [r7, #0]
 800250a:	4401      	add	r1, r0
 800250c:	b2d3      	uxtb	r3, r2
 800250e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002510:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	0e0a      	lsrs	r2, r1, #24
 800251e:	2300      	movs	r3, #0
 8002520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002522:	3107      	adds	r1, #7
 8002524:	6838      	ldr	r0, [r7, #0]
 8002526:	4401      	add	r1, r0
 8002528:	b2d3      	uxtb	r3, r2
 800252a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	3308      	adds	r3, #8
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002538:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800253c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002542:	6838      	ldr	r0, [r7, #0]
 8002544:	4401      	add	r1, r0
 8002546:	b2d3      	uxtb	r3, r2
 8002548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800254a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	0a02      	lsrs	r2, r0, #8
 8002558:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800255c:	0a0b      	lsrs	r3, r1, #8
 800255e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002560:	3101      	adds	r1, #1
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	4401      	add	r1, r0
 8002566:	b2d3      	uxtb	r3, r2
 8002568:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800256a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	0c02      	lsrs	r2, r0, #16
 8002578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800257c:	0c0b      	lsrs	r3, r1, #16
 800257e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002580:	3102      	adds	r1, #2
 8002582:	6838      	ldr	r0, [r7, #0]
 8002584:	4401      	add	r1, r0
 8002586:	b2d3      	uxtb	r3, r2
 8002588:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800258a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	0e02      	lsrs	r2, r0, #24
 8002598:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800259c:	0e0b      	lsrs	r3, r1, #24
 800259e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a0:	3103      	adds	r1, #3
 80025a2:	6838      	ldr	r0, [r7, #0]
 80025a4:	4401      	add	r1, r0
 80025a6:	b2d3      	uxtb	r3, r2
 80025a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80025aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	000a      	movs	r2, r1
 80025b8:	2300      	movs	r3, #0
 80025ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025bc:	3104      	adds	r1, #4
 80025be:	6838      	ldr	r0, [r7, #0]
 80025c0:	4401      	add	r1, r0
 80025c2:	b2d3      	uxtb	r3, r2
 80025c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80025c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	0a0a      	lsrs	r2, r1, #8
 80025d4:	2300      	movs	r3, #0
 80025d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d8:	3105      	adds	r1, #5
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	4401      	add	r1, r0
 80025de:	b2d3      	uxtb	r3, r2
 80025e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80025e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	0c0a      	lsrs	r2, r1, #16
 80025f0:	2300      	movs	r3, #0
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	3106      	adds	r1, #6
 80025f6:	6838      	ldr	r0, [r7, #0]
 80025f8:	4401      	add	r1, r0
 80025fa:	b2d3      	uxtb	r3, r2
 80025fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80025fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	0e0a      	lsrs	r2, r1, #24
 800260c:	2300      	movs	r3, #0
 800260e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002610:	3107      	adds	r1, #7
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	4401      	add	r1, r0
 8002616:	b2d3      	uxtb	r3, r2
 8002618:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	3308      	adds	r3, #8
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002622:	4618      	mov	r0, r3
 8002624:	372c      	adds	r7, #44	; 0x2c
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800262e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002632:	b0eb      	sub	sp, #428	; 0x1ac
 8002634:	af00      	add	r7, sp, #0
 8002636:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800263a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002650:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002654:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002658:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800265c:	4413      	add	r3, r2
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2200      	movs	r2, #0
 8002664:	461c      	mov	r4, r3
 8002666:	4615      	mov	r5, r2
 8002668:	ea40 0804 	orr.w	r8, r0, r4
 800266c:	ea41 0905 	orr.w	r9, r1, r5
 8002670:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002674:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002678:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2200      	movs	r2, #0
 800268a:	469a      	mov	sl, r3
 800268c:	4693      	mov	fp, r2
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800269a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800269e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80026a2:	ea40 0402 	orr.w	r4, r0, r2
 80026a6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80026aa:	430b      	orrs	r3, r1
 80026ac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026b0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80026b4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026b8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026c0:	1c9a      	adds	r2, r3, #2
 80026c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026c6:	4413      	add	r3, r2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80026d2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80026e2:	464c      	mov	r4, r9
 80026e4:	0423      	lsls	r3, r4, #16
 80026e6:	4644      	mov	r4, r8
 80026e8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80026ec:	4644      	mov	r4, r8
 80026ee:	0422      	lsls	r2, r4, #16
 80026f0:	ea40 0402 	orr.w	r4, r0, r2
 80026f4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80026f8:	430b      	orrs	r3, r1
 80026fa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80026fe:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002702:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002706:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800270a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800270e:	1cda      	adds	r2, r3, #3
 8002710:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002714:	4413      	add	r3, r2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002720:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002724:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002728:	4623      	mov	r3, r4
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002730:	4623      	mov	r3, r4
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002738:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800273c:	4623      	mov	r3, r4
 800273e:	4303      	orrs	r3, r0
 8002740:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002744:	462b      	mov	r3, r5
 8002746:	430b      	orrs	r3, r1
 8002748:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800274c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002750:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002754:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002758:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800275c:	1d1a      	adds	r2, r3, #4
 800275e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002762:	4413      	add	r3, r2
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2200      	movs	r2, #0
 800276a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800276e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800277e:	0023      	movs	r3, r4
 8002780:	2200      	movs	r2, #0
 8002782:	ea40 0402 	orr.w	r4, r0, r2
 8002786:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800278a:	430b      	orrs	r3, r1
 800278c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002790:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002794:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002798:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800279c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027a0:	1d5a      	adds	r2, r3, #5
 80027a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80027b2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80027c2:	0223      	lsls	r3, r4, #8
 80027c4:	2200      	movs	r2, #0
 80027c6:	ea40 0402 	orr.w	r4, r0, r2
 80027ca:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80027ce:	430b      	orrs	r3, r1
 80027d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80027d4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80027d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80027dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027e4:	1d9a      	adds	r2, r3, #6
 80027e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80027f6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002806:	0423      	lsls	r3, r4, #16
 8002808:	2200      	movs	r2, #0
 800280a:	ea40 0402 	orr.w	r4, r0, r2
 800280e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002812:	430b      	orrs	r3, r1
 8002814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002818:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800281c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002820:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002824:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002828:	1dda      	adds	r2, r3, #7
 800282a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2200      	movs	r2, #0
 8002836:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800283a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800284a:	0623      	lsls	r3, r4, #24
 800284c:	2200      	movs	r2, #0
 800284e:	ea40 0402 	orr.w	r4, r0, r2
 8002852:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002856:	430b      	orrs	r3, r1
 8002858:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800285c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002860:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002864:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002868:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800286c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002870:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002874:	3308      	adds	r3, #8
 8002876:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002886:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800288a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800288e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800289e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80028a2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80028a6:	4623      	mov	r3, r4
 80028a8:	4303      	orrs	r3, r0
 80028aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80028ae:	462b      	mov	r3, r5
 80028b0:	430b      	orrs	r3, r1
 80028b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028b6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80028ba:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028be:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80028c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80028d8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80028e8:	464c      	mov	r4, r9
 80028ea:	0223      	lsls	r3, r4, #8
 80028ec:	4644      	mov	r4, r8
 80028ee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80028f2:	4644      	mov	r4, r8
 80028f4:	0222      	lsls	r2, r4, #8
 80028f6:	ea40 0402 	orr.w	r4, r0, r2
 80028fa:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80028fe:	430b      	orrs	r3, r1
 8002900:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002904:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002908:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800290c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002910:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002914:	1c9a      	adds	r2, r3, #2
 8002916:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800291a:	4413      	add	r3, r2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2200      	movs	r2, #0
 8002922:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002926:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002936:	464c      	mov	r4, r9
 8002938:	0423      	lsls	r3, r4, #16
 800293a:	4644      	mov	r4, r8
 800293c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002940:	4644      	mov	r4, r8
 8002942:	0422      	lsls	r2, r4, #16
 8002944:	ea40 0402 	orr.w	r4, r0, r2
 8002948:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800294c:	430b      	orrs	r3, r1
 800294e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002952:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002956:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800295a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800295e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002962:	1cda      	adds	r2, r3, #3
 8002964:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002968:	4413      	add	r3, r2
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2200      	movs	r2, #0
 8002970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002974:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002978:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800297c:	4623      	mov	r3, r4
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002984:	4623      	mov	r3, r4
 8002986:	061b      	lsls	r3, r3, #24
 8002988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800298c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002990:	4623      	mov	r3, r4
 8002992:	4303      	orrs	r3, r0
 8002994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002998:	462b      	mov	r3, r5
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029a0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80029a4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80029a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b0:	1d1a      	adds	r2, r3, #4
 80029b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029c2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80029d2:	0023      	movs	r3, r4
 80029d4:	2200      	movs	r2, #0
 80029d6:	ea40 0402 	orr.w	r4, r0, r2
 80029da:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80029e4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80029e8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80029ec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f4:	1d5a      	adds	r2, r3, #5
 80029f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a06:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002a16:	0223      	lsls	r3, r4, #8
 8002a18:	2200      	movs	r2, #0
 8002a1a:	ea40 0402 	orr.w	r4, r0, r2
 8002a1e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002a22:	430b      	orrs	r3, r1
 8002a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a28:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002a2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a38:	1d9a      	adds	r2, r3, #6
 8002a3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a3e:	4413      	add	r3, r2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002a5a:	0423      	lsls	r3, r4, #16
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	ea40 0402 	orr.w	r4, r0, r2
 8002a62:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002a66:	430b      	orrs	r3, r1
 8002a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a6c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002a70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a7c:	1dda      	adds	r2, r3, #7
 8002a7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a82:	4413      	add	r3, r2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002a9e:	0623      	lsls	r3, r4, #24
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	ea40 0402 	orr.w	r4, r0, r2
 8002aa6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ab0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002ab4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002ab8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002abc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ac0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002ac4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ac8:	3308      	adds	r3, #8
 8002aca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ada:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ade:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002af2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002af6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002afa:	4623      	mov	r3, r4
 8002afc:	4303      	orrs	r3, r0
 8002afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b00:	462b      	mov	r3, r5
 8002b02:	430b      	orrs	r3, r1
 8002b04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b06:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002b0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b1c:	4413      	add	r3, r2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2200      	movs	r2, #0
 8002b24:	673b      	str	r3, [r7, #112]	; 0x70
 8002b26:	677a      	str	r2, [r7, #116]	; 0x74
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b34:	464c      	mov	r4, r9
 8002b36:	0223      	lsls	r3, r4, #8
 8002b38:	4644      	mov	r4, r8
 8002b3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b3e:	4644      	mov	r4, r8
 8002b40:	0222      	lsls	r2, r4, #8
 8002b42:	ea40 0402 	orr.w	r4, r0, r2
 8002b46:	66bc      	str	r4, [r7, #104]	; 0x68
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b4c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002b50:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b54:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b5c:	1c9a      	adds	r2, r3, #2
 8002b5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b62:	4413      	add	r3, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b6c:	667a      	str	r2, [r7, #100]	; 0x64
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b7a:	464c      	mov	r4, r9
 8002b7c:	0423      	lsls	r3, r4, #16
 8002b7e:	4644      	mov	r4, r8
 8002b80:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b84:	4644      	mov	r4, r8
 8002b86:	0422      	lsls	r2, r4, #16
 8002b88:	ea40 0402 	orr.w	r4, r0, r2
 8002b8c:	65bc      	str	r4, [r7, #88]	; 0x58
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b92:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002b96:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ba2:	1cda      	adds	r2, r3, #3
 8002ba4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ba8:	4413      	add	r3, r2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2200      	movs	r2, #0
 8002bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8002bb2:	657a      	str	r2, [r7, #84]	; 0x54
 8002bb4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002bb8:	4623      	mov	r3, r4
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bc4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002bc8:	4623      	mov	r3, r4
 8002bca:	4303      	orrs	r3, r0
 8002bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bce:	462b      	mov	r3, r5
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002bd8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002bdc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002be0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002be4:	1d1a      	adds	r2, r3, #4
 8002be6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bea:	4413      	add	r3, r2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002c00:	0023      	movs	r3, r4
 8002c02:	2200      	movs	r2, #0
 8002c04:	ea40 0402 	orr.w	r4, r0, r2
 8002c08:	633c      	str	r4, [r7, #48]	; 0x30
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002c12:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c1e:	1d5a      	adds	r2, r3, #5
 8002c20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c24:	4413      	add	r3, r2
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002c3a:	0223      	lsls	r3, r4, #8
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	ea40 0402 	orr.w	r4, r0, r2
 8002c42:	623c      	str	r4, [r7, #32]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002c4c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c50:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c58:	3306      	adds	r3, #6
 8002c5a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002c5e:	4413      	add	r3, r2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2200      	movs	r2, #0
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	61fa      	str	r2, [r7, #28]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	69bc      	ldr	r4, [r7, #24]
 8002c74:	0423      	lsls	r3, r4, #16
 8002c76:	2200      	movs	r2, #0
 8002c78:	ea40 0402 	orr.w	r4, r0, r2
 8002c7c:	613c      	str	r4, [r7, #16]
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002c86:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c92:	3307      	adds	r3, #7
 8002c94:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002c98:	4413      	add	r3, r2
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	68bc      	ldr	r4, [r7, #8]
 8002cae:	0623      	lsls	r3, r4, #24
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	ea40 0402 	orr.w	r4, r0, r2
 8002cb6:	603c      	str	r4, [r7, #0]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002cc0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002cc4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002cc8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002ccc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002cd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002cda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002cea:	4770      	bx	lr

08002cec <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	080087e4 	.word	0x080087e4

08002d08 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	080087fc 	.word	0x080087fc

08002d24 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fb2c 	bl	800138c <_ZN3ros3MsgC1Ev>
 8002d34:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	601a      	str	r2, [r3, #0]
      linear(),
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fada 	bl	80022f8 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3328      	adds	r3, #40	; 0x28
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fad5 	bl	80022f8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	08008948 	.word	0x08008948

08002d5c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f103 0008 	add.w	r0, r3, #8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7ff fae6 	bl	8002348 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7ff fad9 	bl	8002348 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    }
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f103 0008 	add.w	r0, r3, #8
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7ff fc33 	bl	800262e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7ff fc26 	bl	800262e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
     return offset;
 8002dea:	68fb      	ldr	r3, [r7, #12]
    }
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	08008820 	.word	0x08008820

08002e10 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	08008834 	.word	0x08008834

08002e2c <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
      data(0)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe faa8 	bl	800138c <_ZN3ros3MsgC1Ev>
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	809a      	strh	r2, [r3, #4]
    {
    }
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	08008930 	.word	0x08008930

08002e58 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e6c:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002e6e:	8939      	ldrh	r1, [r7, #8]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	b2ca      	uxtb	r2, r1
 8002e78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002e7a:	893b      	ldrh	r3, [r7, #8]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	b299      	uxth	r1, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3301      	adds	r3, #1
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	b2ca      	uxtb	r2, r1
 8002e8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3302      	adds	r3, #2
 8002e90:	60fb      	str	r3, [r7, #12]
      return offset;
 8002e92:	68fb      	ldr	r3, [r7, #12]
    }
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eb2:	893a      	ldrh	r2, [r7, #8]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6839      	ldr	r1, [r7, #0]
 8002eb8:	440b      	add	r3, r1
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	6839      	ldr	r1, [r7, #0]
 8002ece:	440b      	add	r3, r1
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002ede:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	60fb      	str	r3, [r7, #12]
     return offset;
 8002eec:	68fb      	ldr	r3, [r7, #12]
    }
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	08008858 	.word	0x08008858

08002f18 <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	08008868 	.word	0x08008868

08002f34 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE>:
float temp = 0.0;
double demand_speed_left;
double demand_speed_right;

void cmd_vel_cb( const geometry_msgs::Twist& twist)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
   demandx = twist.linear.x;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	f7fd fd3d 	bl	80009c4 <__aeabi_d2f>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8002f4e:	6013      	str	r3, [r2, #0]
   demandz = twist.angular.z;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fd33 	bl	80009c4 <__aeabi_d2f>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a03      	ldr	r2, [pc, #12]	; (8002f70 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8002f62:	6013      	str	r3, [r2, #0]
 }
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000028c 	.word	0x2000028c
 8002f70:	20000290 	.word	0x20000290

08002f74 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	08008990 	.word	0x08008990

08002f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ffe8 	bl	8002f74 <_ZN3ros15NodeHandleBase_C1Ev>
 8002fa4:	4a36      	ldr	r2, [pc, #216]	; (8003080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f876 	bl	80020a0 <_ZN13STM32HardwareC1Ev>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f005 fa36 	bl	8008452 <memset>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f005 fa2d 	bl	8008452 <memset>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002ffe:	2264      	movs	r2, #100	; 0x64
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f005 fa25 	bl	8008452 <memset>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800300e:	2264      	movs	r2, #100	; 0x64
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f005 fa1d 	bl	8008452 <memset>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fd00 	bl	8001a74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	0800891c 	.word	0x0800891c

08003084 <_Z10publishPosv>:
std_msgs::Int16 right_wheel_msg;
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );

void publishPos()
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  left_wheel_msg.data = pos_act_left;
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <_Z10publishPosv+0x2c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b21a      	sxth	r2, r3
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <_Z10publishPosv+0x30>)
 8003090:	809a      	strh	r2, [r3, #4]
  right_wheel_msg.data = pos_act_right;
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <_Z10publishPosv+0x34>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b21a      	sxth	r2, r3
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <_Z10publishPosv+0x38>)
 800309a:	809a      	strh	r2, [r3, #4]
  left_wheel_pub.publish(&left_wheel_msg);
 800309c:	4905      	ldr	r1, [pc, #20]	; (80030b4 <_Z10publishPosv+0x30>)
 800309e:	4808      	ldr	r0, [pc, #32]	; (80030c0 <_Z10publishPosv+0x3c>)
 80030a0:	f7fe ffcb 	bl	800203a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  right_wheel_pub.publish(&right_wheel_msg);
 80030a4:	4905      	ldr	r1, [pc, #20]	; (80030bc <_Z10publishPosv+0x38>)
 80030a6:	4807      	ldr	r0, [pc, #28]	; (80030c4 <_Z10publishPosv+0x40>)
 80030a8:	f7fe ffc7 	bl	800203a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000274 	.word	0x20000274
 80030b4:	20000be4 	.word	0x20000be4
 80030b8:	20000278 	.word	0x20000278
 80030bc:	20000c00 	.word	0x20000c00
 80030c0:	20000bec 	.word	0x20000bec
 80030c4:	20000c08 	.word	0x20000c08

080030c8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == LeftWheelEncoderChannelA_Pin)
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d165      	bne.n	80031a4 <HAL_GPIO_EXTI_Callback+0xdc>
	{
		if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelA_GPIO_Port, LeftWheelEncoderChannelA_Pin) == 1)
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	4867      	ldr	r0, [pc, #412]	; (8003278 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80030dc:	f002 fa06 	bl	80054ec <HAL_GPIO_ReadPin>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d026      	beq.n	800313e <HAL_GPIO_EXTI_Callback+0x76>
		{
			if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 1) leftenc++;
 80030f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f4:	4860      	ldr	r0, [pc, #384]	; (8003278 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80030f6:	f002 f9f9 	bl	80054ec <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_GPIO_EXTI_Callback+0x4e>
 800310a:	4b5c      	ldr	r3, [pc, #368]	; (800327c <HAL_GPIO_EXTI_Callback+0x1b4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3301      	adds	r3, #1
 8003110:	4a5a      	ldr	r2, [pc, #360]	; (800327c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e0a8      	b.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 0) leftenc--;
 8003116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800311a:	4857      	ldr	r0, [pc, #348]	; (8003278 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800311c:	f002 f9e6 	bl	80054ec <HAL_GPIO_ReadPin>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 809b 	beq.w	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
 8003132:	4b52      	ldr	r3, [pc, #328]	; (800327c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3b01      	subs	r3, #1
 8003138:	4a50      	ldr	r2, [pc, #320]	; (800327c <HAL_GPIO_EXTI_Callback+0x1b4>)
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e094      	b.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
		else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelA_GPIO_Port, LeftWheelEncoderChannelA_Pin) == 0)
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	484d      	ldr	r0, [pc, #308]	; (8003278 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8003142:	f002 f9d3 	bl	80054ec <HAL_GPIO_ReadPin>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8088 	beq.w	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
		{
			if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 0) leftenc++;
 8003158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315c:	4846      	ldr	r0, [pc, #280]	; (8003278 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800315e:	f002 f9c5 	bl	80054ec <HAL_GPIO_ReadPin>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_GPIO_EXTI_Callback+0xb6>
 8003172:	4b42      	ldr	r3, [pc, #264]	; (800327c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	4a40      	ldr	r2, [pc, #256]	; (800327c <HAL_GPIO_EXTI_Callback+0x1b4>)
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e074      	b.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(LeftWheelEncoderChannelB_GPIO_Port, LeftWheelEncoderChannelB_Pin) == 1) leftenc--;
 800317e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003182:	483d      	ldr	r0, [pc, #244]	; (8003278 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8003184:	f002 f9b2 	bl	80054ec <HAL_GPIO_ReadPin>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d067      	beq.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
 8003198:	4b38      	ldr	r3, [pc, #224]	; (800327c <HAL_GPIO_EXTI_Callback+0x1b4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	4a37      	ldr	r2, [pc, #220]	; (800327c <HAL_GPIO_EXTI_Callback+0x1b4>)
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e061      	b.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
	}
	else if(GPIO_PIN == RightWheelEncoderChannelA_Pin)
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d15e      	bne.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
	{
		if(HAL_GPIO_ReadPin(RightWheelEncoderChannelA_GPIO_Port, RightWheelEncoderChannelA_Pin) == 1)
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	4834      	ldr	r0, [pc, #208]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80031ae:	f002 f99d 	bl	80054ec <HAL_GPIO_ReadPin>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d023      	beq.n	800320a <HAL_GPIO_EXTI_Callback+0x142>
		{
			if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 0) rightenc++;
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	482e      	ldr	r0, [pc, #184]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80031c6:	f002 f991 	bl	80054ec <HAL_GPIO_ReadPin>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_GPIO_EXTI_Callback+0x11e>
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a28      	ldr	r2, [pc, #160]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e040      	b.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 1) rightenc--;
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	4825      	ldr	r0, [pc, #148]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80031ea:	f002 f97f 	bl	80054ec <HAL_GPIO_ReadPin>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d034      	beq.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
 80031fe:	4b21      	ldr	r3, [pc, #132]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3b01      	subs	r3, #1
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e02e      	b.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
		}
		else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelA_GPIO_Port, RightWheelEncoderChannelA_Pin) == 0)
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	481c      	ldr	r0, [pc, #112]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800320e:	f002 f96d 	bl	80054ec <HAL_GPIO_ReadPin>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d022      	beq.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
		{
			if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 1) rightenc++;
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	4816      	ldr	r0, [pc, #88]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8003226:	f002 f961 	bl	80054ec <HAL_GPIO_ReadPin>
 800322a:	4603      	mov	r3, r0
 800322c:	2b01      	cmp	r3, #1
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_GPIO_EXTI_Callback+0x17e>
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e010      	b.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
			else if(HAL_GPIO_ReadPin(RightWheelEncoderChannelB_GPIO_Port, RightWheelEncoderChannelB_Pin) == 0) rightenc--;
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	480d      	ldr	r0, [pc, #52]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800324a:	f002 f94f 	bl	80054ec <HAL_GPIO_ReadPin>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_GPIO_EXTI_Callback+0x1a0>
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3b01      	subs	r3, #1
 8003264:	4a07      	ldr	r2, [pc, #28]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003266:	6013      	str	r3, [r2, #0]
		}
	}
	flag = 1;
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
 800327c:	20000264 	.word	0x20000264
 8003280:	40020400 	.word	0x40020400
 8003284:	2000026c 	.word	0x2000026c
 8003288:	20000260 	.word	0x20000260
 800328c:	00000000 	.word	0x00000000

08003290 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

	rpm_right = (int)((rightenc - rightenco) * 0.6);
 8003298:	4b4b      	ldr	r3, [pc, #300]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd f8ea 	bl	800047c <__aeabi_i2d>
 80032a8:	a343      	add	r3, pc, #268	; (adr r3, 80033b8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f7fd f94f 	bl	8000550 <__aeabi_dmul>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	f7fd fb5b 	bl	8000974 <__aeabi_d2iz>
 80032be:	4603      	mov	r3, r0
 80032c0:	4a43      	ldr	r2, [pc, #268]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80032c2:	6013      	str	r3, [r2, #0]
	rpm_left = (int)((leftenc - leftenco) * 0.6);
 80032c4:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f8d4 	bl	800047c <__aeabi_i2d>
 80032d4:	a338      	add	r3, pc, #224	; (adr r3, 80033b8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f7fd f939 	bl	8000550 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd fb45 	bl	8000974 <__aeabi_d2iz>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80032ee:	6013      	str	r3, [r2, #0]
	rightvel = (int)((rpm_right * 6.28 * 7.5)/(60));
 80032f0:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f8c1 	bl	800047c <__aeabi_i2d>
 80032fa:	a331      	add	r3, pc, #196	; (adr r3, 80033c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fd f926 	bl	8000550 <__aeabi_dmul>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003312:	f7fd f91d 	bl	8000550 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003324:	f7fd fa3e 	bl	80007a4 <__aeabi_ddiv>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f7fd fb20 	bl	8000974 <__aeabi_d2iz>
 8003334:	4603      	mov	r3, r0
 8003336:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003338:	6013      	str	r3, [r2, #0]
	leftvel = (int)((rpm_left * 6.28 * 7.5)/(60));
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f89c 	bl	800047c <__aeabi_i2d>
 8003344:	a31e      	add	r3, pc, #120	; (adr r3, 80033c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f7fd f901 	bl	8000550 <__aeabi_dmul>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800335c:	f7fd f8f8 	bl	8000550 <__aeabi_dmul>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800336e:	f7fd fa19 	bl	80007a4 <__aeabi_ddiv>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f7fd fafb 	bl	8000974 <__aeabi_d2iz>
 800337e:	4603      	mov	r3, r0
 8003380:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003382:	6013      	str	r3, [r2, #0]
	rightenco = rightenc;
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800338a:	6013      	str	r3, [r2, #0]
	leftenco = leftenc;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003392:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GreenLED_GPIO_Port, GreenLED_Pin);
 8003394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003398:	4815      	ldr	r0, [pc, #84]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800339a:	f002 f8d8 	bl	800554e <HAL_GPIO_TogglePin>
	pos_act_left = leftenc;
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80033a4:	6013      	str	r3, [r2, #0]
	pos_act_right = rightenc;
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80033ac:	6013      	str	r3, [r2, #0]

}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	33333333 	.word	0x33333333
 80033bc:	3fe33333 	.word	0x3fe33333
 80033c0:	51eb851f 	.word	0x51eb851f
 80033c4:	40191eb8 	.word	0x40191eb8
 80033c8:	2000026c 	.word	0x2000026c
 80033cc:	20000270 	.word	0x20000270
 80033d0:	20000284 	.word	0x20000284
 80033d4:	20000264 	.word	0x20000264
 80033d8:	20000268 	.word	0x20000268
 80033dc:	20000288 	.word	0x20000288
 80033e0:	401e0000 	.word	0x401e0000
 80033e4:	404e0000 	.word	0x404e0000
 80033e8:	2000027c 	.word	0x2000027c
 80033ec:	20000280 	.word	0x20000280
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	20000274 	.word	0x20000274
 80033f8:	20000278 	.word	0x20000278

080033fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8003404:	4805      	ldr	r0, [pc, #20]	; (800341c <HAL_UART_TxCpltCallback+0x20>)
 8003406:	f000 f96f 	bl	80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800340a:	4603      	mov	r3, r0
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fead 	bl	800216c <_ZN13STM32Hardware5flushEv>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200002a8 	.word	0x200002a8

08003420 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8003428:	4805      	ldr	r0, [pc, #20]	; (8003440 <HAL_UART_RxCpltCallback+0x20>)
 800342a:	f000 f95d 	bl	80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800342e:	4603      	mov	r3, r0
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fe5c 	bl	80020ee <_ZN13STM32Hardware10reset_rbufEv>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200002a8 	.word	0x200002a8

08003444 <setup>:

void setup()
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
	nh.initNode();
 8003448:	4808      	ldr	r0, [pc, #32]	; (800346c <setup+0x28>)
 800344a:	f000 f959 	bl	8003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_wheel_pub);
 800344e:	4908      	ldr	r1, [pc, #32]	; (8003470 <setup+0x2c>)
 8003450:	4806      	ldr	r0, [pc, #24]	; (800346c <setup+0x28>)
 8003452:	f000 f972 	bl	800373a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_wheel_pub);
 8003456:	4907      	ldr	r1, [pc, #28]	; (8003474 <setup+0x30>)
 8003458:	4804      	ldr	r0, [pc, #16]	; (800346c <setup+0x28>)
 800345a:	f000 f96e 	bl	800373a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub);
 800345e:	4906      	ldr	r1, [pc, #24]	; (8003478 <setup+0x34>)
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <setup+0x28>)
 8003462:	f000 f99a 	bl	800379a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200002a8 	.word	0x200002a8
 8003470:	20000bec 	.word	0x20000bec
 8003474:	20000c08 	.word	0x20000c08
 8003478:	20000c20 	.word	0x20000c20

0800347c <loop>:

void loop()
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	publishPos();
 8003480:	f7ff fe00 	bl	8003084 <_Z10publishPosv>
	nh.spinOnce();
 8003484:	4853      	ldr	r0, [pc, #332]	; (80035d4 <loop+0x158>)
 8003486:	f000 f9b3 	bl	80037f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

	demand_speed_left = demandx - (demandz * temp);
 800348a:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <loop+0x15c>)
 800348c:	ed93 7a00 	vldr	s14, [r3]
 8003490:	4b52      	ldr	r3, [pc, #328]	; (80035dc <loop+0x160>)
 8003492:	edd3 6a00 	vldr	s13, [r3]
 8003496:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <loop+0x164>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a4:	ee17 0a90 	vmov	r0, s15
 80034a8:	f7fc fffa 	bl	80004a0 <__aeabi_f2d>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	494c      	ldr	r1, [pc, #304]	; (80035e4 <loop+0x168>)
 80034b2:	e9c1 2300 	strd	r2, r3, [r1]
	demand_speed_right = demandx + (demandz * temp);
 80034b6:	4b49      	ldr	r3, [pc, #292]	; (80035dc <loop+0x160>)
 80034b8:	ed93 7a00 	vldr	s14, [r3]
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <loop+0x164>)
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <loop+0x15c>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d0:	ee17 0a90 	vmov	r0, s15
 80034d4:	f7fc ffe4 	bl	80004a0 <__aeabi_f2d>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4942      	ldr	r1, [pc, #264]	; (80035e8 <loop+0x16c>)
 80034de:	e9c1 2300 	strd	r2, r3, [r1]


	if(demandx > 0)
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <loop+0x15c>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	dd1e      	ble.n	8003530 <loop+0xb4>
	{
		HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_SET);
 80034f2:	2201      	movs	r2, #1
 80034f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034f8:	483c      	ldr	r0, [pc, #240]	; (80035ec <loop+0x170>)
 80034fa:	f002 f80f 	bl	800551c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_RESET);
 80034fe:	2200      	movs	r2, #0
 8003500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003504:	4839      	ldr	r0, [pc, #228]	; (80035ec <loop+0x170>)
 8003506:	f002 f809 	bl	800551c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_RESET);
 800350a:	2200      	movs	r2, #0
 800350c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003510:	4836      	ldr	r0, [pc, #216]	; (80035ec <loop+0x170>)
 8003512:	f002 f803 	bl	800551c <HAL_GPIO_WritePin>
		TIM3->CCR1 = 100;
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <loop+0x174>)
 8003518:	2264      	movs	r2, #100	; 0x64
 800351a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 800351c:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <loop+0x174>)
 800351e:	2200      	movs	r2, #0
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 100;
 8003522:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <loop+0x174>)
 8003524:	2264      	movs	r2, #100	; 0x64
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 8003528:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <loop+0x174>)
 800352a:	2200      	movs	r2, #0
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
 800352e:	e04c      	b.n	80035ca <loop+0x14e>
	}

	else if(demandx == 0)
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <loop+0x15c>)
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	eef5 7a40 	vcmp.f32	s15, #0.0
 800353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353e:	d11e      	bne.n	800357e <loop+0x102>
	{
		HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_RESET);
 8003540:	2200      	movs	r2, #0
 8003542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003546:	4829      	ldr	r0, [pc, #164]	; (80035ec <loop+0x170>)
 8003548:	f001 ffe8 	bl	800551c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_SET);
 800354c:	2201      	movs	r2, #1
 800354e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003552:	4826      	ldr	r0, [pc, #152]	; (80035ec <loop+0x170>)
 8003554:	f001 ffe2 	bl	800551c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_RESET);
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800355e:	4823      	ldr	r0, [pc, #140]	; (80035ec <loop+0x170>)
 8003560:	f001 ffdc 	bl	800551c <HAL_GPIO_WritePin>
		TIM3->CCR1 = 0;
 8003564:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <loop+0x174>)
 8003566:	2200      	movs	r2, #0
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <loop+0x174>)
 800356c:	2200      	movs	r2, #0
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <loop+0x174>)
 8003572:	2200      	movs	r2, #0
 8003574:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <loop+0x174>)
 8003578:	2200      	movs	r2, #0
 800357a:	641a      	str	r2, [r3, #64]	; 0x40
 800357c:	e025      	b.n	80035ca <loop+0x14e>
	}

	else if(demandx < 0)
 800357e:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <loop+0x15c>)
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	d51d      	bpl.n	80035ca <loop+0x14e>
	{
		HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_RESET);
 800358e:	2200      	movs	r2, #0
 8003590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003594:	4815      	ldr	r0, [pc, #84]	; (80035ec <loop+0x170>)
 8003596:	f001 ffc1 	bl	800551c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_RESET);
 800359a:	2200      	movs	r2, #0
 800359c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035a0:	4812      	ldr	r0, [pc, #72]	; (80035ec <loop+0x170>)
 80035a2:	f001 ffbb 	bl	800551c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_SET);
 80035a6:	2201      	movs	r2, #1
 80035a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035ac:	480f      	ldr	r0, [pc, #60]	; (80035ec <loop+0x170>)
 80035ae:	f001 ffb5 	bl	800551c <HAL_GPIO_WritePin>
		TIM3->CCR1 = 0;
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <loop+0x174>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR2 = 100;
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <loop+0x174>)
 80035ba:	2264      	movs	r2, #100	; 0x64
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <loop+0x174>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 100;
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <loop+0x174>)
 80035c6:	2264      	movs	r2, #100	; 0x64
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
	}
	HAL_Delay(150);
 80035ca:	2096      	movs	r0, #150	; 0x96
 80035cc:	f001 f8ba 	bl	8004744 <HAL_Delay>
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200002a8 	.word	0x200002a8
 80035d8:	2000028c 	.word	0x2000028c
 80035dc:	20000290 	.word	0x20000290
 80035e0:	20000294 	.word	0x20000294
 80035e4:	20000298 	.word	0x20000298
 80035e8:	200002a0 	.word	0x200002a0
 80035ec:	40020c00 	.word	0x40020c00
 80035f0:	40000400 	.word	0x40000400

080035f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e00c      	b.n	800361e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	fa22 f103 	lsr.w	r1, r2, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	b2ca      	uxtb	r2, r1
 8003616:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d9ef      	bls.n	8003604 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003632:	b480      	push	{r7}
 8003634:	b085      	sub	sp, #20
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	e010      	b.n	800366a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	440a      	add	r2, r1
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	4611      	mov	r1, r2
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	00d2      	lsls	r2, r2, #3
 800365a:	fa01 f202 	lsl.w	r2, r1, r2
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d9eb      	bls.n	8003648 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	08008978 	.word	0x08008978

080036a0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ffe5 	bl	8003680 <_ZN3ros11Subscriber_C1Ev>
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3310      	adds	r3, #16
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fb2f 	bl	8002d24 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	609a      	str	r2, [r3, #8]
  };
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	08008904 	.word	0x08008904

080036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
  }
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fce3 	bl	80020d8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e01d      	b.n	8003786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	60da      	str	r2, [r3, #12]
        return true;
 800377c:	2301      	movs	r3, #1
 800377e:	e006      	b.n	800378e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b18      	cmp	r3, #24
 800378a:	ddde      	ble.n	800374a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800378c:	2300      	movs	r3, #0
  }
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e018      	b.n	80037dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037c2:	6839      	ldr	r1, [r7, #0]
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	605a      	str	r2, [r3, #4]
        return true;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e006      	b.n	80037e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3301      	adds	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b18      	cmp	r3, #24
 80037e0:	dde3      	ble.n	80037aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80037e2:	2300      	movs	r3, #0
  }
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe fd6f 	bl	80022e0 <_ZN13STM32Hardware4timeEv>
 8003802:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003812:	4293      	cmp	r3, r2
 8003814:	d903      	bls.n	800381e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003824:	2b00      	cmp	r3, #0
 8003826:	d009      	beq.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d903      	bls.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003842:	2b00      	cmp	r3, #0
 8003844:	d014      	beq.n	8003870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fd48 	bl	80022e0 <_ZN13STM32Hardware4timeEv>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800385c:	429a      	cmp	r2, r3
 800385e:	bf8c      	ite	hi
 8003860:	2301      	movhi	r3, #1
 8003862:	2300      	movls	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800386a:	f06f 0301 	mvn.w	r3, #1
 800386e:	e194      	b.n	8003b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fc4b 	bl	8002110 <_ZN13STM32Hardware4readEv>
 800387a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f2c0 8174 	blt.w	8003b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800389a:	2b07      	cmp	r3, #7
 800389c:	d11e      	bne.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80038a4:	1c59      	adds	r1, r3, #1
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	b2d1      	uxtb	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	460a      	mov	r2, r1
 80038b6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80038c0:	1e5a      	subs	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1b4      	bne.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2208      	movs	r2, #8
 80038d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80038da:	e7af      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d128      	bne.n	8003938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2bff      	cmp	r3, #255	; 0xff
 80038ea:	d10d      	bne.n	8003908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f103 0214 	add.w	r2, r3, #20
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003906:	e799      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fce7 	bl	80022e0 <_ZN13STM32Hardware4timeEv>
 8003912:	4602      	mov	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	bf8c      	ite	hi
 8003920:	2301      	movhi	r3, #1
 8003922:	2300      	movls	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d088      	beq.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003932:	f06f 0301 	mvn.w	r3, #1
 8003936:	e130      	b.n	8003b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800393e:	2b01      	cmp	r3, #1
 8003940:	d118      	bne.n	8003974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2bfe      	cmp	r3, #254	; 0xfe
 8003946:	d107      	bne.n	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003956:	e771      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003966:	2b00      	cmp	r3, #0
 8003968:	f47f af68 	bne.w	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f918 	bl	8003ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003972:	e763      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800397a:	2b02      	cmp	r3, #2
 800397c:	d113      	bne.n	80039a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80039a4:	e74a      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d110      	bne.n	80039d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	441a      	add	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80039d0:	e734      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d116      	bne.n	8003a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80039e2:	425a      	negs	r2, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	bf58      	it	pl
 80039ea:	4253      	negpl	r3, r2
 80039ec:	2bff      	cmp	r3, #255	; 0xff
 80039ee:	d107      	bne.n	8003a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80039fe:	e71d      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a08:	e718      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d10f      	bne.n	8003a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003a32:	e703      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d117      	bne.n	8003a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2207      	movs	r2, #7
 8003a54:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f47f aeec 	bne.w	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2208      	movs	r2, #8
 8003a68:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a6c:	e6e6      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	f47f aee1 	bne.w	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003a88:	425a      	negs	r2, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	bf58      	it	pl
 8003a90:	4253      	negpl	r3, r2
 8003a92:	2bff      	cmp	r3, #255	; 0xff
 8003a94:	f47f aed2 	bne.w	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d110      	bne.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f87d 	bl	8003ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f898 	bl	8003bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	e06a      	b.n	8003b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003aca:	2b0a      	cmp	r3, #10
 8003acc:	d107      	bne.n	8003ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f960 	bl	8003d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003adc:	e6ae      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	d10e      	bne.n	8003b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe f8fb 	bl	8001cf2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003b04:	e69a      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b0c:	2b0b      	cmp	r3, #11
 8003b0e:	d104      	bne.n	8003b1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003b18:	e690      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b20:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f43f ae84 	beq.w	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b3a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b4e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003b66:	4611      	mov	r1, r2
 8003b68:	4798      	blx	r3
    while (true)
 8003b6a:	e667      	b.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003b6c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00f      	beq.n	8003b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d906      	bls.n	8003b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f809 	bl	8003ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003b98:	2300      	movs	r3, #0
  }
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003baa:	f107 030c 	add.w	r3, r7, #12
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd fbfc 	bl	80013ac <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f107 020c 	add.w	r2, r7, #12
 8003bbe:	210a      	movs	r1, #10
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
    rt_time = hardware_.time();
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fb89 	bl	80022e0 <_ZN13STM32Hardware4timeEv>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003bde:	b590      	push	{r4, r7, lr}
 8003be0:	b08b      	sub	sp, #44	; 0x2c
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003be6:	f107 030c 	add.w	r3, r7, #12
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd fcce 	bl	800158c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	e062      	b.n	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d056      	beq.n	8003cb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3308      	adds	r3, #8
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4798      	blx	r3
 8003c58:	4603      	mov	r3, r0
 8003c5a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4608      	mov	r0, r1
 8003c84:	4798      	blx	r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c8e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681c      	ldr	r4, [r3, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe f9dc 	bl	8002062 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003caa:	4601      	mov	r1, r0
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	3301      	adds	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2b18      	cmp	r3, #24
 8003cc0:	dd99      	ble.n	8003bf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	e05e      	b.n	8003d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d053      	beq.n	8003d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cdc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4798      	blx	r3
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d30:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4608      	mov	r0, r1
 8003d40:	4798      	blx	r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d4a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681c      	ldr	r4, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d56:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4798      	blx	r3
 8003d74:	4601      	mov	r1, r0
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	3301      	adds	r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	2b18      	cmp	r3, #24
 8003d8a:	dd9d      	ble.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003d94:	bf00      	nop
 8003d96:	372c      	adds	r7, #44	; 0x2c
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd90      	pop	{r4, r7, pc}

08003d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd fafe 	bl	80013ac <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fa93 	bl	80022e0 <_ZN13STM32Hardware4timeEv>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd fb5d 	bl	800148c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4915      	ldr	r1, [pc, #84]	; (8003e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003dd8:	fba1 1303 	umull	r1, r3, r1, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003de2:	6939      	ldr	r1, [r7, #16]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003de8:	fba3 0302 	umull	r0, r3, r3, r2
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003df2:	fb00 f303 	mul.w	r3, r0, r3
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	440b      	add	r3, r1
 8003e00:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003e02:	f107 0308 	add.w	r3, r7, #8
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8a6 	bl	8003f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fa63 	bl	80022e0 <_ZN13STM32Hardware4timeEv>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003e22:	bf00      	nop
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	10624dd3 	.word	0x10624dd3
 8003e30:	000f4240 	.word	0x000f4240

08003e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b63      	cmp	r3, #99	; 0x63
 8003e44:	dd09      	ble.n	8003e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003e4c:	f083 0301 	eor.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e079      	b.n	8003f4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003e66:	3207      	adds	r2, #7
 8003e68:	4611      	mov	r1, r2
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	22ff      	movs	r2, #255	; 0xff
 8003e74:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	22fe      	movs	r2, #254	; 0xfe
 8003e7c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003ea6:	4413      	add	r3, r2
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	121b      	asrs	r3, r3, #8
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e00c      	b.n	8003ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4413      	add	r3, r2
 8003ede:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3306      	adds	r3, #6
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	dded      	ble.n	8003ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3307      	adds	r3, #7
 8003f00:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	425a      	negs	r2, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	bf58      	it	pl
 8003f0c:	4253      	negpl	r3, r2
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1c59      	adds	r1, r3, #1
 8003f14:	6179      	str	r1, [r7, #20]
 8003f16:	43d2      	mvns	r2, r2
 8003f18:	b2d1      	uxtb	r1, r2
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	460a      	mov	r2, r1
 8003f20:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2a:	dc0a      	bgt.n	8003f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1d18      	adds	r0, r3, #4
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f7fe f98b 	bl	8002254 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	e005      	b.n	8003f4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003f42:	4905      	ldr	r1, [pc, #20]	; (8003f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f849 	bl	8003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	0800888c 	.word	0x0800888c

08003f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe f9b8 	bl	80022e0 <_ZN13STM32Hardware4timeEv>
 8003f70:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4915      	ldr	r1, [pc, #84]	; (8003fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003f7a:	fba1 1303 	umull	r1, r3, r1, r3
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	1e5a      	subs	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003f92:	fba3 0302 	umull	r0, r3, r3, r2
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f9c:	fb00 f303 	mul.w	r3, r0, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	1aca      	subs	r2, r1, r3
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 faf6 	bl	80045b4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	10624dd3 	.word	0x10624dd3
 8003fd4:	000f4240 	.word	0x000f4240
 8003fd8:	3b9aca00 	.word	0x3b9aca00

08003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	2103      	movs	r1, #3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f804 	bl	8003ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	460b      	mov	r3, r1
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004006:	f107 0314 	add.w	r3, r7, #20
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd fc82 	bl	8001914 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004010:	7afb      	ldrb	r3, [r7, #11]
 8004012:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f107 0214 	add.w	r2, r7, #20
 8004022:	2107      	movs	r1, #7
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	4798      	blx	r3
  }
 8004028:	bf00      	nop
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <_Z41__static_initialization_and_destruction_0ii>:
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11f      	bne.n	8004080 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004046:	4293      	cmp	r3, r2
 8004048:	d11a      	bne.n	8004080 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 800404a:	480f      	ldr	r0, [pc, #60]	; (8004088 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800404c:	f7fe ffa2 	bl	8002f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 left_wheel_msg;
 8004050:	480e      	ldr	r0, [pc, #56]	; (800408c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004052:	f7fe feeb 	bl	8002e2c <_ZN8std_msgs5Int16C1Ev>
ros::Publisher left_wheel_pub("lwheel", &left_wheel_msg);
 8004056:	2300      	movs	r3, #0
 8004058:	4a0c      	ldr	r2, [pc, #48]	; (800408c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800405a:	490d      	ldr	r1, [pc, #52]	; (8004090 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800405c:	480d      	ldr	r0, [pc, #52]	; (8004094 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800405e:	f7fd ffd5 	bl	800200c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int16 right_wheel_msg;
 8004062:	480d      	ldr	r0, [pc, #52]	; (8004098 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004064:	f7fe fee2 	bl	8002e2c <_ZN8std_msgs5Int16C1Ev>
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);
 8004068:	2300      	movs	r3, #0
 800406a:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800406c:	490b      	ldr	r1, [pc, #44]	; (800409c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800406e:	480c      	ldr	r0, [pc, #48]	; (80040a0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004070:	f7fd ffcc 	bl	800200c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );
 8004074:	2301      	movs	r3, #1
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004078:	490b      	ldr	r1, [pc, #44]	; (80040a8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800407a:	480c      	ldr	r0, [pc, #48]	; (80040ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800407c:	f7ff fb10 	bl	80036a0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	200002a8 	.word	0x200002a8
 800408c:	20000be4 	.word	0x20000be4
 8004090:	080088c8 	.word	0x080088c8
 8004094:	20000bec 	.word	0x20000bec
 8004098:	20000c00 	.word	0x20000c00
 800409c:	080088d0 	.word	0x080088d0
 80040a0:	20000c08 	.word	0x20000c08
 80040a4:	08002f35 	.word	0x08002f35
 80040a8:	080088d8 	.word	0x080088d8
 80040ac:	20000c20 	.word	0x20000c20

080040b0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3310      	adds	r3, #16
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe fe71 	bl	8002da8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	3210      	adds	r2, #16
 80040ce:	4610      	mov	r0, r2
 80040d0:	4798      	blx	r3
  }
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3310      	adds	r3, #16
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fe78 	bl	8002df4 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004104:	4603      	mov	r3, r0
  }
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3310      	adds	r3, #16
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fe78 	bl	8002e10 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004120:	4603      	mov	r3, r0
  }
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
    return configured_;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <_GLOBAL__sub_I_flag>:
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
 8004148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800414c:	2001      	movs	r0, #1
 800414e:	f7ff ff6f 	bl	8004030 <_Z41__static_initialization_and_destruction_0ii>
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_MspInit+0x4c>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <HAL_MspInit+0x4c>)
 8004164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004168:	6453      	str	r3, [r2, #68]	; 0x44
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <HAL_MspInit+0x4c>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_MspInit+0x4c>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	4a08      	ldr	r2, [pc, #32]	; (80041a0 <HAL_MspInit+0x4c>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	6413      	str	r3, [r2, #64]	; 0x40
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_MspInit+0x4c>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004192:	2007      	movs	r0, #7
 8004194:	f000 fbca 	bl	800492c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800

080041a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d116      	bne.n	80041e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	6413      	str	r3, [r2, #64]	; 0x40
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041d2:	2200      	movs	r2, #0
 80041d4:	2100      	movs	r1, #0
 80041d6:	201c      	movs	r0, #28
 80041d8:	f000 fbb3 	bl	8004942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041dc:	201c      	movs	r0, #28
 80041de:	f000 fbcc 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80041e2:	e026      	b.n	8004232 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a15      	ldr	r2, [pc, #84]	; (8004240 <HAL_TIM_Base_MspInit+0x9c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a11      	ldr	r2, [pc, #68]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
}
 800420a:	e012      	b.n	8004232 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0c      	ldr	r2, [pc, #48]	; (8004244 <HAL_TIM_Base_MspInit+0xa0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d10d      	bne.n	8004232 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4a07      	ldr	r2, [pc, #28]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	6413      	str	r3, [r2, #64]	; 0x40
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_TIM_Base_MspInit+0x98>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	bf00      	nop
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	40000400 	.word	0x40000400
 8004244:	40000c00 	.word	0x40000c00

08004248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a21      	ldr	r2, [pc, #132]	; (80042ec <HAL_TIM_MspPostInit+0xa4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d13b      	bne.n	80042e2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <HAL_TIM_MspPostInit+0xa8>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	4a1f      	ldr	r2, [pc, #124]	; (80042f0 <HAL_TIM_MspPostInit+0xa8>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6313      	str	r3, [r2, #48]	; 0x30
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <HAL_TIM_MspPostInit+0xa8>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_TIM_MspPostInit+0xa8>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_TIM_MspPostInit+0xa8>)
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	6313      	str	r3, [r2, #48]	; 0x30
 8004296:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <HAL_TIM_MspPostInit+0xa8>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042a2:	23c0      	movs	r3, #192	; 0xc0
 80042a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a6:	2302      	movs	r3, #2
 80042a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ae:	2300      	movs	r3, #0
 80042b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042b2:	2302      	movs	r3, #2
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b6:	f107 0314 	add.w	r3, r7, #20
 80042ba:	4619      	mov	r1, r3
 80042bc:	480d      	ldr	r0, [pc, #52]	; (80042f4 <HAL_TIM_MspPostInit+0xac>)
 80042be:	f000 ff79 	bl	80051b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042c2:	2303      	movs	r3, #3
 80042c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2302      	movs	r3, #2
 80042c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042d2:	2302      	movs	r3, #2
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	4619      	mov	r1, r3
 80042dc:	4806      	ldr	r0, [pc, #24]	; (80042f8 <HAL_TIM_MspPostInit+0xb0>)
 80042de:	f000 ff69 	bl	80051b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80042e2:	bf00      	nop
 80042e4:	3728      	adds	r7, #40	; 0x28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40020000 	.word	0x40020000
 80042f8:	40020400 	.word	0x40020400

080042fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a4d      	ldr	r2, [pc, #308]	; (8004450 <HAL_UART_MspInit+0x154>)
 800431a:	4293      	cmp	r3, r2
 800431c:	f040 8093 	bne.w	8004446 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_UART_MspInit+0x158>)
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <HAL_UART_MspInit+0x158>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	6413      	str	r3, [r2, #64]	; 0x40
 8004330:	4b48      	ldr	r3, [pc, #288]	; (8004454 <HAL_UART_MspInit+0x158>)
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	4b44      	ldr	r3, [pc, #272]	; (8004454 <HAL_UART_MspInit+0x158>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	4a43      	ldr	r2, [pc, #268]	; (8004454 <HAL_UART_MspInit+0x158>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6313      	str	r3, [r2, #48]	; 0x30
 800434c:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_UART_MspInit+0x158>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004358:	230c      	movs	r3, #12
 800435a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004364:	2303      	movs	r3, #3
 8004366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004368:	2307      	movs	r3, #7
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4619      	mov	r1, r3
 8004372:	4839      	ldr	r0, [pc, #228]	; (8004458 <HAL_UART_MspInit+0x15c>)
 8004374:	f000 ff1e 	bl	80051b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004378:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_UART_MspInit+0x160>)
 800437a:	4a39      	ldr	r2, [pc, #228]	; (8004460 <HAL_UART_MspInit+0x164>)
 800437c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <HAL_UART_MspInit+0x160>)
 8004380:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004384:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004386:	4b35      	ldr	r3, [pc, #212]	; (800445c <HAL_UART_MspInit+0x160>)
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800438c:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_UART_MspInit+0x160>)
 800438e:	2200      	movs	r2, #0
 8004390:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_UART_MspInit+0x160>)
 8004394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004398:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800439a:	4b30      	ldr	r3, [pc, #192]	; (800445c <HAL_UART_MspInit+0x160>)
 800439c:	2200      	movs	r2, #0
 800439e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043a0:	4b2e      	ldr	r3, [pc, #184]	; (800445c <HAL_UART_MspInit+0x160>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80043a6:	4b2d      	ldr	r3, [pc, #180]	; (800445c <HAL_UART_MspInit+0x160>)
 80043a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80043ae:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_UART_MspInit+0x160>)
 80043b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_UART_MspInit+0x160>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043bc:	4827      	ldr	r0, [pc, #156]	; (800445c <HAL_UART_MspInit+0x160>)
 80043be:	f000 faf7 	bl	80049b0 <HAL_DMA_Init>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80043c8:	f7fc ffca 	bl	8001360 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a23      	ldr	r2, [pc, #140]	; (800445c <HAL_UART_MspInit+0x160>)
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
 80043d2:	4a22      	ldr	r2, [pc, #136]	; (800445c <HAL_UART_MspInit+0x160>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <HAL_UART_MspInit+0x168>)
 80043da:	4a23      	ldr	r2, [pc, #140]	; (8004468 <HAL_UART_MspInit+0x16c>)
 80043dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80043de:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_UART_MspInit+0x168>)
 80043e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043e6:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <HAL_UART_MspInit+0x168>)
 80043e8:	2240      	movs	r2, #64	; 0x40
 80043ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_UART_MspInit+0x168>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043f2:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_UART_MspInit+0x168>)
 80043f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_UART_MspInit+0x168>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004400:	4b18      	ldr	r3, [pc, #96]	; (8004464 <HAL_UART_MspInit+0x168>)
 8004402:	2200      	movs	r2, #0
 8004404:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004406:	4b17      	ldr	r3, [pc, #92]	; (8004464 <HAL_UART_MspInit+0x168>)
 8004408:	2200      	movs	r2, #0
 800440a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800440c:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_UART_MspInit+0x168>)
 800440e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004412:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004414:	4b13      	ldr	r3, [pc, #76]	; (8004464 <HAL_UART_MspInit+0x168>)
 8004416:	2200      	movs	r2, #0
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800441a:	4812      	ldr	r0, [pc, #72]	; (8004464 <HAL_UART_MspInit+0x168>)
 800441c:	f000 fac8 	bl	80049b0 <HAL_DMA_Init>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004426:	f7fc ff9b 	bl	8001360 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <HAL_UART_MspInit+0x168>)
 800442e:	635a      	str	r2, [r3, #52]	; 0x34
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <HAL_UART_MspInit+0x168>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004436:	2200      	movs	r2, #0
 8004438:	2100      	movs	r1, #0
 800443a:	2026      	movs	r0, #38	; 0x26
 800443c:	f000 fa81 	bl	8004942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004440:	2026      	movs	r0, #38	; 0x26
 8004442:	f000 fa9a 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004446:	bf00      	nop
 8004448:	3728      	adds	r7, #40	; 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40004400 	.word	0x40004400
 8004454:	40023800 	.word	0x40023800
 8004458:	40020000 	.word	0x40020000
 800445c:	20000198 	.word	0x20000198
 8004460:	40026088 	.word	0x40026088
 8004464:	200001f8 	.word	0x200001f8
 8004468:	400260a0 	.word	0x400260a0

0800446c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004470:	e7fe      	b.n	8004470 <NMI_Handler+0x4>

08004472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004472:	b480      	push	{r7}
 8004474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004476:	e7fe      	b.n	8004476 <HardFault_Handler+0x4>

08004478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800447c:	e7fe      	b.n	800447c <MemManage_Handler+0x4>

0800447e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800447e:	b480      	push	{r7}
 8004480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004482:	e7fe      	b.n	8004482 <BusFault_Handler+0x4>

08004484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004488:	e7fe      	b.n	8004488 <UsageFault_Handler+0x4>

0800448a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044b8:	f000 f924 	bl	8004704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044bc:	bf00      	nop
 80044be:	bd80      	pop	{r7, pc}

080044c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80044c4:	4802      	ldr	r0, [pc, #8]	; (80044d0 <DMA1_Stream5_IRQHandler+0x10>)
 80044c6:	f000 fc0b 	bl	8004ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000198 	.word	0x20000198

080044d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80044d8:	4802      	ldr	r0, [pc, #8]	; (80044e4 <DMA1_Stream6_IRQHandler+0x10>)
 80044da:	f000 fc01 	bl	8004ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200001f8 	.word	0x200001f8

080044e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RightWheelEncoderChannelA_Pin);
 80044ec:	2040      	movs	r0, #64	; 0x40
 80044ee:	f001 f849 	bl	8005584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LeftWheelEncoderChannelA_Pin);
 80044f2:	2080      	movs	r0, #128	; 0x80
 80044f4:	f001 f846 	bl	8005584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}

080044fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004500:	4802      	ldr	r0, [pc, #8]	; (800450c <TIM2_IRQHandler+0x10>)
 8004502:	f001 ff39 	bl	8006378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	2000007c 	.word	0x2000007c

08004510 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004514:	4802      	ldr	r0, [pc, #8]	; (8004520 <USART2_IRQHandler+0x10>)
 8004516:	f002 fe85 	bl	8007224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800451a:	bf00      	nop
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000154 	.word	0x20000154

08004524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800452c:	4a14      	ldr	r2, [pc, #80]	; (8004580 <_sbrk+0x5c>)
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <_sbrk+0x60>)
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004538:	4b13      	ldr	r3, [pc, #76]	; (8004588 <_sbrk+0x64>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <_sbrk+0x64>)
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <_sbrk+0x68>)
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <_sbrk+0x64>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d207      	bcs.n	8004564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004554:	f003 ff86 	bl	8008464 <__errno>
 8004558:	4603      	mov	r3, r0
 800455a:	220c      	movs	r2, #12
 800455c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	e009      	b.n	8004578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <_sbrk+0x64>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <_sbrk+0x64>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <_sbrk+0x64>)
 8004574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20020000 	.word	0x20020000
 8004584:	00000400 	.word	0x00000400
 8004588:	20000c80 	.word	0x20000c80
 800458c:	20000dd0 	.word	0x20000dd0

08004590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <SystemInit+0x20>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <SystemInit+0x20>)
 800459c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0a5a      	lsrs	r2, r3, #9
 80045c4:	490f      	ldr	r1, [pc, #60]	; (8004604 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80045c6:	fba1 1202 	umull	r1, r2, r1, r2
 80045ca:	09d2      	lsrs	r2, r2, #7
 80045cc:	490e      	ldr	r1, [pc, #56]	; (8004608 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80045ce:	fb01 f202 	mul.w	r2, r1, r2
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	4a09      	ldr	r2, [pc, #36]	; (8004604 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	09db      	lsrs	r3, r3, #7
 80045e4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	601a      	str	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	00044b83 	.word	0x00044b83
 8004608:	3b9aca00 	.word	0x3b9aca00

0800460c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800460c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004610:	480d      	ldr	r0, [pc, #52]	; (8004648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004612:	490e      	ldr	r1, [pc, #56]	; (800464c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004614:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004618:	e002      	b.n	8004620 <LoopCopyDataInit>

0800461a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800461a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800461c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800461e:	3304      	adds	r3, #4

08004620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004624:	d3f9      	bcc.n	800461a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004626:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004628:	4c0b      	ldr	r4, [pc, #44]	; (8004658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800462a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800462c:	e001      	b.n	8004632 <LoopFillZerobss>

0800462e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800462e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004630:	3204      	adds	r2, #4

08004632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004634:	d3fb      	bcc.n	800462e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004636:	f7ff ffab 	bl	8004590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800463a:	f003 ff19 	bl	8008470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800463e:	f7fc fb8f 	bl	8000d60 <main>
  bx  lr    
 8004642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800464c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004650:	08008a48 	.word	0x08008a48
  ldr r2, =_sbss
 8004654:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004658:	20000dd0 	.word	0x20000dd0

0800465c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800465c:	e7fe      	b.n	800465c <ADC_IRQHandler>
	...

08004660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <HAL_Init+0x40>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <HAL_Init+0x40>)
 800466a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800466e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_Init+0x40>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <HAL_Init+0x40>)
 8004676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800467a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <HAL_Init+0x40>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_Init+0x40>)
 8004682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004688:	2003      	movs	r0, #3
 800468a:	f000 f94f 	bl	800492c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800468e:	2000      	movs	r0, #0
 8004690:	f000 f808 	bl	80046a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004694:	f7ff fd5e 	bl	8004154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023c00 	.word	0x40023c00

080046a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046ac:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <HAL_InitTick+0x54>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_InitTick+0x58>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f967 	bl	8004996 <HAL_SYSTICK_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e00e      	b.n	80046f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b0f      	cmp	r3, #15
 80046d6:	d80a      	bhi.n	80046ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046d8:	2200      	movs	r2, #0
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	f000 f92f 	bl	8004942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046e4:	4a06      	ldr	r2, [pc, #24]	; (8004700 <HAL_InitTick+0x5c>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000000 	.word	0x20000000
 80046fc:	20000008 	.word	0x20000008
 8004700:	20000004 	.word	0x20000004

08004704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_IncTick+0x20>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_IncTick+0x24>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4413      	add	r3, r2
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <HAL_IncTick+0x24>)
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000008 	.word	0x20000008
 8004728:	20000c84 	.word	0x20000c84

0800472c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return uwTick;
 8004730:	4b03      	ldr	r3, [pc, #12]	; (8004740 <HAL_GetTick+0x14>)
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000c84 	.word	0x20000c84

08004744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800474c:	f7ff ffee 	bl	800472c <HAL_GetTick>
 8004750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d005      	beq.n	800476a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800475e:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <HAL_Delay+0x44>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800476a:	bf00      	nop
 800476c:	f7ff ffde 	bl	800472c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	429a      	cmp	r2, r3
 800477a:	d8f7      	bhi.n	800476c <HAL_Delay+0x28>
  {
  }
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000008 	.word	0x20000008

0800478c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <__NVIC_SetPriorityGrouping+0x44>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047a8:	4013      	ands	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047be:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <__NVIC_SetPriorityGrouping+0x44>)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	60d3      	str	r3, [r2, #12]
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <__NVIC_GetPriorityGrouping+0x18>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	0a1b      	lsrs	r3, r3, #8
 80047de:	f003 0307 	and.w	r3, r3, #7
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	db0b      	blt.n	800481a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	f003 021f 	and.w	r2, r3, #31
 8004808:	4907      	ldr	r1, [pc, #28]	; (8004828 <__NVIC_EnableIRQ+0x38>)
 800480a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2001      	movs	r0, #1
 8004812:	fa00 f202 	lsl.w	r2, r0, r2
 8004816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	e000e100 	.word	0xe000e100

0800482c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	6039      	str	r1, [r7, #0]
 8004836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483c:	2b00      	cmp	r3, #0
 800483e:	db0a      	blt.n	8004856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	b2da      	uxtb	r2, r3
 8004844:	490c      	ldr	r1, [pc, #48]	; (8004878 <__NVIC_SetPriority+0x4c>)
 8004846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484a:	0112      	lsls	r2, r2, #4
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	440b      	add	r3, r1
 8004850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004854:	e00a      	b.n	800486c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4908      	ldr	r1, [pc, #32]	; (800487c <__NVIC_SetPriority+0x50>)
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	3b04      	subs	r3, #4
 8004864:	0112      	lsls	r2, r2, #4
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	440b      	add	r3, r1
 800486a:	761a      	strb	r2, [r3, #24]
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	e000e100 	.word	0xe000e100
 800487c:	e000ed00 	.word	0xe000ed00

08004880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f1c3 0307 	rsb	r3, r3, #7
 800489a:	2b04      	cmp	r3, #4
 800489c:	bf28      	it	cs
 800489e:	2304      	movcs	r3, #4
 80048a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3304      	adds	r3, #4
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d902      	bls.n	80048b0 <NVIC_EncodePriority+0x30>
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3b03      	subs	r3, #3
 80048ae:	e000      	b.n	80048b2 <NVIC_EncodePriority+0x32>
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b4:	f04f 32ff 	mov.w	r2, #4294967295
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	401a      	ands	r2, r3
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c8:	f04f 31ff 	mov.w	r1, #4294967295
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	43d9      	mvns	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d8:	4313      	orrs	r3, r2
         );
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3724      	adds	r7, #36	; 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048f8:	d301      	bcc.n	80048fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048fa:	2301      	movs	r3, #1
 80048fc:	e00f      	b.n	800491e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048fe:	4a0a      	ldr	r2, [pc, #40]	; (8004928 <SysTick_Config+0x40>)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3b01      	subs	r3, #1
 8004904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004906:	210f      	movs	r1, #15
 8004908:	f04f 30ff 	mov.w	r0, #4294967295
 800490c:	f7ff ff8e 	bl	800482c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <SysTick_Config+0x40>)
 8004912:	2200      	movs	r2, #0
 8004914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004916:	4b04      	ldr	r3, [pc, #16]	; (8004928 <SysTick_Config+0x40>)
 8004918:	2207      	movs	r2, #7
 800491a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	e000e010 	.word	0xe000e010

0800492c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff ff29 	bl	800478c <__NVIC_SetPriorityGrouping>
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004942:	b580      	push	{r7, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	4603      	mov	r3, r0
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004954:	f7ff ff3e 	bl	80047d4 <__NVIC_GetPriorityGrouping>
 8004958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	6978      	ldr	r0, [r7, #20]
 8004960:	f7ff ff8e 	bl	8004880 <NVIC_EncodePriority>
 8004964:	4602      	mov	r2, r0
 8004966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ff5d 	bl	800482c <__NVIC_SetPriority>
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	4603      	mov	r3, r0
 8004982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ff31 	bl	80047f0 <__NVIC_EnableIRQ>
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff ffa2 	bl	80048e8 <SysTick_Config>
 80049a4:	4603      	mov	r3, r0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049bc:	f7ff feb6 	bl	800472c <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e099      	b.n	8004b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ec:	e00f      	b.n	8004a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049ee:	f7ff fe9d 	bl	800472c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d908      	bls.n	8004a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2203      	movs	r2, #3
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e078      	b.n	8004b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e8      	bne.n	80049ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <HAL_DMA_Init+0x158>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d107      	bne.n	8004a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	4313      	orrs	r3, r2
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0307 	bic.w	r3, r3, #7
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d117      	bne.n	8004ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fb01 	bl	80050bc <DMA_CheckFifoParam>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2240      	movs	r2, #64	; 0x40
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e016      	b.n	8004b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fab8 	bl	8005050 <DMA_CalcBaseAndBitshift>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae8:	223f      	movs	r2, #63	; 0x3f
 8004aea:	409a      	lsls	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	f010803f 	.word	0xf010803f

08004b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_DMA_Start_IT+0x26>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e040      	b.n	8004bb4 <HAL_DMA_Start_IT+0xa8>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d12f      	bne.n	8004ba6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fa4a 	bl	8004ff4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	223f      	movs	r2, #63	; 0x3f
 8004b66:	409a      	lsls	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0216 	orr.w	r2, r2, #22
 8004b7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0208 	orr.w	r2, r2, #8
 8004b92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e005      	b.n	8004bb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bca:	f7ff fdaf 	bl	800472c <HAL_GetTick>
 8004bce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d008      	beq.n	8004bee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2280      	movs	r2, #128	; 0x80
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e052      	b.n	8004c94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0216 	bic.w	r2, r2, #22
 8004bfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_DMA_Abort+0x62>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0208 	bic.w	r2, r2, #8
 8004c2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c3e:	e013      	b.n	8004c68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c40:	f7ff fd74 	bl	800472c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d90c      	bls.n	8004c68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2203      	movs	r2, #3
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e015      	b.n	8004c94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e4      	bne.n	8004c40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7a:	223f      	movs	r2, #63	; 0x3f
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d004      	beq.n	8004cba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e00c      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cec:	4b8e      	ldr	r3, [pc, #568]	; (8004f28 <HAL_DMA_IRQHandler+0x248>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a8e      	ldr	r2, [pc, #568]	; (8004f2c <HAL_DMA_IRQHandler+0x24c>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	0a9b      	lsrs	r3, r3, #10
 8004cf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01a      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0204 	bic.w	r2, r2, #4
 8004d32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d38:	2208      	movs	r2, #8
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	f043 0201 	orr.w	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d012      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00b      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	2201      	movs	r2, #1
 8004d70:	409a      	lsls	r2, r3
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	f043 0202 	orr.w	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	2204      	movs	r2, #4
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d012      	beq.n	8004db8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	2204      	movs	r2, #4
 8004da6:	409a      	lsls	r2, r3
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f043 0204 	orr.w	r2, r3, #4
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	2210      	movs	r2, #16
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d043      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d03c      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	2210      	movs	r2, #16
 8004ddc:	409a      	lsls	r2, r3
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d018      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d108      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d024      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
 8004e0e:	e01f      	b.n	8004e50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01b      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
 8004e20:	e016      	b.n	8004e50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d107      	bne.n	8004e40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0208 	bic.w	r2, r2, #8
 8004e3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	2220      	movs	r2, #32
 8004e56:	409a      	lsls	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 808f 	beq.w	8004f80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8087 	beq.w	8004f80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e76:	2220      	movs	r2, #32
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d136      	bne.n	8004ef8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0216 	bic.w	r2, r2, #22
 8004e98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d103      	bne.n	8004eba <HAL_DMA_IRQHandler+0x1da>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0208 	bic.w	r2, r2, #8
 8004ec8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ece:	223f      	movs	r2, #63	; 0x3f
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d07e      	beq.n	8004fec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
        }
        return;
 8004ef6:	e079      	b.n	8004fec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01d      	beq.n	8004f42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d031      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
 8004f24:	e02c      	b.n	8004f80 <HAL_DMA_IRQHandler+0x2a0>
 8004f26:	bf00      	nop
 8004f28:	20000000 	.word	0x20000000
 8004f2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d023      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	4798      	blx	r3
 8004f40:	e01e      	b.n	8004f80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10f      	bne.n	8004f70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0210 	bic.w	r2, r2, #16
 8004f5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d032      	beq.n	8004fee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d022      	beq.n	8004fda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2205      	movs	r2, #5
 8004f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d307      	bcc.n	8004fc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f2      	bne.n	8004fac <HAL_DMA_IRQHandler+0x2cc>
 8004fc6:	e000      	b.n	8004fca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
 8004fea:	e000      	b.n	8004fee <HAL_DMA_IRQHandler+0x30e>
        return;
 8004fec:	bf00      	nop
    }
  }
}
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005010:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d108      	bne.n	8005034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005032:	e007      	b.n	8005044 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	3b10      	subs	r3, #16
 8005060:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <DMA_CalcBaseAndBitshift+0x64>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800506a:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <DMA_CalcBaseAndBitshift+0x68>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d909      	bls.n	8005092 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	659a      	str	r2, [r3, #88]	; 0x58
 8005090:	e007      	b.n	80050a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	aaaaaaab 	.word	0xaaaaaaab
 80050b8:	08008a2c 	.word	0x08008a2c

080050bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d11f      	bne.n	8005116 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d856      	bhi.n	800518a <DMA_CheckFifoParam+0xce>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <DMA_CheckFifoParam+0x28>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	080050f5 	.word	0x080050f5
 80050e8:	08005107 	.word	0x08005107
 80050ec:	080050f5 	.word	0x080050f5
 80050f0:	0800518b 	.word	0x0800518b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d046      	beq.n	800518e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005104:	e043      	b.n	800518e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800510e:	d140      	bne.n	8005192 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005114:	e03d      	b.n	8005192 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511e:	d121      	bne.n	8005164 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b03      	cmp	r3, #3
 8005124:	d837      	bhi.n	8005196 <DMA_CheckFifoParam+0xda>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <DMA_CheckFifoParam+0x70>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	0800513d 	.word	0x0800513d
 8005130:	08005143 	.word	0x08005143
 8005134:	0800513d 	.word	0x0800513d
 8005138:	08005155 	.word	0x08005155
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
      break;
 8005140:	e030      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d025      	beq.n	800519a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005152:	e022      	b.n	800519a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800515c:	d11f      	bne.n	800519e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005162:	e01c      	b.n	800519e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d903      	bls.n	8005172 <DMA_CheckFifoParam+0xb6>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b03      	cmp	r3, #3
 800516e:	d003      	beq.n	8005178 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005170:	e018      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
      break;
 8005176:	e015      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00e      	beq.n	80051a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      break;
 8005188:	e00b      	b.n	80051a2 <DMA_CheckFifoParam+0xe6>
      break;
 800518a:	bf00      	nop
 800518c:	e00a      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
      break;
 800518e:	bf00      	nop
 8005190:	e008      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005192:	bf00      	nop
 8005194:	e006      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005196:	bf00      	nop
 8005198:	e004      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
      break;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <DMA_CheckFifoParam+0xe8>
      break;
 80051a2:	bf00      	nop
    }
  } 
  
  return status; 
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop

080051b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e16b      	b.n	80054a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051d0:	2201      	movs	r2, #1
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4013      	ands	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	f040 815a 	bne.w	80054a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d005      	beq.n	8005206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005202:	2b02      	cmp	r3, #2
 8005204:	d130      	bne.n	8005268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	2203      	movs	r2, #3
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4313      	orrs	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800523c:	2201      	movs	r2, #1
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f003 0201 	and.w	r2, r3, #1
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b03      	cmp	r3, #3
 8005272:	d017      	beq.n	80052a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	2203      	movs	r2, #3
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d123      	bne.n	80052f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	08da      	lsrs	r2, r3, #3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3208      	adds	r2, #8
 80052b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	220f      	movs	r2, #15
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	08da      	lsrs	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3208      	adds	r2, #8
 80052f2:	69b9      	ldr	r1, [r7, #24]
 80052f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2203      	movs	r2, #3
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 0203 	and.w	r2, r3, #3
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4313      	orrs	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80b4 	beq.w	80054a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	4b60      	ldr	r3, [pc, #384]	; (80054c0 <HAL_GPIO_Init+0x30c>)
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	4a5f      	ldr	r2, [pc, #380]	; (80054c0 <HAL_GPIO_Init+0x30c>)
 8005344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005348:	6453      	str	r3, [r2, #68]	; 0x44
 800534a:	4b5d      	ldr	r3, [pc, #372]	; (80054c0 <HAL_GPIO_Init+0x30c>)
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005356:	4a5b      	ldr	r2, [pc, #364]	; (80054c4 <HAL_GPIO_Init+0x310>)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	3302      	adds	r3, #2
 800535e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	220f      	movs	r2, #15
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4013      	ands	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a52      	ldr	r2, [pc, #328]	; (80054c8 <HAL_GPIO_Init+0x314>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02b      	beq.n	80053da <HAL_GPIO_Init+0x226>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a51      	ldr	r2, [pc, #324]	; (80054cc <HAL_GPIO_Init+0x318>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d025      	beq.n	80053d6 <HAL_GPIO_Init+0x222>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a50      	ldr	r2, [pc, #320]	; (80054d0 <HAL_GPIO_Init+0x31c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01f      	beq.n	80053d2 <HAL_GPIO_Init+0x21e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a4f      	ldr	r2, [pc, #316]	; (80054d4 <HAL_GPIO_Init+0x320>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d019      	beq.n	80053ce <HAL_GPIO_Init+0x21a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <HAL_GPIO_Init+0x324>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_GPIO_Init+0x216>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a4d      	ldr	r2, [pc, #308]	; (80054dc <HAL_GPIO_Init+0x328>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00d      	beq.n	80053c6 <HAL_GPIO_Init+0x212>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a4c      	ldr	r2, [pc, #304]	; (80054e0 <HAL_GPIO_Init+0x32c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <HAL_GPIO_Init+0x20e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a4b      	ldr	r2, [pc, #300]	; (80054e4 <HAL_GPIO_Init+0x330>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d101      	bne.n	80053be <HAL_GPIO_Init+0x20a>
 80053ba:	2307      	movs	r3, #7
 80053bc:	e00e      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053be:	2308      	movs	r3, #8
 80053c0:	e00c      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053c2:	2306      	movs	r3, #6
 80053c4:	e00a      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053c6:	2305      	movs	r3, #5
 80053c8:	e008      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053ca:	2304      	movs	r3, #4
 80053cc:	e006      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053ce:	2303      	movs	r3, #3
 80053d0:	e004      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e002      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053da:	2300      	movs	r3, #0
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	f002 0203 	and.w	r2, r2, #3
 80053e2:	0092      	lsls	r2, r2, #2
 80053e4:	4093      	lsls	r3, r2
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053ec:	4935      	ldr	r1, [pc, #212]	; (80054c4 <HAL_GPIO_Init+0x310>)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	089b      	lsrs	r3, r3, #2
 80053f2:	3302      	adds	r3, #2
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053fa:	4b3b      	ldr	r3, [pc, #236]	; (80054e8 <HAL_GPIO_Init+0x334>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800541e:	4a32      	ldr	r2, [pc, #200]	; (80054e8 <HAL_GPIO_Init+0x334>)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005424:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <HAL_GPIO_Init+0x334>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	43db      	mvns	r3, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <HAL_GPIO_Init+0x334>)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800544e:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <HAL_GPIO_Init+0x334>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	43db      	mvns	r3, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4013      	ands	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005472:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <HAL_GPIO_Init+0x334>)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005478:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <HAL_GPIO_Init+0x334>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	43db      	mvns	r3, r3
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4013      	ands	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800549c:	4a12      	ldr	r2, [pc, #72]	; (80054e8 <HAL_GPIO_Init+0x334>)
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3301      	adds	r3, #1
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	f67f ae90 	bls.w	80051d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	3724      	adds	r7, #36	; 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800
 80054c4:	40013800 	.word	0x40013800
 80054c8:	40020000 	.word	0x40020000
 80054cc:	40020400 	.word	0x40020400
 80054d0:	40020800 	.word	0x40020800
 80054d4:	40020c00 	.word	0x40020c00
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40021400 	.word	0x40021400
 80054e0:	40021800 	.word	0x40021800
 80054e4:	40021c00 	.word	0x40021c00
 80054e8:	40013c00 	.word	0x40013c00

080054ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
 8005508:	e001      	b.n	800550e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800550e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	807b      	strh	r3, [r7, #2]
 8005528:	4613      	mov	r3, r2
 800552a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800552c:	787b      	ldrb	r3, [r7, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005532:	887a      	ldrh	r2, [r7, #2]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005538:	e003      	b.n	8005542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800553a:	887b      	ldrh	r3, [r7, #2]
 800553c:	041a      	lsls	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	619a      	str	r2, [r3, #24]
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005560:	887a      	ldrh	r2, [r7, #2]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4013      	ands	r3, r2
 8005566:	041a      	lsls	r2, r3, #16
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	43d9      	mvns	r1, r3
 800556c:	887b      	ldrh	r3, [r7, #2]
 800556e:	400b      	ands	r3, r1
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	619a      	str	r2, [r3, #24]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800558e:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800559a:	4a05      	ldr	r2, [pc, #20]	; (80055b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fd fd90 	bl	80030c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40013c00 	.word	0x40013c00

080055b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e267      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d075      	beq.n	80056be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055d2:	4b88      	ldr	r3, [pc, #544]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d00c      	beq.n	80055f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055de:	4b85      	ldr	r3, [pc, #532]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d112      	bne.n	8005610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ea:	4b82      	ldr	r3, [pc, #520]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f6:	d10b      	bne.n	8005610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f8:	4b7e      	ldr	r3, [pc, #504]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d05b      	beq.n	80056bc <HAL_RCC_OscConfig+0x108>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d157      	bne.n	80056bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e242      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005618:	d106      	bne.n	8005628 <HAL_RCC_OscConfig+0x74>
 800561a:	4b76      	ldr	r3, [pc, #472]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a75      	ldr	r2, [pc, #468]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	e01d      	b.n	8005664 <HAL_RCC_OscConfig+0xb0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005630:	d10c      	bne.n	800564c <HAL_RCC_OscConfig+0x98>
 8005632:	4b70      	ldr	r3, [pc, #448]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a6f      	ldr	r2, [pc, #444]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	4b6d      	ldr	r3, [pc, #436]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a6c      	ldr	r2, [pc, #432]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e00b      	b.n	8005664 <HAL_RCC_OscConfig+0xb0>
 800564c:	4b69      	ldr	r3, [pc, #420]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a68      	ldr	r2, [pc, #416]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4b66      	ldr	r3, [pc, #408]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a65      	ldr	r2, [pc, #404]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 800565e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d013      	beq.n	8005694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566c:	f7ff f85e 	bl	800472c <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005674:	f7ff f85a 	bl	800472c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	; 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e207      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0xc0>
 8005692:	e014      	b.n	80056be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7ff f84a 	bl	800472c <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800569c:	f7ff f846 	bl	800472c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	; 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e1f3      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ae:	4b51      	ldr	r3, [pc, #324]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f0      	bne.n	800569c <HAL_RCC_OscConfig+0xe8>
 80056ba:	e000      	b.n	80056be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d063      	beq.n	8005792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056ca:	4b4a      	ldr	r3, [pc, #296]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d6:	4b47      	ldr	r3, [pc, #284]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d11c      	bne.n	800571c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056e2:	4b44      	ldr	r3, [pc, #272]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d116      	bne.n	800571c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ee:	4b41      	ldr	r3, [pc, #260]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_RCC_OscConfig+0x152>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d001      	beq.n	8005706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e1c7      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005706:	4b3b      	ldr	r3, [pc, #236]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4937      	ldr	r1, [pc, #220]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005716:	4313      	orrs	r3, r2
 8005718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571a:	e03a      	b.n	8005792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d020      	beq.n	8005766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005724:	4b34      	ldr	r3, [pc, #208]	; (80057f8 <HAL_RCC_OscConfig+0x244>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fe ffff 	bl	800472c <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005732:	f7fe fffb 	bl	800472c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e1a8      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005744:	4b2b      	ldr	r3, [pc, #172]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005750:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4925      	ldr	r1, [pc, #148]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005760:	4313      	orrs	r3, r2
 8005762:	600b      	str	r3, [r1, #0]
 8005764:	e015      	b.n	8005792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <HAL_RCC_OscConfig+0x244>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fe ffde 	bl	800472c <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005774:	f7fe ffda 	bl	800472c <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e187      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005786:	4b1b      	ldr	r3, [pc, #108]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d036      	beq.n	800580c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d016      	beq.n	80057d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a6:	4b15      	ldr	r3, [pc, #84]	; (80057fc <HAL_RCC_OscConfig+0x248>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fe ffbe 	bl	800472c <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fe ffba 	bl	800472c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e167      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c6:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCC_OscConfig+0x240>)
 80057c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0x200>
 80057d2:	e01b      	b.n	800580c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_RCC_OscConfig+0x248>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057da:	f7fe ffa7 	bl	800472c <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e0:	e00e      	b.n	8005800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e2:	f7fe ffa3 	bl	800472c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d907      	bls.n	8005800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e150      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
 80057f4:	40023800 	.word	0x40023800
 80057f8:	42470000 	.word	0x42470000
 80057fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005800:	4b88      	ldr	r3, [pc, #544]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ea      	bne.n	80057e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8097 	beq.w	8005948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581e:	4b81      	ldr	r3, [pc, #516]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10f      	bne.n	800584a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	4b7d      	ldr	r3, [pc, #500]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	4a7c      	ldr	r2, [pc, #496]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005838:	6413      	str	r3, [r2, #64]	; 0x40
 800583a:	4b7a      	ldr	r3, [pc, #488]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005846:	2301      	movs	r3, #1
 8005848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584a:	4b77      	ldr	r3, [pc, #476]	; (8005a28 <HAL_RCC_OscConfig+0x474>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d118      	bne.n	8005888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005856:	4b74      	ldr	r3, [pc, #464]	; (8005a28 <HAL_RCC_OscConfig+0x474>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a73      	ldr	r2, [pc, #460]	; (8005a28 <HAL_RCC_OscConfig+0x474>)
 800585c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005862:	f7fe ff63 	bl	800472c <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586a:	f7fe ff5f 	bl	800472c <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e10c      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587c:	4b6a      	ldr	r3, [pc, #424]	; (8005a28 <HAL_RCC_OscConfig+0x474>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d106      	bne.n	800589e <HAL_RCC_OscConfig+0x2ea>
 8005890:	4b64      	ldr	r3, [pc, #400]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	4a63      	ldr	r2, [pc, #396]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	6713      	str	r3, [r2, #112]	; 0x70
 800589c:	e01c      	b.n	80058d8 <HAL_RCC_OscConfig+0x324>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d10c      	bne.n	80058c0 <HAL_RCC_OscConfig+0x30c>
 80058a6:	4b5f      	ldr	r3, [pc, #380]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	4a5e      	ldr	r2, [pc, #376]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058ac:	f043 0304 	orr.w	r3, r3, #4
 80058b0:	6713      	str	r3, [r2, #112]	; 0x70
 80058b2:	4b5c      	ldr	r3, [pc, #368]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	4a5b      	ldr	r2, [pc, #364]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	6713      	str	r3, [r2, #112]	; 0x70
 80058be:	e00b      	b.n	80058d8 <HAL_RCC_OscConfig+0x324>
 80058c0:	4b58      	ldr	r3, [pc, #352]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	4a57      	ldr	r2, [pc, #348]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	6713      	str	r3, [r2, #112]	; 0x70
 80058cc:	4b55      	ldr	r3, [pc, #340]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d0:	4a54      	ldr	r2, [pc, #336]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058d2:	f023 0304 	bic.w	r3, r3, #4
 80058d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d015      	beq.n	800590c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e0:	f7fe ff24 	bl	800472c <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e6:	e00a      	b.n	80058fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e8:	f7fe ff20 	bl	800472c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e0cb      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fe:	4b49      	ldr	r3, [pc, #292]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ee      	beq.n	80058e8 <HAL_RCC_OscConfig+0x334>
 800590a:	e014      	b.n	8005936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590c:	f7fe ff0e 	bl	800472c <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005912:	e00a      	b.n	800592a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005914:	f7fe ff0a 	bl	800472c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e0b5      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592a:	4b3e      	ldr	r3, [pc, #248]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1ee      	bne.n	8005914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d105      	bne.n	8005948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593c:	4b39      	ldr	r3, [pc, #228]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	4a38      	ldr	r2, [pc, #224]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80a1 	beq.w	8005a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005952:	4b34      	ldr	r3, [pc, #208]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b08      	cmp	r3, #8
 800595c:	d05c      	beq.n	8005a18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d141      	bne.n	80059ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005966:	4b31      	ldr	r3, [pc, #196]	; (8005a2c <HAL_RCC_OscConfig+0x478>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596c:	f7fe fede 	bl	800472c <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005974:	f7fe feda 	bl	800472c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e087      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005986:	4b27      	ldr	r3, [pc, #156]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f0      	bne.n	8005974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	019b      	lsls	r3, r3, #6
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	3b01      	subs	r3, #1
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	061b      	lsls	r3, r3, #24
 80059b6:	491b      	ldr	r1, [pc, #108]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059bc:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_RCC_OscConfig+0x478>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fe feb3 	bl	800472c <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fe feaf 	bl	800472c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e05c      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059dc:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x416>
 80059e8:	e054      	b.n	8005a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ea:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <HAL_RCC_OscConfig+0x478>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f0:	f7fe fe9c 	bl	800472c <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059f8:	f7fe fe98 	bl	800472c <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e045      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0x444>
 8005a16:	e03d      	b.n	8005a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e038      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40007000 	.word	0x40007000
 8005a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a30:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_RCC_OscConfig+0x4ec>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d028      	beq.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d121      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d11a      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a60:	4013      	ands	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d111      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d107      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800

08005aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0cc      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab8:	4b68      	ldr	r3, [pc, #416]	; (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d90c      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac6:	4b65      	ldr	r3, [pc, #404]	; (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ace:	4b63      	ldr	r3, [pc, #396]	; (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0b8      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d020      	beq.n	8005b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af8:	4b59      	ldr	r3, [pc, #356]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a58      	ldr	r2, [pc, #352]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b10:	4b53      	ldr	r3, [pc, #332]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a52      	ldr	r2, [pc, #328]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1c:	4b50      	ldr	r3, [pc, #320]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	494d      	ldr	r1, [pc, #308]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d044      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d107      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b42:	4b47      	ldr	r3, [pc, #284]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d119      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e07f      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d003      	beq.n	8005b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d107      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b62:	4b3f      	ldr	r3, [pc, #252]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e06f      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b72:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e067      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b82:	4b37      	ldr	r3, [pc, #220]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f023 0203 	bic.w	r2, r3, #3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4934      	ldr	r1, [pc, #208]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b94:	f7fe fdca 	bl	800472c <HAL_GetTick>
 8005b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9a:	e00a      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b9c:	f7fe fdc6 	bl	800472c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e04f      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 020c 	and.w	r2, r3, #12
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d1eb      	bne.n	8005b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d20c      	bcs.n	8005bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b22      	ldr	r3, [pc, #136]	; (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b20      	ldr	r3, [pc, #128]	; (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e032      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf8:	4b19      	ldr	r3, [pc, #100]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4916      	ldr	r1, [pc, #88]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c16:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	490e      	ldr	r1, [pc, #56]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c2a:	f000 f821 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	490a      	ldr	r1, [pc, #40]	; (8005c64 <HAL_RCC_ClockConfig+0x1c0>)
 8005c3c:	5ccb      	ldrb	r3, [r1, r3]
 8005c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c42:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <HAL_RCC_ClockConfig+0x1c4>)
 8005c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c46:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <HAL_RCC_ClockConfig+0x1c8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fd2a 	bl	80046a4 <HAL_InitTick>

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40023c00 	.word	0x40023c00
 8005c60:	40023800 	.word	0x40023800
 8005c64:	08008a14 	.word	0x08008a14
 8005c68:	20000000 	.word	0x20000000
 8005c6c:	20000004 	.word	0x20000004

08005c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c74:	b094      	sub	sp, #80	; 0x50
 8005c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c80:	2300      	movs	r3, #0
 8005c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c88:	4b79      	ldr	r3, [pc, #484]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d00d      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	f200 80e1 	bhi.w	8005e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d003      	beq.n	8005caa <HAL_RCC_GetSysClockFreq+0x3a>
 8005ca2:	e0db      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ca4:	4b73      	ldr	r3, [pc, #460]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ca6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ca8:	e0db      	b.n	8005e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005caa:	4b73      	ldr	r3, [pc, #460]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8005cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cae:	e0d8      	b.n	8005e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cb0:	4b6f      	ldr	r3, [pc, #444]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cba:	4b6d      	ldr	r3, [pc, #436]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d063      	beq.n	8005d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc6:	4b6a      	ldr	r3, [pc, #424]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	2200      	movs	r2, #0
 8005cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cda:	2300      	movs	r3, #0
 8005cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	f04f 0000 	mov.w	r0, #0
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	0159      	lsls	r1, r3, #5
 8005cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cf4:	0150      	lsls	r0, r2, #5
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	1a51      	subs	r1, r2, r1
 8005cfe:	6139      	str	r1, [r7, #16]
 8005d00:	4629      	mov	r1, r5
 8005d02:	eb63 0301 	sbc.w	r3, r3, r1
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d14:	4659      	mov	r1, fp
 8005d16:	018b      	lsls	r3, r1, #6
 8005d18:	4651      	mov	r1, sl
 8005d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d1e:	4651      	mov	r1, sl
 8005d20:	018a      	lsls	r2, r1, #6
 8005d22:	4651      	mov	r1, sl
 8005d24:	ebb2 0801 	subs.w	r8, r2, r1
 8005d28:	4659      	mov	r1, fp
 8005d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d42:	4690      	mov	r8, r2
 8005d44:	4699      	mov	r9, r3
 8005d46:	4623      	mov	r3, r4
 8005d48:	eb18 0303 	adds.w	r3, r8, r3
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	462b      	mov	r3, r5
 8005d50:	eb49 0303 	adc.w	r3, r9, r3
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d62:	4629      	mov	r1, r5
 8005d64:	024b      	lsls	r3, r1, #9
 8005d66:	4621      	mov	r1, r4
 8005d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	024a      	lsls	r2, r1, #9
 8005d70:	4610      	mov	r0, r2
 8005d72:	4619      	mov	r1, r3
 8005d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d76:	2200      	movs	r2, #0
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d80:	f7fa fe70 	bl	8000a64 <__aeabi_uldivmod>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4613      	mov	r3, r2
 8005d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d8c:	e058      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d8e:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	099b      	lsrs	r3, r3, #6
 8005d94:	2200      	movs	r2, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	4611      	mov	r1, r2
 8005d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d9e:	623b      	str	r3, [r7, #32]
 8005da0:	2300      	movs	r3, #0
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
 8005da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	f04f 0000 	mov.w	r0, #0
 8005db0:	f04f 0100 	mov.w	r1, #0
 8005db4:	0159      	lsls	r1, r3, #5
 8005db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dba:	0150      	lsls	r0, r2, #5
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005de0:	ebb2 040a 	subs.w	r4, r2, sl
 8005de4:	eb63 050b 	sbc.w	r5, r3, fp
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	00eb      	lsls	r3, r5, #3
 8005df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005df6:	00e2      	lsls	r2, r4, #3
 8005df8:	4614      	mov	r4, r2
 8005dfa:	461d      	mov	r5, r3
 8005dfc:	4643      	mov	r3, r8
 8005dfe:	18e3      	adds	r3, r4, r3
 8005e00:	603b      	str	r3, [r7, #0]
 8005e02:	464b      	mov	r3, r9
 8005e04:	eb45 0303 	adc.w	r3, r5, r3
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e16:	4629      	mov	r1, r5
 8005e18:	028b      	lsls	r3, r1, #10
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e20:	4621      	mov	r1, r4
 8005e22:	028a      	lsls	r2, r1, #10
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	61fa      	str	r2, [r7, #28]
 8005e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e34:	f7fa fe16 	bl	8000a64 <__aeabi_uldivmod>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	0c1b      	lsrs	r3, r3, #16
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e5a:	e002      	b.n	8005e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3750      	adds	r7, #80	; 0x50
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
 8005e74:	00f42400 	.word	0x00f42400
 8005e78:	007a1200 	.word	0x007a1200

08005e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000000 	.word	0x20000000

08005e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e98:	f7ff fff0 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	0a9b      	lsrs	r3, r3, #10
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	4903      	ldr	r1, [pc, #12]	; (8005eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eaa:	5ccb      	ldrb	r3, [r1, r3]
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	08008a24 	.word	0x08008a24

08005ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ec0:	f7ff ffdc 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	4b05      	ldr	r3, [pc, #20]	; (8005edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	0b5b      	lsrs	r3, r3, #13
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	4903      	ldr	r1, [pc, #12]	; (8005ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ed2:	5ccb      	ldrb	r3, [r1, r3]
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	08008a24 	.word	0x08008a24

08005ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e041      	b.n	8005f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fe f94a 	bl	80041a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f000 fce2 	bl	80068ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d001      	beq.n	8005f9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e046      	b.n	800602a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a23      	ldr	r2, [pc, #140]	; (8006038 <HAL_TIM_Base_Start+0xb4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d022      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb6:	d01d      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_TIM_Base_Start+0xb8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d018      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <HAL_TIM_Base_Start+0xbc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <HAL_TIM_Base_Start+0xc0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_TIM_Base_Start+0xc4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_TIM_Base_Start+0xc8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a18      	ldr	r2, [pc, #96]	; (8006050 <HAL_TIM_Base_Start+0xcc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d111      	bne.n	8006018 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b06      	cmp	r3, #6
 8006004:	d010      	beq.n	8006028 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006016:	e007      	b.n	8006028 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40010400 	.word	0x40010400
 800604c:	40014000 	.word	0x40014000
 8006050:	40001800 	.word	0x40001800

08006054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e04e      	b.n	800610a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a23      	ldr	r2, [pc, #140]	; (8006118 <HAL_TIM_Base_Start_IT+0xc4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d01d      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_TIM_Base_Start_IT+0xc8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_TIM_Base_Start_IT+0xcc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <HAL_TIM_Base_Start_IT+0xd0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <HAL_TIM_Base_Start_IT+0xd4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a19      	ldr	r2, [pc, #100]	; (800612c <HAL_TIM_Base_Start_IT+0xd8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a18      	ldr	r2, [pc, #96]	; (8006130 <HAL_TIM_Base_Start_IT+0xdc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d111      	bne.n	80060f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d010      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	e007      	b.n	8006108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40010400 	.word	0x40010400
 800612c:	40014000 	.word	0x40014000
 8006130:	40001800 	.word	0x40001800

08006134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e041      	b.n	80061ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f839 	bl	80061d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f000 fbba 	bl	80068ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d109      	bne.n	800620c <HAL_TIM_PWM_Start+0x24>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e022      	b.n	8006252 <HAL_TIM_PWM_Start+0x6a>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b04      	cmp	r3, #4
 8006210:	d109      	bne.n	8006226 <HAL_TIM_PWM_Start+0x3e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b01      	cmp	r3, #1
 800621c:	bf14      	ite	ne
 800621e:	2301      	movne	r3, #1
 8006220:	2300      	moveq	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	e015      	b.n	8006252 <HAL_TIM_PWM_Start+0x6a>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b08      	cmp	r3, #8
 800622a:	d109      	bne.n	8006240 <HAL_TIM_PWM_Start+0x58>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	e008      	b.n	8006252 <HAL_TIM_PWM_Start+0x6a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	bf14      	ite	ne
 800624c:	2301      	movne	r3, #1
 800624e:	2300      	moveq	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e07c      	b.n	8006354 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <HAL_TIM_PWM_Start+0x82>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006268:	e013      	b.n	8006292 <HAL_TIM_PWM_Start+0xaa>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b04      	cmp	r3, #4
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Start+0x92>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006278:	e00b      	b.n	8006292 <HAL_TIM_PWM_Start+0xaa>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d104      	bne.n	800628a <HAL_TIM_PWM_Start+0xa2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006288:	e003      	b.n	8006292 <HAL_TIM_PWM_Start+0xaa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2201      	movs	r2, #1
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fe10 	bl	8006ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a2d      	ldr	r2, [pc, #180]	; (800635c <HAL_TIM_PWM_Start+0x174>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIM_PWM_Start+0xcc>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a2c      	ldr	r2, [pc, #176]	; (8006360 <HAL_TIM_PWM_Start+0x178>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_PWM_Start+0xd0>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <HAL_TIM_PWM_Start+0xd2>
 80062b8:	2300      	movs	r3, #0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a22      	ldr	r2, [pc, #136]	; (800635c <HAL_TIM_PWM_Start+0x174>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d022      	beq.n	800631e <HAL_TIM_PWM_Start+0x136>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e0:	d01d      	beq.n	800631e <HAL_TIM_PWM_Start+0x136>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <HAL_TIM_PWM_Start+0x17c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d018      	beq.n	800631e <HAL_TIM_PWM_Start+0x136>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1d      	ldr	r2, [pc, #116]	; (8006368 <HAL_TIM_PWM_Start+0x180>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d013      	beq.n	800631e <HAL_TIM_PWM_Start+0x136>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1c      	ldr	r2, [pc, #112]	; (800636c <HAL_TIM_PWM_Start+0x184>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00e      	beq.n	800631e <HAL_TIM_PWM_Start+0x136>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a16      	ldr	r2, [pc, #88]	; (8006360 <HAL_TIM_PWM_Start+0x178>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d009      	beq.n	800631e <HAL_TIM_PWM_Start+0x136>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a18      	ldr	r2, [pc, #96]	; (8006370 <HAL_TIM_PWM_Start+0x188>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_TIM_PWM_Start+0x136>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a16      	ldr	r2, [pc, #88]	; (8006374 <HAL_TIM_PWM_Start+0x18c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d111      	bne.n	8006342 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b06      	cmp	r3, #6
 800632e:	d010      	beq.n	8006352 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006340:	e007      	b.n	8006352 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40010000 	.word	0x40010000
 8006360:	40010400 	.word	0x40010400
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40014000 	.word	0x40014000
 8006374:	40001800 	.word	0x40001800

08006378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d122      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d11b      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0202 	mvn.w	r2, #2
 80063a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa77 	bl	80068ae <HAL_TIM_IC_CaptureCallback>
 80063c0:	e005      	b.n	80063ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa69 	bl	800689a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fa7a 	bl	80068c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d122      	bne.n	8006428 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d11b      	bne.n	8006428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0204 	mvn.w	r2, #4
 80063f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fa4d 	bl	80068ae <HAL_TIM_IC_CaptureCallback>
 8006414:	e005      	b.n	8006422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa3f 	bl	800689a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fa50 	bl	80068c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b08      	cmp	r3, #8
 8006434:	d122      	bne.n	800647c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b08      	cmp	r3, #8
 8006442:	d11b      	bne.n	800647c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0208 	mvn.w	r2, #8
 800644c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2204      	movs	r2, #4
 8006452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa23 	bl	80068ae <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa15 	bl	800689a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fa26 	bl	80068c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b10      	cmp	r3, #16
 8006488:	d122      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b10      	cmp	r3, #16
 8006496:	d11b      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0210 	mvn.w	r2, #16
 80064a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2208      	movs	r2, #8
 80064a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f9f9 	bl	80068ae <HAL_TIM_IC_CaptureCallback>
 80064bc:	e005      	b.n	80064ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f9eb 	bl	800689a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f9fc 	bl	80068c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d10e      	bne.n	80064fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d107      	bne.n	80064fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0201 	mvn.w	r2, #1
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fc feca 	bl	8003290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b80      	cmp	r3, #128	; 0x80
 8006508:	d10e      	bne.n	8006528 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006514:	2b80      	cmp	r3, #128	; 0x80
 8006516:	d107      	bne.n	8006528 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fd78 	bl	8007018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d10e      	bne.n	8006554 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d107      	bne.n	8006554 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800654c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f9c1 	bl	80068d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b20      	cmp	r3, #32
 8006560:	d10e      	bne.n	8006580 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b20      	cmp	r3, #32
 800656e:	d107      	bne.n	8006580 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f06f 0220 	mvn.w	r2, #32
 8006578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fd42 	bl	8007004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0ae      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b0c      	cmp	r3, #12
 80065b2:	f200 809f 	bhi.w	80066f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	080066f5 	.word	0x080066f5
 80065c4:	080066f5 	.word	0x080066f5
 80065c8:	080066f5 	.word	0x080066f5
 80065cc:	08006631 	.word	0x08006631
 80065d0:	080066f5 	.word	0x080066f5
 80065d4:	080066f5 	.word	0x080066f5
 80065d8:	080066f5 	.word	0x080066f5
 80065dc:	08006673 	.word	0x08006673
 80065e0:	080066f5 	.word	0x080066f5
 80065e4:	080066f5 	.word	0x080066f5
 80065e8:	080066f5 	.word	0x080066f5
 80065ec:	080066b3 	.word	0x080066b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68b9      	ldr	r1, [r7, #8]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fa18 	bl	8006a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0208 	orr.w	r2, r2, #8
 800660a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0204 	bic.w	r2, r2, #4
 800661a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6999      	ldr	r1, [r3, #24]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	619a      	str	r2, [r3, #24]
      break;
 800662e:	e064      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fa68 	bl	8006b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6999      	ldr	r1, [r3, #24]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	021a      	lsls	r2, r3, #8
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	619a      	str	r2, [r3, #24]
      break;
 8006670:	e043      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fabd 	bl	8006bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0208 	orr.w	r2, r2, #8
 800668c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69da      	ldr	r2, [r3, #28]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0204 	bic.w	r2, r2, #4
 800669c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69d9      	ldr	r1, [r3, #28]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	61da      	str	r2, [r3, #28]
      break;
 80066b0:	e023      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fb11 	bl	8006ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69d9      	ldr	r1, [r3, #28]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	021a      	lsls	r2, r3, #8
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	61da      	str	r2, [r3, #28]
      break;
 80066f2:	e002      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	75fb      	strb	r3, [r7, #23]
      break;
 80066f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIM_ConfigClockSource+0x1c>
 8006724:	2302      	movs	r3, #2
 8006726:	e0b4      	b.n	8006892 <HAL_TIM_ConfigClockSource+0x186>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800674e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006760:	d03e      	beq.n	80067e0 <HAL_TIM_ConfigClockSource+0xd4>
 8006762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006766:	f200 8087 	bhi.w	8006878 <HAL_TIM_ConfigClockSource+0x16c>
 800676a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676e:	f000 8086 	beq.w	800687e <HAL_TIM_ConfigClockSource+0x172>
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	d87f      	bhi.n	8006878 <HAL_TIM_ConfigClockSource+0x16c>
 8006778:	2b70      	cmp	r3, #112	; 0x70
 800677a:	d01a      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0xa6>
 800677c:	2b70      	cmp	r3, #112	; 0x70
 800677e:	d87b      	bhi.n	8006878 <HAL_TIM_ConfigClockSource+0x16c>
 8006780:	2b60      	cmp	r3, #96	; 0x60
 8006782:	d050      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x11a>
 8006784:	2b60      	cmp	r3, #96	; 0x60
 8006786:	d877      	bhi.n	8006878 <HAL_TIM_ConfigClockSource+0x16c>
 8006788:	2b50      	cmp	r3, #80	; 0x50
 800678a:	d03c      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0xfa>
 800678c:	2b50      	cmp	r3, #80	; 0x50
 800678e:	d873      	bhi.n	8006878 <HAL_TIM_ConfigClockSource+0x16c>
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	d058      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x13a>
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d86f      	bhi.n	8006878 <HAL_TIM_ConfigClockSource+0x16c>
 8006798:	2b30      	cmp	r3, #48	; 0x30
 800679a:	d064      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x15a>
 800679c:	2b30      	cmp	r3, #48	; 0x30
 800679e:	d86b      	bhi.n	8006878 <HAL_TIM_ConfigClockSource+0x16c>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d060      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x15a>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d867      	bhi.n	8006878 <HAL_TIM_ConfigClockSource+0x16c>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d05c      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x15a>
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d05a      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x15a>
 80067b0:	e062      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6899      	ldr	r1, [r3, #8]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f000 fb5d 	bl	8006e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	609a      	str	r2, [r3, #8]
      break;
 80067de:	e04f      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6899      	ldr	r1, [r3, #8]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f000 fb46 	bl	8006e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006802:	609a      	str	r2, [r3, #8]
      break;
 8006804:	e03c      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	461a      	mov	r2, r3
 8006814:	f000 faba 	bl	8006d8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2150      	movs	r1, #80	; 0x50
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fb13 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 8006824:	e02c      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6859      	ldr	r1, [r3, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	461a      	mov	r2, r3
 8006834:	f000 fad9 	bl	8006dea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2160      	movs	r1, #96	; 0x60
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fb03 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 8006844:	e01c      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6859      	ldr	r1, [r3, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	461a      	mov	r2, r3
 8006854:	f000 fa9a 	bl	8006d8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2140      	movs	r1, #64	; 0x40
 800685e:	4618      	mov	r0, r3
 8006860:	f000 faf3 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 8006864:	e00c      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4619      	mov	r1, r3
 8006870:	4610      	mov	r0, r2
 8006872:	f000 faea 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 8006876:	e003      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
      break;
 800687c:	e000      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800687e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a40      	ldr	r2, [pc, #256]	; (8006a00 <TIM_Base_SetConfig+0x114>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690a:	d00f      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a3d      	ldr	r2, [pc, #244]	; (8006a04 <TIM_Base_SetConfig+0x118>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00b      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a3c      	ldr	r2, [pc, #240]	; (8006a08 <TIM_Base_SetConfig+0x11c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d007      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3b      	ldr	r2, [pc, #236]	; (8006a0c <TIM_Base_SetConfig+0x120>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3a      	ldr	r2, [pc, #232]	; (8006a10 <TIM_Base_SetConfig+0x124>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d108      	bne.n	800693e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2f      	ldr	r2, [pc, #188]	; (8006a00 <TIM_Base_SetConfig+0x114>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d02b      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694c:	d027      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2c      	ldr	r2, [pc, #176]	; (8006a04 <TIM_Base_SetConfig+0x118>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d023      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2b      	ldr	r2, [pc, #172]	; (8006a08 <TIM_Base_SetConfig+0x11c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d01f      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <TIM_Base_SetConfig+0x120>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01b      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a29      	ldr	r2, [pc, #164]	; (8006a10 <TIM_Base_SetConfig+0x124>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d017      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a28      	ldr	r2, [pc, #160]	; (8006a14 <TIM_Base_SetConfig+0x128>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d013      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a27      	ldr	r2, [pc, #156]	; (8006a18 <TIM_Base_SetConfig+0x12c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00f      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a26      	ldr	r2, [pc, #152]	; (8006a1c <TIM_Base_SetConfig+0x130>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00b      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a25      	ldr	r2, [pc, #148]	; (8006a20 <TIM_Base_SetConfig+0x134>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d007      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a24      	ldr	r2, [pc, #144]	; (8006a24 <TIM_Base_SetConfig+0x138>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a23      	ldr	r2, [pc, #140]	; (8006a28 <TIM_Base_SetConfig+0x13c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d108      	bne.n	80069b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a0a      	ldr	r2, [pc, #40]	; (8006a00 <TIM_Base_SetConfig+0x114>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_Base_SetConfig+0xf8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a0c      	ldr	r2, [pc, #48]	; (8006a10 <TIM_Base_SetConfig+0x124>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d103      	bne.n	80069ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	615a      	str	r2, [r3, #20]
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40010400 	.word	0x40010400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800
 8006a20:	40001800 	.word	0x40001800
 8006a24:	40001c00 	.word	0x40001c00
 8006a28:	40002000 	.word	0x40002000

08006a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f023 0201 	bic.w	r2, r3, #1
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f023 0302 	bic.w	r3, r3, #2
 8006a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a20      	ldr	r2, [pc, #128]	; (8006b04 <TIM_OC1_SetConfig+0xd8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_OC1_SetConfig+0x64>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <TIM_OC1_SetConfig+0xdc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d10c      	bne.n	8006aaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f023 0308 	bic.w	r3, r3, #8
 8006a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f023 0304 	bic.w	r3, r3, #4
 8006aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <TIM_OC1_SetConfig+0xd8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_OC1_SetConfig+0x8e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a14      	ldr	r2, [pc, #80]	; (8006b08 <TIM_OC1_SetConfig+0xdc>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d111      	bne.n	8006ade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	621a      	str	r2, [r3, #32]
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40010400 	.word	0x40010400

08006b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0210 	bic.w	r2, r3, #16
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0320 	bic.w	r3, r3, #32
 8006b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a22      	ldr	r2, [pc, #136]	; (8006bf0 <TIM_OC2_SetConfig+0xe4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d003      	beq.n	8006b74 <TIM_OC2_SetConfig+0x68>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a21      	ldr	r2, [pc, #132]	; (8006bf4 <TIM_OC2_SetConfig+0xe8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d10d      	bne.n	8006b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a17      	ldr	r2, [pc, #92]	; (8006bf0 <TIM_OC2_SetConfig+0xe4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_OC2_SetConfig+0x94>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a16      	ldr	r2, [pc, #88]	; (8006bf4 <TIM_OC2_SetConfig+0xe8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d113      	bne.n	8006bc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	621a      	str	r2, [r3, #32]
}
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40010400 	.word	0x40010400

08006bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <TIM_OC3_SetConfig+0xe0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_OC3_SetConfig+0x66>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a20      	ldr	r2, [pc, #128]	; (8006cdc <TIM_OC3_SetConfig+0xe4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d10d      	bne.n	8006c7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a16      	ldr	r2, [pc, #88]	; (8006cd8 <TIM_OC3_SetConfig+0xe0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_OC3_SetConfig+0x92>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <TIM_OC3_SetConfig+0xe4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d113      	bne.n	8006cb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40010400 	.word	0x40010400

08006ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	031b      	lsls	r3, r3, #12
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a12      	ldr	r2, [pc, #72]	; (8006d84 <TIM_OC4_SetConfig+0xa4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d003      	beq.n	8006d48 <TIM_OC4_SetConfig+0x68>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a11      	ldr	r2, [pc, #68]	; (8006d88 <TIM_OC4_SetConfig+0xa8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d109      	bne.n	8006d5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	019b      	lsls	r3, r3, #6
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40010400 	.word	0x40010400

08006d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f023 0201 	bic.w	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f023 030a 	bic.w	r3, r3, #10
 8006dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b087      	sub	sp, #28
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0210 	bic.w	r2, r3, #16
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	031b      	lsls	r3, r3, #12
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f043 0307 	orr.w	r3, r3, #7
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	609a      	str	r2, [r3, #8]
}
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	021a      	lsls	r2, r3, #8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	609a      	str	r2, [r3, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a1a      	ldr	r2, [r3, #32]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a1a      	ldr	r2, [r3, #32]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d101      	bne.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e05a      	b.n	8006fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d022      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f70:	d01d      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1d      	ldr	r2, [pc, #116]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d018      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d013      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00e      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d009      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d004      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a15      	ldr	r2, [pc, #84]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d10c      	bne.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40010000 	.word	0x40010000
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	40010400 	.word	0x40010400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40001800 	.word	0x40001800

08007004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e03f      	b.n	80070be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fd f952 	bl	80042fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2224      	movs	r2, #36	; 0x24
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800706e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 ff43 	bl	8007efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695a      	ldr	r2, [r3, #20]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08c      	sub	sp, #48	; 0x30
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d165      	bne.n	80071ae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_UART_Transmit_DMA+0x26>
 80070e8:	88fb      	ldrh	r3, [r7, #6]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e05e      	b.n	80071b0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_UART_Transmit_DMA+0x38>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e057      	b.n	80071b0 <HAL_UART_Transmit_DMA+0xe8>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	88fa      	ldrh	r2, [r7, #6]
 8007112:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2221      	movs	r2, #33	; 0x21
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <HAL_UART_Transmit_DMA+0xf0>)
 800712e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	4a21      	ldr	r2, [pc, #132]	; (80071bc <HAL_UART_Transmit_DMA+0xf4>)
 8007136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713c:	4a20      	ldr	r2, [pc, #128]	; (80071c0 <HAL_UART_Transmit_DMA+0xf8>)
 800713e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	2200      	movs	r2, #0
 8007146:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	6819      	ldr	r1, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3304      	adds	r3, #4
 800715c:	461a      	mov	r2, r3
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	f7fd fcd4 	bl	8004b0c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800716c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3314      	adds	r3, #20
 800717c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	617b      	str	r3, [r7, #20]
   return(result);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3314      	adds	r3, #20
 8007194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007196:	627a      	str	r2, [r7, #36]	; 0x24
 8007198:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6a39      	ldr	r1, [r7, #32]
 800719c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e5      	bne.n	8007176 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e000      	b.n	80071b0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80071ae:	2302      	movs	r3, #2
  }
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3730      	adds	r7, #48	; 0x30
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	08007795 	.word	0x08007795
 80071bc:	0800782f 	.word	0x0800782f
 80071c0:	080079a7 	.word	0x080079a7

080071c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b20      	cmp	r3, #32
 80071dc:	d11d      	bne.n	800721a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <HAL_UART_Receive_DMA+0x26>
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e016      	b.n	800721c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_UART_Receive_DMA+0x38>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e00f      	b.n	800721c <HAL_UART_Receive_DMA+0x58>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	461a      	mov	r2, r3
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fc13 	bl	8007a3c <UART_Start_Receive_DMA>
 8007216:	4603      	mov	r3, r0
 8007218:	e000      	b.n	800721c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800721a:	2302      	movs	r3, #2
  }
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b0ba      	sub	sp, #232	; 0xe8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800724a:	2300      	movs	r3, #0
 800724c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007250:	2300      	movs	r3, #0
 8007252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10f      	bne.n	800728a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <HAL_UART_IRQHandler+0x66>
 8007276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fd7f 	bl	8007d86 <UART_Receive_IT>
      return;
 8007288:	e256      	b.n	8007738 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800728a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 80de 	beq.w	8007450 <HAL_UART_IRQHandler+0x22c>
 8007294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d106      	bne.n	80072ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80d1 	beq.w	8007450 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <HAL_UART_IRQHandler+0xae>
 80072ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f043 0201 	orr.w	r2, r3, #1
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <HAL_UART_IRQHandler+0xd2>
 80072de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f043 0202 	orr.w	r2, r3, #2
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00b      	beq.n	800731a <HAL_UART_IRQHandler+0xf6>
 8007302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d005      	beq.n	800731a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f043 0204 	orr.w	r2, r3, #4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800731a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d011      	beq.n	800734a <HAL_UART_IRQHandler+0x126>
 8007326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d105      	bne.n	800733e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f043 0208 	orr.w	r2, r3, #8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 81ed 	beq.w	800772e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <HAL_UART_IRQHandler+0x14e>
 8007360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fd0a 	bl	8007d86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <HAL_UART_IRQHandler+0x17a>
 8007396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d04f      	beq.n	800743e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fc12 	bl	8007bc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b40      	cmp	r3, #64	; 0x40
 80073b0:	d141      	bne.n	8007436 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3314      	adds	r3, #20
 80073b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3314      	adds	r3, #20
 80073da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1d9      	bne.n	80073b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	2b00      	cmp	r3, #0
 8007404:	d013      	beq.n	800742e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	4a7d      	ldr	r2, [pc, #500]	; (8007600 <HAL_UART_IRQHandler+0x3dc>)
 800740c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	4618      	mov	r0, r3
 8007414:	f7fd fc42 	bl	8004c9c <HAL_DMA_Abort_IT>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d016      	beq.n	800744c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007428:	4610      	mov	r0, r2
 800742a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742c:	e00e      	b.n	800744c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f99a 	bl	8007768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	e00a      	b.n	800744c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f996 	bl	8007768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743c:	e006      	b.n	800744c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f992 	bl	8007768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800744a:	e170      	b.n	800772e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744c:	bf00      	nop
    return;
 800744e:	e16e      	b.n	800772e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	2b01      	cmp	r3, #1
 8007456:	f040 814a 	bne.w	80076ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800745a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 8143 	beq.w	80076ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 813c 	beq.w	80076ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007476:	2300      	movs	r3, #0
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60bb      	str	r3, [r7, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007496:	2b40      	cmp	r3, #64	; 0x40
 8007498:	f040 80b4 	bne.w	8007604 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8140 	beq.w	8007732 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ba:	429a      	cmp	r2, r3
 80074bc:	f080 8139 	bcs.w	8007732 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d2:	f000 8088 	beq.w	80075e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007502:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800750e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800751a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1d9      	bne.n	80074d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3314      	adds	r3, #20
 8007528:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007534:	f023 0301 	bic.w	r3, r3, #1
 8007538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3314      	adds	r3, #20
 8007542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007546:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800754a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800754e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e1      	bne.n	8007522 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3314      	adds	r3, #20
 8007564:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800756e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3314      	adds	r3, #20
 800757e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007582:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007588:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e3      	bne.n	800755e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075b6:	f023 0310 	bic.w	r3, r3, #16
 80075ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330c      	adds	r3, #12
 80075c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80075ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e3      	bne.n	80075a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fd faeb 	bl	8004bbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f8c0 	bl	800777c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075fc:	e099      	b.n	8007732 <HAL_UART_IRQHandler+0x50e>
 80075fe:	bf00      	nop
 8007600:	08007c8f 	.word	0x08007c8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800760c:	b29b      	uxth	r3, r3
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 808b 	beq.w	8007736 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8086 	beq.w	8007736 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	330c      	adds	r3, #12
 8007630:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800763a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007640:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800764e:	647a      	str	r2, [r7, #68]	; 0x44
 8007650:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800765c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e3      	bne.n	800762a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3314      	adds	r3, #20
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	623b      	str	r3, [r7, #32]
   return(result);
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3314      	adds	r3, #20
 8007682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007686:	633a      	str	r2, [r7, #48]	; 0x30
 8007688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800768c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e3      	bne.n	8007662 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	330c      	adds	r3, #12
 80076ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0310 	bic.w	r3, r3, #16
 80076be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	330c      	adds	r3, #12
 80076c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076cc:	61fa      	str	r2, [r7, #28]
 80076ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	69b9      	ldr	r1, [r7, #24]
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	617b      	str	r3, [r7, #20]
   return(result);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e3      	bne.n	80076a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f848 	bl	800777c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076ec:	e023      	b.n	8007736 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <HAL_UART_IRQHandler+0x4ea>
 80076fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fad5 	bl	8007cb6 <UART_Transmit_IT>
    return;
 800770c:	e014      	b.n	8007738 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00e      	beq.n	8007738 <HAL_UART_IRQHandler+0x514>
 800771a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fb15 	bl	8007d56 <UART_EndTransmit_IT>
    return;
 800772c:	e004      	b.n	8007738 <HAL_UART_IRQHandler+0x514>
    return;
 800772e:	bf00      	nop
 8007730:	e002      	b.n	8007738 <HAL_UART_IRQHandler+0x514>
      return;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <HAL_UART_IRQHandler+0x514>
      return;
 8007736:	bf00      	nop
  }
}
 8007738:	37e8      	adds	r7, #232	; 0xe8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop

08007740 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b090      	sub	sp, #64	; 0x40
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d137      	bne.n	8007820 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80077b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b2:	2200      	movs	r2, #0
 80077b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3314      	adds	r3, #20
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	623b      	str	r3, [r7, #32]
   return(result);
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80077ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3314      	adds	r3, #20
 80077d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077d6:	633a      	str	r2, [r7, #48]	; 0x30
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e5      	bne.n	80077b6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
 8007802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	330c      	adds	r3, #12
 8007808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800780a:	61fa      	str	r2, [r7, #28]
 800780c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	69b9      	ldr	r1, [r7, #24]
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	617b      	str	r3, [r7, #20]
   return(result);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e5      	bne.n	80077ea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800781e:	e002      	b.n	8007826 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007820:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007822:	f7fb fdeb 	bl	80033fc <HAL_UART_TxCpltCallback>
}
 8007826:	bf00      	nop
 8007828:	3740      	adds	r7, #64	; 0x40
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff ff7f 	bl	8007740 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b09c      	sub	sp, #112	; 0x70
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007862:	2b00      	cmp	r3, #0
 8007864:	d172      	bne.n	800794c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007868:	2200      	movs	r2, #0
 800786a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800786c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800787c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800787e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007882:	66bb      	str	r3, [r7, #104]	; 0x68
 8007884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800788c:	65ba      	str	r2, [r7, #88]	; 0x58
 800788e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800789a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e5      	bne.n	800786c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3314      	adds	r3, #20
 80078a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	f023 0301 	bic.w	r3, r3, #1
 80078b6:	667b      	str	r3, [r7, #100]	; 0x64
 80078b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3314      	adds	r3, #20
 80078be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80078c0:	647a      	str	r2, [r7, #68]	; 0x44
 80078c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e5      	bne.n	80078a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3314      	adds	r3, #20
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	623b      	str	r3, [r7, #32]
   return(result);
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ea:	663b      	str	r3, [r7, #96]	; 0x60
 80078ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3314      	adds	r3, #20
 80078f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078f4:	633a      	str	r2, [r7, #48]	; 0x30
 80078f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e5      	bne.n	80078d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790a:	2220      	movs	r2, #32
 800790c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	2b01      	cmp	r3, #1
 8007916:	d119      	bne.n	800794c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	330c      	adds	r3, #12
 800791e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	60fb      	str	r3, [r7, #12]
   return(result);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0310 	bic.w	r3, r3, #16
 800792e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007938:	61fa      	str	r2, [r7, #28]
 800793a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	69b9      	ldr	r1, [r7, #24]
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	617b      	str	r3, [r7, #20]
   return(result);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e5      	bne.n	8007918 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	2b01      	cmp	r3, #1
 8007952:	d106      	bne.n	8007962 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007958:	4619      	mov	r1, r3
 800795a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800795c:	f7ff ff0e 	bl	800777c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007960:	e002      	b.n	8007968 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007962:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007964:	f7fb fd5c 	bl	8003420 <HAL_UART_RxCpltCallback>
}
 8007968:	bf00      	nop
 800796a:	3770      	adds	r7, #112	; 0x70
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	2b01      	cmp	r3, #1
 8007984:	d108      	bne.n	8007998 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	4619      	mov	r1, r3
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7ff fef3 	bl	800777c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007996:	e002      	b.n	800799e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff fedb 	bl	8007754 <HAL_UART_RxHalfCpltCallback>
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	bf0c      	ite	eq
 80079c6:	2301      	moveq	r3, #1
 80079c8:	2300      	movne	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b21      	cmp	r3, #33	; 0x21
 80079d8:	d108      	bne.n	80079ec <UART_DMAError+0x46>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80079e6:	68b8      	ldr	r0, [r7, #8]
 80079e8:	f000 f8c6 	bl	8007b78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f6:	2b40      	cmp	r3, #64	; 0x40
 80079f8:	bf0c      	ite	eq
 80079fa:	2301      	moveq	r3, #1
 80079fc:	2300      	movne	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b22      	cmp	r3, #34	; 0x22
 8007a0c:	d108      	bne.n	8007a20 <UART_DMAError+0x7a>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d005      	beq.n	8007a20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2200      	movs	r2, #0
 8007a18:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a1a:	68b8      	ldr	r0, [r7, #8]
 8007a1c:	f000 f8d4 	bl	8007bc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	f043 0210 	orr.w	r2, r3, #16
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a2c:	68b8      	ldr	r0, [r7, #8]
 8007a2e:	f7ff fe9b 	bl	8007768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b098      	sub	sp, #96	; 0x60
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	88fa      	ldrh	r2, [r7, #6]
 8007a54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2222      	movs	r2, #34	; 0x22
 8007a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	4a40      	ldr	r2, [pc, #256]	; (8007b6c <UART_Start_Receive_DMA+0x130>)
 8007a6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	4a3f      	ldr	r2, [pc, #252]	; (8007b70 <UART_Start_Receive_DMA+0x134>)
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	4a3e      	ldr	r2, [pc, #248]	; (8007b74 <UART_Start_Receive_DMA+0x138>)
 8007a7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	2200      	movs	r2, #0
 8007a82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a84:	f107 0308 	add.w	r3, r7, #8
 8007a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3304      	adds	r3, #4
 8007a94:	4619      	mov	r1, r3
 8007a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	f7fd f836 	bl	8004b0c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	613b      	str	r3, [r7, #16]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	613b      	str	r3, [r7, #16]
 8007ab4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d019      	beq.n	8007afa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007adc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007ae8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3314      	adds	r3, #20
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	f043 0301 	orr.w	r3, r3, #1
 8007b10:	657b      	str	r3, [r7, #84]	; 0x54
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3314      	adds	r3, #20
 8007b18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b1a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e5      	bne.n	8007afa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3314      	adds	r3, #20
 8007b34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b44:	653b      	str	r3, [r7, #80]	; 0x50
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3314      	adds	r3, #20
 8007b4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b4e:	627a      	str	r2, [r7, #36]	; 0x24
 8007b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6a39      	ldr	r1, [r7, #32]
 8007b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e5      	bne.n	8007b2e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3760      	adds	r7, #96	; 0x60
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	0800784b 	.word	0x0800784b
 8007b70:	08007971 	.word	0x08007971
 8007b74:	080079a7 	.word	0x080079a7

08007b78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b089      	sub	sp, #36	; 0x24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	330c      	adds	r3, #12
 8007b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	330c      	adds	r3, #12
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	61ba      	str	r2, [r7, #24]
 8007ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6979      	ldr	r1, [r7, #20]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	613b      	str	r3, [r7, #16]
   return(result);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e5      	bne.n	8007b80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007bbc:	bf00      	nop
 8007bbe:	3724      	adds	r7, #36	; 0x24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b095      	sub	sp, #84	; 0x54
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	330c      	adds	r3, #12
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	330c      	adds	r3, #12
 8007bee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bf0:	643a      	str	r2, [r7, #64]	; 0x40
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e5      	bne.n	8007bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3314      	adds	r3, #20
 8007c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f023 0301 	bic.w	r3, r3, #1
 8007c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3314      	adds	r3, #20
 8007c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e5      	bne.n	8007c04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d119      	bne.n	8007c74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f023 0310 	bic.w	r3, r3, #16
 8007c56:	647b      	str	r3, [r7, #68]	; 0x44
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c60:	61ba      	str	r2, [r7, #24]
 8007c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6979      	ldr	r1, [r7, #20]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e5      	bne.n	8007c40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c82:	bf00      	nop
 8007c84:	3754      	adds	r7, #84	; 0x54
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff fd5d 	bl	8007768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b21      	cmp	r3, #33	; 0x21
 8007cc8:	d13e      	bne.n	8007d48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd2:	d114      	bne.n	8007cfe <UART_Transmit_IT+0x48>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d110      	bne.n	8007cfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	1c9a      	adds	r2, r3, #2
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	621a      	str	r2, [r3, #32]
 8007cfc:	e008      	b.n	8007d10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	1c59      	adds	r1, r3, #1
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6211      	str	r1, [r2, #32]
 8007d08:	781a      	ldrb	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10f      	bne.n	8007d44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e000      	b.n	8007d4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7fb fb40 	bl	80033fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b08c      	sub	sp, #48	; 0x30
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b22      	cmp	r3, #34	; 0x22
 8007d98:	f040 80ab 	bne.w	8007ef2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da4:	d117      	bne.n	8007dd6 <UART_Receive_IT+0x50>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d113      	bne.n	8007dd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dce:	1c9a      	adds	r2, r3, #2
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8007dd4:	e026      	b.n	8007e24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de8:	d007      	beq.n	8007dfa <UART_Receive_IT+0x74>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <UART_Receive_IT+0x82>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e008      	b.n	8007e1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4619      	mov	r1, r3
 8007e32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d15a      	bne.n	8007eee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0220 	bic.w	r2, r2, #32
 8007e46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	695a      	ldr	r2, [r3, #20]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0201 	bic.w	r2, r2, #1
 8007e66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d135      	bne.n	8007ee4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f023 0310 	bic.w	r3, r3, #16
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9e:	623a      	str	r2, [r7, #32]
 8007ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	69f9      	ldr	r1, [r7, #28]
 8007ea4:	6a3a      	ldr	r2, [r7, #32]
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e5      	bne.n	8007e7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b10      	cmp	r3, #16
 8007ebe:	d10a      	bne.n	8007ed6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fc4d 	bl	800777c <HAL_UARTEx_RxEventCallback>
 8007ee2:	e002      	b.n	8007eea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fb fa9b 	bl	8003420 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e002      	b.n	8007ef4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e000      	b.n	8007ef4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ef2:	2302      	movs	r3, #2
  }
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3730      	adds	r7, #48	; 0x30
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f00:	b0c0      	sub	sp, #256	; 0x100
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f18:	68d9      	ldr	r1, [r3, #12]
 8007f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	ea40 0301 	orr.w	r3, r0, r1
 8007f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f54:	f021 010c 	bic.w	r1, r1, #12
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f62:	430b      	orrs	r3, r1
 8007f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f76:	6999      	ldr	r1, [r3, #24]
 8007f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	ea40 0301 	orr.w	r3, r0, r1
 8007f82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	4b8f      	ldr	r3, [pc, #572]	; (80081c8 <UART_SetConfig+0x2cc>)
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d005      	beq.n	8007f9c <UART_SetConfig+0xa0>
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	4b8d      	ldr	r3, [pc, #564]	; (80081cc <UART_SetConfig+0x2d0>)
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d104      	bne.n	8007fa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f9c:	f7fd ff8e 	bl	8005ebc <HAL_RCC_GetPCLK2Freq>
 8007fa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007fa4:	e003      	b.n	8007fae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fa6:	f7fd ff75 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 8007faa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb8:	f040 810c 	bne.w	80081d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007fca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007fce:	4622      	mov	r2, r4
 8007fd0:	462b      	mov	r3, r5
 8007fd2:	1891      	adds	r1, r2, r2
 8007fd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fd6:	415b      	adcs	r3, r3
 8007fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fde:	4621      	mov	r1, r4
 8007fe0:	eb12 0801 	adds.w	r8, r2, r1
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	eb43 0901 	adc.w	r9, r3, r1
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ffe:	4690      	mov	r8, r2
 8008000:	4699      	mov	r9, r3
 8008002:	4623      	mov	r3, r4
 8008004:	eb18 0303 	adds.w	r3, r8, r3
 8008008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800800c:	462b      	mov	r3, r5
 800800e:	eb49 0303 	adc.w	r3, r9, r3
 8008012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008022:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800802a:	460b      	mov	r3, r1
 800802c:	18db      	adds	r3, r3, r3
 800802e:	653b      	str	r3, [r7, #80]	; 0x50
 8008030:	4613      	mov	r3, r2
 8008032:	eb42 0303 	adc.w	r3, r2, r3
 8008036:	657b      	str	r3, [r7, #84]	; 0x54
 8008038:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800803c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008040:	f7f8 fd10 	bl	8000a64 <__aeabi_uldivmod>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4b61      	ldr	r3, [pc, #388]	; (80081d0 <UART_SetConfig+0x2d4>)
 800804a:	fba3 2302 	umull	r2, r3, r3, r2
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	011c      	lsls	r4, r3, #4
 8008052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008056:	2200      	movs	r2, #0
 8008058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800805c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008060:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008064:	4642      	mov	r2, r8
 8008066:	464b      	mov	r3, r9
 8008068:	1891      	adds	r1, r2, r2
 800806a:	64b9      	str	r1, [r7, #72]	; 0x48
 800806c:	415b      	adcs	r3, r3
 800806e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008070:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008074:	4641      	mov	r1, r8
 8008076:	eb12 0a01 	adds.w	sl, r2, r1
 800807a:	4649      	mov	r1, r9
 800807c:	eb43 0b01 	adc.w	fp, r3, r1
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800808c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008094:	4692      	mov	sl, r2
 8008096:	469b      	mov	fp, r3
 8008098:	4643      	mov	r3, r8
 800809a:	eb1a 0303 	adds.w	r3, sl, r3
 800809e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080a2:	464b      	mov	r3, r9
 80080a4:	eb4b 0303 	adc.w	r3, fp, r3
 80080a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80080bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80080c0:	460b      	mov	r3, r1
 80080c2:	18db      	adds	r3, r3, r3
 80080c4:	643b      	str	r3, [r7, #64]	; 0x40
 80080c6:	4613      	mov	r3, r2
 80080c8:	eb42 0303 	adc.w	r3, r2, r3
 80080cc:	647b      	str	r3, [r7, #68]	; 0x44
 80080ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080d6:	f7f8 fcc5 	bl	8000a64 <__aeabi_uldivmod>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4611      	mov	r1, r2
 80080e0:	4b3b      	ldr	r3, [pc, #236]	; (80081d0 <UART_SetConfig+0x2d4>)
 80080e2:	fba3 2301 	umull	r2, r3, r3, r1
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	2264      	movs	r2, #100	; 0x64
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
 80080ee:	1acb      	subs	r3, r1, r3
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080f6:	4b36      	ldr	r3, [pc, #216]	; (80081d0 <UART_SetConfig+0x2d4>)
 80080f8:	fba3 2302 	umull	r2, r3, r3, r2
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008104:	441c      	add	r4, r3
 8008106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800810a:	2200      	movs	r2, #0
 800810c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008110:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008114:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008118:	4642      	mov	r2, r8
 800811a:	464b      	mov	r3, r9
 800811c:	1891      	adds	r1, r2, r2
 800811e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008120:	415b      	adcs	r3, r3
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008128:	4641      	mov	r1, r8
 800812a:	1851      	adds	r1, r2, r1
 800812c:	6339      	str	r1, [r7, #48]	; 0x30
 800812e:	4649      	mov	r1, r9
 8008130:	414b      	adcs	r3, r1
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008140:	4659      	mov	r1, fp
 8008142:	00cb      	lsls	r3, r1, #3
 8008144:	4651      	mov	r1, sl
 8008146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800814a:	4651      	mov	r1, sl
 800814c:	00ca      	lsls	r2, r1, #3
 800814e:	4610      	mov	r0, r2
 8008150:	4619      	mov	r1, r3
 8008152:	4603      	mov	r3, r0
 8008154:	4642      	mov	r2, r8
 8008156:	189b      	adds	r3, r3, r2
 8008158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800815c:	464b      	mov	r3, r9
 800815e:	460a      	mov	r2, r1
 8008160:	eb42 0303 	adc.w	r3, r2, r3
 8008164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008174:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800817c:	460b      	mov	r3, r1
 800817e:	18db      	adds	r3, r3, r3
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28
 8008182:	4613      	mov	r3, r2
 8008184:	eb42 0303 	adc.w	r3, r2, r3
 8008188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800818a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800818e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008192:	f7f8 fc67 	bl	8000a64 <__aeabi_uldivmod>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <UART_SetConfig+0x2d4>)
 800819c:	fba3 1302 	umull	r1, r3, r3, r2
 80081a0:	095b      	lsrs	r3, r3, #5
 80081a2:	2164      	movs	r1, #100	; 0x64
 80081a4:	fb01 f303 	mul.w	r3, r1, r3
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	3332      	adds	r3, #50	; 0x32
 80081ae:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <UART_SetConfig+0x2d4>)
 80081b0:	fba2 2303 	umull	r2, r3, r2, r3
 80081b4:	095b      	lsrs	r3, r3, #5
 80081b6:	f003 0207 	and.w	r2, r3, #7
 80081ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4422      	add	r2, r4
 80081c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081c4:	e106      	b.n	80083d4 <UART_SetConfig+0x4d8>
 80081c6:	bf00      	nop
 80081c8:	40011000 	.word	0x40011000
 80081cc:	40011400 	.word	0x40011400
 80081d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80081e6:	4642      	mov	r2, r8
 80081e8:	464b      	mov	r3, r9
 80081ea:	1891      	adds	r1, r2, r2
 80081ec:	6239      	str	r1, [r7, #32]
 80081ee:	415b      	adcs	r3, r3
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
 80081f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081f6:	4641      	mov	r1, r8
 80081f8:	1854      	adds	r4, r2, r1
 80081fa:	4649      	mov	r1, r9
 80081fc:	eb43 0501 	adc.w	r5, r3, r1
 8008200:	f04f 0200 	mov.w	r2, #0
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	00eb      	lsls	r3, r5, #3
 800820a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800820e:	00e2      	lsls	r2, r4, #3
 8008210:	4614      	mov	r4, r2
 8008212:	461d      	mov	r5, r3
 8008214:	4643      	mov	r3, r8
 8008216:	18e3      	adds	r3, r4, r3
 8008218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800821c:	464b      	mov	r3, r9
 800821e:	eb45 0303 	adc.w	r3, r5, r3
 8008222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008232:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008236:	f04f 0200 	mov.w	r2, #0
 800823a:	f04f 0300 	mov.w	r3, #0
 800823e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008242:	4629      	mov	r1, r5
 8008244:	008b      	lsls	r3, r1, #2
 8008246:	4621      	mov	r1, r4
 8008248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800824c:	4621      	mov	r1, r4
 800824e:	008a      	lsls	r2, r1, #2
 8008250:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008254:	f7f8 fc06 	bl	8000a64 <__aeabi_uldivmod>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4b60      	ldr	r3, [pc, #384]	; (80083e0 <UART_SetConfig+0x4e4>)
 800825e:	fba3 2302 	umull	r2, r3, r3, r2
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	011c      	lsls	r4, r3, #4
 8008266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800826a:	2200      	movs	r2, #0
 800826c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008270:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008274:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008278:	4642      	mov	r2, r8
 800827a:	464b      	mov	r3, r9
 800827c:	1891      	adds	r1, r2, r2
 800827e:	61b9      	str	r1, [r7, #24]
 8008280:	415b      	adcs	r3, r3
 8008282:	61fb      	str	r3, [r7, #28]
 8008284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008288:	4641      	mov	r1, r8
 800828a:	1851      	adds	r1, r2, r1
 800828c:	6139      	str	r1, [r7, #16]
 800828e:	4649      	mov	r1, r9
 8008290:	414b      	adcs	r3, r1
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	f04f 0300 	mov.w	r3, #0
 800829c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082a0:	4659      	mov	r1, fp
 80082a2:	00cb      	lsls	r3, r1, #3
 80082a4:	4651      	mov	r1, sl
 80082a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082aa:	4651      	mov	r1, sl
 80082ac:	00ca      	lsls	r2, r1, #3
 80082ae:	4610      	mov	r0, r2
 80082b0:	4619      	mov	r1, r3
 80082b2:	4603      	mov	r3, r0
 80082b4:	4642      	mov	r2, r8
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082bc:	464b      	mov	r3, r9
 80082be:	460a      	mov	r2, r1
 80082c0:	eb42 0303 	adc.w	r3, r2, r3
 80082c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80082d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082e0:	4649      	mov	r1, r9
 80082e2:	008b      	lsls	r3, r1, #2
 80082e4:	4641      	mov	r1, r8
 80082e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082ea:	4641      	mov	r1, r8
 80082ec:	008a      	lsls	r2, r1, #2
 80082ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80082f2:	f7f8 fbb7 	bl	8000a64 <__aeabi_uldivmod>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4611      	mov	r1, r2
 80082fc:	4b38      	ldr	r3, [pc, #224]	; (80083e0 <UART_SetConfig+0x4e4>)
 80082fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	2264      	movs	r2, #100	; 0x64
 8008306:	fb02 f303 	mul.w	r3, r2, r3
 800830a:	1acb      	subs	r3, r1, r3
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	3332      	adds	r3, #50	; 0x32
 8008310:	4a33      	ldr	r2, [pc, #204]	; (80083e0 <UART_SetConfig+0x4e4>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800831c:	441c      	add	r4, r3
 800831e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008322:	2200      	movs	r2, #0
 8008324:	673b      	str	r3, [r7, #112]	; 0x70
 8008326:	677a      	str	r2, [r7, #116]	; 0x74
 8008328:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800832c:	4642      	mov	r2, r8
 800832e:	464b      	mov	r3, r9
 8008330:	1891      	adds	r1, r2, r2
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	415b      	adcs	r3, r3
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800833c:	4641      	mov	r1, r8
 800833e:	1851      	adds	r1, r2, r1
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	4649      	mov	r1, r9
 8008344:	414b      	adcs	r3, r1
 8008346:	607b      	str	r3, [r7, #4]
 8008348:	f04f 0200 	mov.w	r2, #0
 800834c:	f04f 0300 	mov.w	r3, #0
 8008350:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008354:	4659      	mov	r1, fp
 8008356:	00cb      	lsls	r3, r1, #3
 8008358:	4651      	mov	r1, sl
 800835a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800835e:	4651      	mov	r1, sl
 8008360:	00ca      	lsls	r2, r1, #3
 8008362:	4610      	mov	r0, r2
 8008364:	4619      	mov	r1, r3
 8008366:	4603      	mov	r3, r0
 8008368:	4642      	mov	r2, r8
 800836a:	189b      	adds	r3, r3, r2
 800836c:	66bb      	str	r3, [r7, #104]	; 0x68
 800836e:	464b      	mov	r3, r9
 8008370:	460a      	mov	r2, r1
 8008372:	eb42 0303 	adc.w	r3, r2, r3
 8008376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	663b      	str	r3, [r7, #96]	; 0x60
 8008382:	667a      	str	r2, [r7, #100]	; 0x64
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008390:	4649      	mov	r1, r9
 8008392:	008b      	lsls	r3, r1, #2
 8008394:	4641      	mov	r1, r8
 8008396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800839a:	4641      	mov	r1, r8
 800839c:	008a      	lsls	r2, r1, #2
 800839e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80083a2:	f7f8 fb5f 	bl	8000a64 <__aeabi_uldivmod>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <UART_SetConfig+0x4e4>)
 80083ac:	fba3 1302 	umull	r1, r3, r3, r2
 80083b0:	095b      	lsrs	r3, r3, #5
 80083b2:	2164      	movs	r1, #100	; 0x64
 80083b4:	fb01 f303 	mul.w	r3, r1, r3
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	011b      	lsls	r3, r3, #4
 80083bc:	3332      	adds	r3, #50	; 0x32
 80083be:	4a08      	ldr	r2, [pc, #32]	; (80083e0 <UART_SetConfig+0x4e4>)
 80083c0:	fba2 2303 	umull	r2, r3, r2, r3
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	f003 020f 	and.w	r2, r3, #15
 80083ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4422      	add	r2, r4
 80083d2:	609a      	str	r2, [r3, #8]
}
 80083d4:	bf00      	nop
 80083d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083da:	46bd      	mov	sp, r7
 80083dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e0:	51eb851f 	.word	0x51eb851f

080083e4 <realloc>:
 80083e4:	4b02      	ldr	r3, [pc, #8]	; (80083f0 <realloc+0xc>)
 80083e6:	460a      	mov	r2, r1
 80083e8:	4601      	mov	r1, r0
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	f000 b802 	b.w	80083f4 <_realloc_r>
 80083f0:	20000058 	.word	0x20000058

080083f4 <_realloc_r>:
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	4680      	mov	r8, r0
 80083fa:	4614      	mov	r4, r2
 80083fc:	460e      	mov	r6, r1
 80083fe:	b921      	cbnz	r1, 800840a <_realloc_r+0x16>
 8008400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008404:	4611      	mov	r1, r2
 8008406:	f000 b8d3 	b.w	80085b0 <_malloc_r>
 800840a:	b92a      	cbnz	r2, 8008418 <_realloc_r+0x24>
 800840c:	f000 f864 	bl	80084d8 <_free_r>
 8008410:	4625      	mov	r5, r4
 8008412:	4628      	mov	r0, r5
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	f000 f956 	bl	80086c8 <_malloc_usable_size_r>
 800841c:	4284      	cmp	r4, r0
 800841e:	4607      	mov	r7, r0
 8008420:	d802      	bhi.n	8008428 <_realloc_r+0x34>
 8008422:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008426:	d812      	bhi.n	800844e <_realloc_r+0x5a>
 8008428:	4621      	mov	r1, r4
 800842a:	4640      	mov	r0, r8
 800842c:	f000 f8c0 	bl	80085b0 <_malloc_r>
 8008430:	4605      	mov	r5, r0
 8008432:	2800      	cmp	r0, #0
 8008434:	d0ed      	beq.n	8008412 <_realloc_r+0x1e>
 8008436:	42bc      	cmp	r4, r7
 8008438:	4622      	mov	r2, r4
 800843a:	4631      	mov	r1, r6
 800843c:	bf28      	it	cs
 800843e:	463a      	movcs	r2, r7
 8008440:	f000 f83c 	bl	80084bc <memcpy>
 8008444:	4631      	mov	r1, r6
 8008446:	4640      	mov	r0, r8
 8008448:	f000 f846 	bl	80084d8 <_free_r>
 800844c:	e7e1      	b.n	8008412 <_realloc_r+0x1e>
 800844e:	4635      	mov	r5, r6
 8008450:	e7df      	b.n	8008412 <_realloc_r+0x1e>

08008452 <memset>:
 8008452:	4402      	add	r2, r0
 8008454:	4603      	mov	r3, r0
 8008456:	4293      	cmp	r3, r2
 8008458:	d100      	bne.n	800845c <memset+0xa>
 800845a:	4770      	bx	lr
 800845c:	f803 1b01 	strb.w	r1, [r3], #1
 8008460:	e7f9      	b.n	8008456 <memset+0x4>
	...

08008464 <__errno>:
 8008464:	4b01      	ldr	r3, [pc, #4]	; (800846c <__errno+0x8>)
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	20000058 	.word	0x20000058

08008470 <__libc_init_array>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	4d0d      	ldr	r5, [pc, #52]	; (80084a8 <__libc_init_array+0x38>)
 8008474:	4c0d      	ldr	r4, [pc, #52]	; (80084ac <__libc_init_array+0x3c>)
 8008476:	1b64      	subs	r4, r4, r5
 8008478:	10a4      	asrs	r4, r4, #2
 800847a:	2600      	movs	r6, #0
 800847c:	42a6      	cmp	r6, r4
 800847e:	d109      	bne.n	8008494 <__libc_init_array+0x24>
 8008480:	4d0b      	ldr	r5, [pc, #44]	; (80084b0 <__libc_init_array+0x40>)
 8008482:	4c0c      	ldr	r4, [pc, #48]	; (80084b4 <__libc_init_array+0x44>)
 8008484:	f000 f938 	bl	80086f8 <_init>
 8008488:	1b64      	subs	r4, r4, r5
 800848a:	10a4      	asrs	r4, r4, #2
 800848c:	2600      	movs	r6, #0
 800848e:	42a6      	cmp	r6, r4
 8008490:	d105      	bne.n	800849e <__libc_init_array+0x2e>
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	f855 3b04 	ldr.w	r3, [r5], #4
 8008498:	4798      	blx	r3
 800849a:	3601      	adds	r6, #1
 800849c:	e7ee      	b.n	800847c <__libc_init_array+0xc>
 800849e:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a2:	4798      	blx	r3
 80084a4:	3601      	adds	r6, #1
 80084a6:	e7f2      	b.n	800848e <__libc_init_array+0x1e>
 80084a8:	08008a3c 	.word	0x08008a3c
 80084ac:	08008a3c 	.word	0x08008a3c
 80084b0:	08008a3c 	.word	0x08008a3c
 80084b4:	08008a44 	.word	0x08008a44

080084b8 <__retarget_lock_acquire_recursive>:
 80084b8:	4770      	bx	lr

080084ba <__retarget_lock_release_recursive>:
 80084ba:	4770      	bx	lr

080084bc <memcpy>:
 80084bc:	440a      	add	r2, r1
 80084be:	4291      	cmp	r1, r2
 80084c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084c4:	d100      	bne.n	80084c8 <memcpy+0xc>
 80084c6:	4770      	bx	lr
 80084c8:	b510      	push	{r4, lr}
 80084ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084d2:	4291      	cmp	r1, r2
 80084d4:	d1f9      	bne.n	80084ca <memcpy+0xe>
 80084d6:	bd10      	pop	{r4, pc}

080084d8 <_free_r>:
 80084d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084da:	2900      	cmp	r1, #0
 80084dc:	d044      	beq.n	8008568 <_free_r+0x90>
 80084de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e2:	9001      	str	r0, [sp, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f1a1 0404 	sub.w	r4, r1, #4
 80084ea:	bfb8      	it	lt
 80084ec:	18e4      	addlt	r4, r4, r3
 80084ee:	f000 f8df 	bl	80086b0 <__malloc_lock>
 80084f2:	4a1e      	ldr	r2, [pc, #120]	; (800856c <_free_r+0x94>)
 80084f4:	9801      	ldr	r0, [sp, #4]
 80084f6:	6813      	ldr	r3, [r2, #0]
 80084f8:	b933      	cbnz	r3, 8008508 <_free_r+0x30>
 80084fa:	6063      	str	r3, [r4, #4]
 80084fc:	6014      	str	r4, [r2, #0]
 80084fe:	b003      	add	sp, #12
 8008500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008504:	f000 b8da 	b.w	80086bc <__malloc_unlock>
 8008508:	42a3      	cmp	r3, r4
 800850a:	d908      	bls.n	800851e <_free_r+0x46>
 800850c:	6825      	ldr	r5, [r4, #0]
 800850e:	1961      	adds	r1, r4, r5
 8008510:	428b      	cmp	r3, r1
 8008512:	bf01      	itttt	eq
 8008514:	6819      	ldreq	r1, [r3, #0]
 8008516:	685b      	ldreq	r3, [r3, #4]
 8008518:	1949      	addeq	r1, r1, r5
 800851a:	6021      	streq	r1, [r4, #0]
 800851c:	e7ed      	b.n	80084fa <_free_r+0x22>
 800851e:	461a      	mov	r2, r3
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	b10b      	cbz	r3, 8008528 <_free_r+0x50>
 8008524:	42a3      	cmp	r3, r4
 8008526:	d9fa      	bls.n	800851e <_free_r+0x46>
 8008528:	6811      	ldr	r1, [r2, #0]
 800852a:	1855      	adds	r5, r2, r1
 800852c:	42a5      	cmp	r5, r4
 800852e:	d10b      	bne.n	8008548 <_free_r+0x70>
 8008530:	6824      	ldr	r4, [r4, #0]
 8008532:	4421      	add	r1, r4
 8008534:	1854      	adds	r4, r2, r1
 8008536:	42a3      	cmp	r3, r4
 8008538:	6011      	str	r1, [r2, #0]
 800853a:	d1e0      	bne.n	80084fe <_free_r+0x26>
 800853c:	681c      	ldr	r4, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	6053      	str	r3, [r2, #4]
 8008542:	440c      	add	r4, r1
 8008544:	6014      	str	r4, [r2, #0]
 8008546:	e7da      	b.n	80084fe <_free_r+0x26>
 8008548:	d902      	bls.n	8008550 <_free_r+0x78>
 800854a:	230c      	movs	r3, #12
 800854c:	6003      	str	r3, [r0, #0]
 800854e:	e7d6      	b.n	80084fe <_free_r+0x26>
 8008550:	6825      	ldr	r5, [r4, #0]
 8008552:	1961      	adds	r1, r4, r5
 8008554:	428b      	cmp	r3, r1
 8008556:	bf04      	itt	eq
 8008558:	6819      	ldreq	r1, [r3, #0]
 800855a:	685b      	ldreq	r3, [r3, #4]
 800855c:	6063      	str	r3, [r4, #4]
 800855e:	bf04      	itt	eq
 8008560:	1949      	addeq	r1, r1, r5
 8008562:	6021      	streq	r1, [r4, #0]
 8008564:	6054      	str	r4, [r2, #4]
 8008566:	e7ca      	b.n	80084fe <_free_r+0x26>
 8008568:	b003      	add	sp, #12
 800856a:	bd30      	pop	{r4, r5, pc}
 800856c:	20000dc8 	.word	0x20000dc8

08008570 <sbrk_aligned>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4e0e      	ldr	r6, [pc, #56]	; (80085ac <sbrk_aligned+0x3c>)
 8008574:	460c      	mov	r4, r1
 8008576:	6831      	ldr	r1, [r6, #0]
 8008578:	4605      	mov	r5, r0
 800857a:	b911      	cbnz	r1, 8008582 <sbrk_aligned+0x12>
 800857c:	f000 f8ac 	bl	80086d8 <_sbrk_r>
 8008580:	6030      	str	r0, [r6, #0]
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f000 f8a7 	bl	80086d8 <_sbrk_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d00a      	beq.n	80085a4 <sbrk_aligned+0x34>
 800858e:	1cc4      	adds	r4, r0, #3
 8008590:	f024 0403 	bic.w	r4, r4, #3
 8008594:	42a0      	cmp	r0, r4
 8008596:	d007      	beq.n	80085a8 <sbrk_aligned+0x38>
 8008598:	1a21      	subs	r1, r4, r0
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f89c 	bl	80086d8 <_sbrk_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d101      	bne.n	80085a8 <sbrk_aligned+0x38>
 80085a4:	f04f 34ff 	mov.w	r4, #4294967295
 80085a8:	4620      	mov	r0, r4
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	20000dcc 	.word	0x20000dcc

080085b0 <_malloc_r>:
 80085b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b4:	1ccd      	adds	r5, r1, #3
 80085b6:	f025 0503 	bic.w	r5, r5, #3
 80085ba:	3508      	adds	r5, #8
 80085bc:	2d0c      	cmp	r5, #12
 80085be:	bf38      	it	cc
 80085c0:	250c      	movcc	r5, #12
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	4607      	mov	r7, r0
 80085c6:	db01      	blt.n	80085cc <_malloc_r+0x1c>
 80085c8:	42a9      	cmp	r1, r5
 80085ca:	d905      	bls.n	80085d8 <_malloc_r+0x28>
 80085cc:	230c      	movs	r3, #12
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	2600      	movs	r6, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086ac <_malloc_r+0xfc>
 80085dc:	f000 f868 	bl	80086b0 <__malloc_lock>
 80085e0:	f8d8 3000 	ldr.w	r3, [r8]
 80085e4:	461c      	mov	r4, r3
 80085e6:	bb5c      	cbnz	r4, 8008640 <_malloc_r+0x90>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4638      	mov	r0, r7
 80085ec:	f7ff ffc0 	bl	8008570 <sbrk_aligned>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	4604      	mov	r4, r0
 80085f4:	d155      	bne.n	80086a2 <_malloc_r+0xf2>
 80085f6:	f8d8 4000 	ldr.w	r4, [r8]
 80085fa:	4626      	mov	r6, r4
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	d145      	bne.n	800868c <_malloc_r+0xdc>
 8008600:	2c00      	cmp	r4, #0
 8008602:	d048      	beq.n	8008696 <_malloc_r+0xe6>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	4631      	mov	r1, r6
 8008608:	4638      	mov	r0, r7
 800860a:	eb04 0903 	add.w	r9, r4, r3
 800860e:	f000 f863 	bl	80086d8 <_sbrk_r>
 8008612:	4581      	cmp	r9, r0
 8008614:	d13f      	bne.n	8008696 <_malloc_r+0xe6>
 8008616:	6821      	ldr	r1, [r4, #0]
 8008618:	1a6d      	subs	r5, r5, r1
 800861a:	4629      	mov	r1, r5
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff ffa7 	bl	8008570 <sbrk_aligned>
 8008622:	3001      	adds	r0, #1
 8008624:	d037      	beq.n	8008696 <_malloc_r+0xe6>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	442b      	add	r3, r5
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	f8d8 3000 	ldr.w	r3, [r8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d038      	beq.n	80086a6 <_malloc_r+0xf6>
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	42a2      	cmp	r2, r4
 8008638:	d12b      	bne.n	8008692 <_malloc_r+0xe2>
 800863a:	2200      	movs	r2, #0
 800863c:	605a      	str	r2, [r3, #4]
 800863e:	e00f      	b.n	8008660 <_malloc_r+0xb0>
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	1b52      	subs	r2, r2, r5
 8008644:	d41f      	bmi.n	8008686 <_malloc_r+0xd6>
 8008646:	2a0b      	cmp	r2, #11
 8008648:	d917      	bls.n	800867a <_malloc_r+0xca>
 800864a:	1961      	adds	r1, r4, r5
 800864c:	42a3      	cmp	r3, r4
 800864e:	6025      	str	r5, [r4, #0]
 8008650:	bf18      	it	ne
 8008652:	6059      	strne	r1, [r3, #4]
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	bf08      	it	eq
 8008658:	f8c8 1000 	streq.w	r1, [r8]
 800865c:	5162      	str	r2, [r4, r5]
 800865e:	604b      	str	r3, [r1, #4]
 8008660:	4638      	mov	r0, r7
 8008662:	f104 060b 	add.w	r6, r4, #11
 8008666:	f000 f829 	bl	80086bc <__malloc_unlock>
 800866a:	f026 0607 	bic.w	r6, r6, #7
 800866e:	1d23      	adds	r3, r4, #4
 8008670:	1af2      	subs	r2, r6, r3
 8008672:	d0ae      	beq.n	80085d2 <_malloc_r+0x22>
 8008674:	1b9b      	subs	r3, r3, r6
 8008676:	50a3      	str	r3, [r4, r2]
 8008678:	e7ab      	b.n	80085d2 <_malloc_r+0x22>
 800867a:	42a3      	cmp	r3, r4
 800867c:	6862      	ldr	r2, [r4, #4]
 800867e:	d1dd      	bne.n	800863c <_malloc_r+0x8c>
 8008680:	f8c8 2000 	str.w	r2, [r8]
 8008684:	e7ec      	b.n	8008660 <_malloc_r+0xb0>
 8008686:	4623      	mov	r3, r4
 8008688:	6864      	ldr	r4, [r4, #4]
 800868a:	e7ac      	b.n	80085e6 <_malloc_r+0x36>
 800868c:	4634      	mov	r4, r6
 800868e:	6876      	ldr	r6, [r6, #4]
 8008690:	e7b4      	b.n	80085fc <_malloc_r+0x4c>
 8008692:	4613      	mov	r3, r2
 8008694:	e7cc      	b.n	8008630 <_malloc_r+0x80>
 8008696:	230c      	movs	r3, #12
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	4638      	mov	r0, r7
 800869c:	f000 f80e 	bl	80086bc <__malloc_unlock>
 80086a0:	e797      	b.n	80085d2 <_malloc_r+0x22>
 80086a2:	6025      	str	r5, [r4, #0]
 80086a4:	e7dc      	b.n	8008660 <_malloc_r+0xb0>
 80086a6:	605b      	str	r3, [r3, #4]
 80086a8:	deff      	udf	#255	; 0xff
 80086aa:	bf00      	nop
 80086ac:	20000dc8 	.word	0x20000dc8

080086b0 <__malloc_lock>:
 80086b0:	4801      	ldr	r0, [pc, #4]	; (80086b8 <__malloc_lock+0x8>)
 80086b2:	f7ff bf01 	b.w	80084b8 <__retarget_lock_acquire_recursive>
 80086b6:	bf00      	nop
 80086b8:	20000dc4 	.word	0x20000dc4

080086bc <__malloc_unlock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	; (80086c4 <__malloc_unlock+0x8>)
 80086be:	f7ff befc 	b.w	80084ba <__retarget_lock_release_recursive>
 80086c2:	bf00      	nop
 80086c4:	20000dc4 	.word	0x20000dc4

080086c8 <_malloc_usable_size_r>:
 80086c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086cc:	1f18      	subs	r0, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfbc      	itt	lt
 80086d2:	580b      	ldrlt	r3, [r1, r0]
 80086d4:	18c0      	addlt	r0, r0, r3
 80086d6:	4770      	bx	lr

080086d8 <_sbrk_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	; (80086f4 <_sbrk_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7fb ff1e 	bl	8004524 <_sbrk>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_sbrk_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_sbrk_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000dc0 	.word	0x20000dc0

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
